
ES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001284  08001284  00011284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800129c  0800129c  0001129c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080012a0  080012a0  000112a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  080012a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  7 .bss          00000098  20000020  20000020  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000b8  200000b8  00020020  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000819e  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000129f  00000000  00000000  000281ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b10  00000000  00000000  00029490  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a48  00000000  00000000  00029fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003533  00000000  00000000  0002a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003678  00000000  00000000  0002df1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00031593  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002fec  00000000  00000000  00031614  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00034600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800126c 	.word	0x0800126c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	0800126c 	.word	0x0800126c

080001c8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80001d6:	2300      	movs	r3, #0
 80001d8:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80001e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80001ea:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	791b      	ldrb	r3, [r3, #4]
 80001f0:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80001f6:	4313      	orrs	r3, r2
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	4313      	orrs	r3, r2
 80001fc:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	68fa      	ldr	r2, [r7, #12]
 8000202:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	689b      	ldr	r3, [r3, #8]
 8000208:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800020a:	68fa      	ldr	r2, [r7, #12]
 800020c:	4b18      	ldr	r3, [pc, #96]	; (8000270 <ADC_Init+0xa8>)
 800020e:	4013      	ands	r3, r2
 8000210:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800021a:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000220:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	795b      	ldrb	r3, [r3, #5]
 8000226:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000228:	4313      	orrs	r3, r2
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	4313      	orrs	r3, r2
 800022e:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	68fa      	ldr	r2, [r7, #12]
 8000234:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800023a:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000242:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	7d1b      	ldrb	r3, [r3, #20]
 8000248:	3b01      	subs	r3, #1
 800024a:	b2da      	uxtb	r2, r3
 800024c:	7afb      	ldrb	r3, [r7, #11]
 800024e:	4313      	orrs	r3, r2
 8000250:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000252:	7afb      	ldrb	r3, [r7, #11]
 8000254:	051b      	lsls	r3, r3, #20
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4313      	orrs	r3, r2
 800025a:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000262:	bf00      	nop
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	c0fff7fd 	.word	0xc0fff7fd

08000274 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000280:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <ADC_CommonInit+0x48>)
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000286:	68fa      	ldr	r2, [r7, #12]
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <ADC_CommonInit+0x4c>)
 800028a:	4013      	ands	r3, r2
 800028c:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000296:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800029c:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80002a2:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80002a4:	68fa      	ldr	r2, [r7, #12]
 80002a6:	4313      	orrs	r3, r2
 80002a8:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80002aa:	4a04      	ldr	r2, [pc, #16]	; (80002bc <ADC_CommonInit+0x48>)
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	6053      	str	r3, [r2, #4]
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	40012300 	.word	0x40012300
 80002c0:	fffc30e0 	.word	0xfffc30e0

080002c4 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80002d0:	78fb      	ldrb	r3, [r7, #3]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d006      	beq.n	80002e4 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	689b      	ldr	r3, [r3, #8]
 80002da:	f043 0201 	orr.w	r2, r3, #1
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80002e2:	e005      	b.n	80002f0 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	f023 0201 	bic.w	r2, r3, #1
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	609a      	str	r2, [r3, #8]
  }
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr

080002fc <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	4608      	mov	r0, r1
 8000306:	4611      	mov	r1, r2
 8000308:	461a      	mov	r2, r3
 800030a:	4603      	mov	r3, r0
 800030c:	70fb      	strb	r3, [r7, #3]
 800030e:	460b      	mov	r3, r1
 8000310:	70bb      	strb	r3, [r7, #2]
 8000312:	4613      	mov	r3, r2
 8000314:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
 800031a:	2300      	movs	r3, #0
 800031c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800031e:	78fb      	ldrb	r3, [r7, #3]
 8000320:	2b09      	cmp	r3, #9
 8000322:	d923      	bls.n	800036c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800032a:	78fb      	ldrb	r3, [r7, #3]
 800032c:	f1a3 020a 	sub.w	r2, r3, #10
 8000330:	4613      	mov	r3, r2
 8000332:	005b      	lsls	r3, r3, #1
 8000334:	4413      	add	r3, r2
 8000336:	2207      	movs	r2, #7
 8000338:	fa02 f303 	lsl.w	r3, r2, r3
 800033c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	43db      	mvns	r3, r3
 8000342:	68fa      	ldr	r2, [r7, #12]
 8000344:	4013      	ands	r3, r2
 8000346:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000348:	7879      	ldrb	r1, [r7, #1]
 800034a:	78fb      	ldrb	r3, [r7, #3]
 800034c:	f1a3 020a 	sub.w	r2, r3, #10
 8000350:	4613      	mov	r3, r2
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	4413      	add	r3, r2
 8000356:	fa01 f303 	lsl.w	r3, r1, r3
 800035a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800035c:	68fa      	ldr	r2, [r7, #12]
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	4313      	orrs	r3, r2
 8000362:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	60da      	str	r2, [r3, #12]
 800036a:	e01e      	b.n	80003aa <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000372:	78fa      	ldrb	r2, [r7, #3]
 8000374:	4613      	mov	r3, r2
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	4413      	add	r3, r2
 800037a:	2207      	movs	r2, #7
 800037c:	fa02 f303 	lsl.w	r3, r2, r3
 8000380:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	43db      	mvns	r3, r3
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	4013      	ands	r3, r2
 800038a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800038c:	7879      	ldrb	r1, [r7, #1]
 800038e:	78fa      	ldrb	r2, [r7, #3]
 8000390:	4613      	mov	r3, r2
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	4413      	add	r3, r2
 8000396:	fa01 f303 	lsl.w	r3, r1, r3
 800039a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800039c:	68fa      	ldr	r2, [r7, #12]
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80003aa:	78bb      	ldrb	r3, [r7, #2]
 80003ac:	2b06      	cmp	r3, #6
 80003ae:	d821      	bhi.n	80003f4 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003b4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80003b6:	78bb      	ldrb	r3, [r7, #2]
 80003b8:	1e5a      	subs	r2, r3, #1
 80003ba:	4613      	mov	r3, r2
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	4413      	add	r3, r2
 80003c0:	221f      	movs	r2, #31
 80003c2:	fa02 f303 	lsl.w	r3, r2, r3
 80003c6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	43db      	mvns	r3, r3
 80003cc:	68fa      	ldr	r2, [r7, #12]
 80003ce:	4013      	ands	r3, r2
 80003d0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80003d2:	78f9      	ldrb	r1, [r7, #3]
 80003d4:	78bb      	ldrb	r3, [r7, #2]
 80003d6:	1e5a      	subs	r2, r3, #1
 80003d8:	4613      	mov	r3, r2
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	4413      	add	r3, r2
 80003de:	fa01 f303 	lsl.w	r3, r1, r3
 80003e2:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80003e4:	68fa      	ldr	r2, [r7, #12]
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	68fa      	ldr	r2, [r7, #12]
 80003f0:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80003f2:	e047      	b.n	8000484 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80003f4:	78bb      	ldrb	r3, [r7, #2]
 80003f6:	2b0c      	cmp	r3, #12
 80003f8:	d821      	bhi.n	800043e <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fe:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000400:	78bb      	ldrb	r3, [r7, #2]
 8000402:	1fda      	subs	r2, r3, #7
 8000404:	4613      	mov	r3, r2
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	4413      	add	r3, r2
 800040a:	221f      	movs	r2, #31
 800040c:	fa02 f303 	lsl.w	r3, r2, r3
 8000410:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	43db      	mvns	r3, r3
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	4013      	ands	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800041c:	78f9      	ldrb	r1, [r7, #3]
 800041e:	78bb      	ldrb	r3, [r7, #2]
 8000420:	1fda      	subs	r2, r3, #7
 8000422:	4613      	mov	r3, r2
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	4313      	orrs	r3, r2
 8000434:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	68fa      	ldr	r2, [r7, #12]
 800043a:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800043c:	e022      	b.n	8000484 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000442:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000444:	78bb      	ldrb	r3, [r7, #2]
 8000446:	f1a3 020d 	sub.w	r2, r3, #13
 800044a:	4613      	mov	r3, r2
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	4413      	add	r3, r2
 8000450:	221f      	movs	r2, #31
 8000452:	fa02 f303 	lsl.w	r3, r2, r3
 8000456:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	43db      	mvns	r3, r3
 800045c:	68fa      	ldr	r2, [r7, #12]
 800045e:	4013      	ands	r3, r2
 8000460:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000462:	78f9      	ldrb	r1, [r7, #3]
 8000464:	78bb      	ldrb	r3, [r7, #2]
 8000466:	f1a3 020d 	sub.w	r2, r3, #13
 800046a:	4613      	mov	r3, r2
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	4413      	add	r3, r2
 8000470:	fa01 f303 	lsl.w	r3, r1, r3
 8000474:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	4313      	orrs	r3, r2
 800047c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000484:	bf00      	nop
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr

08000490 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	609a      	str	r2, [r3, #8]
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	2300      	movs	r3, #0
 80004c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80004c2:	4b14      	ldr	r3, [pc, #80]	; (8000514 <DAC_Init+0x64>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80004c8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	fa02 f303 	lsl.w	r3, r2, r3
 80004d2:	43db      	mvns	r3, r3
 80004d4:	68fa      	ldr	r2, [r7, #12]
 80004d6:	4013      	ands	r3, r2
 80004d8:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80004e8:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80004ee:	4313      	orrs	r3, r2
 80004f0:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	fa02 f303 	lsl.w	r3, r2, r3
 80004fa:	68fa      	ldr	r2, [r7, #12]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000500:	4a04      	ldr	r2, [pc, #16]	; (8000514 <DAC_Init+0x64>)
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	6013      	str	r3, [r2, #0]
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40007400 	.word	0x40007400

08000518 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000524:	78fb      	ldrb	r3, [r7, #3]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d009      	beq.n	800053e <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 800052a:	490d      	ldr	r1, [pc, #52]	; (8000560 <DAC_Cmd+0x48>)
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <DAC_Cmd+0x48>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	2001      	movs	r0, #1
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	fa00 f303 	lsl.w	r3, r0, r3
 8000538:	4313      	orrs	r3, r2
 800053a:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 800053c:	e009      	b.n	8000552 <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800053e:	4908      	ldr	r1, [pc, #32]	; (8000560 <DAC_Cmd+0x48>)
 8000540:	4b07      	ldr	r3, [pc, #28]	; (8000560 <DAC_Cmd+0x48>)
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	2001      	movs	r0, #1
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	fa00 f303 	lsl.w	r3, r0, r3
 800054c:	43db      	mvns	r3, r3
 800054e:	4013      	ands	r3, r2
 8000550:	600b      	str	r3, [r1, #0]
  }
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40007400 	.word	0x40007400

08000564 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <DAC_SetChannel1Data+0x34>)
 8000576:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	3308      	adds	r3, #8
 8000580:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	461a      	mov	r2, r3
 8000586:	887b      	ldrh	r3, [r7, #2]
 8000588:	6013      	str	r3, [r2, #0]
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40007400 	.word	0x40007400

0800059c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	4b25      	ldr	r3, [pc, #148]	; (8000648 <DMA_Init+0xac>)
 80005b4:	4013      	ands	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80005c6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80005d2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	6a1b      	ldr	r3, [r3, #32]
 80005d8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80005de:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005e4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80005ea:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005f0:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f023 0307 	bic.w	r3, r3, #7
 800060a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000614:	4313      	orrs	r3, r2
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	4313      	orrs	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	691a      	ldr	r2, [r3, #16]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685a      	ldr	r2, [r3, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	689a      	ldr	r2, [r3, #8]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	60da      	str	r2, [r3, #12]
}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	f01c803f 	.word	0xf01c803f

0800064c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f043 0201 	orr.w	r2, r3, #1
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800066a:	e005      	b.n	8000678 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f023 0201 	bic.w	r2, r3, #1
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	601a      	str	r2, [r3, #0]
  }
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800069c:	2301      	movs	r3, #1
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	e001      	b.n	80006a6 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80006be:	2300      	movs	r3, #0
 80006c0:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a15      	ldr	r2, [pc, #84]	; (8000720 <DMA_GetFlagStatus+0x6c>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d802      	bhi.n	80006d4 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <DMA_GetFlagStatus+0x70>)
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	e001      	b.n	80006d8 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <DMA_GetFlagStatus+0x74>)
 80006d6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d003      	beq.n	80006ea <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	e002      	b.n	80006f0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80006f6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80006fa:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	4013      	ands	r3, r2
 8000702:	2b00      	cmp	r3, #0
 8000704:	d002      	beq.n	800070c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000706:	2301      	movs	r3, #1
 8000708:	75fb      	strb	r3, [r7, #23]
 800070a:	e001      	b.n	8000710 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800070c:	2300      	movs	r3, #0
 800070e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000710:	7dfb      	ldrb	r3, [r7, #23]
}
 8000712:	4618      	mov	r0, r3
 8000714:	371c      	adds	r7, #28
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	4002640f 	.word	0x4002640f
 8000724:	40026000 	.word	0x40026000
 8000728:	40026400 	.word	0x40026400

0800072c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a10      	ldr	r2, [pc, #64]	; (800077c <DMA_ClearFlag+0x50>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d802      	bhi.n	8000744 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <DMA_ClearFlag+0x54>)
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	e001      	b.n	8000748 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <DMA_ClearFlag+0x58>)
 8000746:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800074e:	2b00      	cmp	r3, #0
 8000750:	d007      	beq.n	8000762 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000758:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000760:	e006      	b.n	8000770 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000768:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	6093      	str	r3, [r2, #8]
  }    
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	4002640f 	.word	0x4002640f
 8000780:	40026000 	.word	0x40026000
 8000784:	40026400 	.word	0x40026400

08000788 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000788:	b480      	push	{r7}
 800078a:	b087      	sub	sp, #28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	e076      	b.n	8000892 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80007a4:	2201      	movs	r2, #1
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	4013      	ands	r3, r2
 80007b6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d165      	bne.n	800088c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	2103      	movs	r1, #3
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	43db      	mvns	r3, r3
 80007d0:	401a      	ands	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	791b      	ldrb	r3, [r3, #4]
 80007de:	4619      	mov	r1, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	fa01 f303 	lsl.w	r3, r1, r3
 80007e8:	431a      	orrs	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	791b      	ldrb	r3, [r3, #4]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d003      	beq.n	80007fe <GPIO_Init+0x76>
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d12e      	bne.n	800085c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	689a      	ldr	r2, [r3, #8]
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	2103      	movs	r1, #3
 8000808:	fa01 f303 	lsl.w	r3, r1, r3
 800080c:	43db      	mvns	r3, r3
 800080e:	401a      	ands	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	689a      	ldr	r2, [r3, #8]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	795b      	ldrb	r3, [r3, #5]
 800081c:	4619      	mov	r1, r3
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	431a      	orrs	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	b29b      	uxth	r3, r3
 8000834:	2101      	movs	r1, #1
 8000836:	fa01 f303 	lsl.w	r3, r1, r3
 800083a:	43db      	mvns	r3, r3
 800083c:	401a      	ands	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685a      	ldr	r2, [r3, #4]
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	799b      	ldrb	r3, [r3, #6]
 800084a:	4619      	mov	r1, r3
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	b29b      	uxth	r3, r3
 8000850:	fa01 f303 	lsl.w	r3, r1, r3
 8000854:	b29b      	uxth	r3, r3
 8000856:	431a      	orrs	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	68da      	ldr	r2, [r3, #12]
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	b29b      	uxth	r3, r3
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	2103      	movs	r1, #3
 8000868:	fa01 f303 	lsl.w	r3, r1, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	401a      	ands	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	68da      	ldr	r2, [r3, #12]
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	79db      	ldrb	r3, [r3, #7]
 800087c:	4619      	mov	r1, r3
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	fa01 f303 	lsl.w	r3, r1, r3
 8000886:	431a      	orrs	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3301      	adds	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	2b0f      	cmp	r3, #15
 8000896:	d985      	bls.n	80007a4 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000898:	bf00      	nop
 800089a:	371c      	adds	r7, #28
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d006      	beq.n	80008c4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80008b6:	490a      	ldr	r1, [pc, #40]	; (80008e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4313      	orrs	r3, r2
 80008c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80008c2:	e006      	b.n	80008d2 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80008c4:	4906      	ldr	r1, [pc, #24]	; (80008e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	43db      	mvns	r3, r3
 80008ce:	4013      	ands	r3, r2
 80008d0:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d006      	beq.n	8000904 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80008f6:	490a      	ldr	r1, [pc, #40]	; (8000920 <RCC_APB1PeriphClockCmd+0x3c>)
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <RCC_APB1PeriphClockCmd+0x3c>)
 80008fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4313      	orrs	r3, r2
 8000900:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000902:	e006      	b.n	8000912 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000904:	4906      	ldr	r1, [pc, #24]	; (8000920 <RCC_APB1PeriphClockCmd+0x3c>)
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <RCC_APB1PeriphClockCmd+0x3c>)
 8000908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	43db      	mvns	r3, r3
 800090e:	4013      	ands	r3, r2
 8000910:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d006      	beq.n	8000944 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000936:	490a      	ldr	r1, [pc, #40]	; (8000960 <RCC_APB2PeriphClockCmd+0x3c>)
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <RCC_APB2PeriphClockCmd+0x3c>)
 800093a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4313      	orrs	r3, r2
 8000940:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000942:	e006      	b.n	8000952 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000944:	4906      	ldr	r1, [pc, #24]	; (8000960 <RCC_APB2PeriphClockCmd+0x3c>)
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <RCC_APB2PeriphClockCmd+0x3c>)
 8000948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	43db      	mvns	r3, r3
 800094e:	4013      	ands	r3, r2
 8000950:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	887a      	ldrh	r2, [r7, #2]
 8000974:	819a      	strh	r2, [r3, #12]
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	891b      	ldrh	r3, [r3, #8]
 8000998:	b29a      	uxth	r2, r3
 800099a:	887b      	ldrh	r3, [r7, #2]
 800099c:	4013      	ands	r3, r2
 800099e:	b29b      	uxth	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d002      	beq.n	80009aa <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80009a4:	2301      	movs	r3, #1
 80009a6:	73fb      	strb	r3, [r7, #15]
 80009a8:	e001      	b.n	80009ae <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a29      	ldr	r2, [pc, #164]	; (8000a78 <TIM_TimeBaseInit+0xbc>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d013      	beq.n	8000a00 <TIM_TimeBaseInit+0x44>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a28      	ldr	r2, [pc, #160]	; (8000a7c <TIM_TimeBaseInit+0xc0>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d00f      	beq.n	8000a00 <TIM_TimeBaseInit+0x44>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009e6:	d00b      	beq.n	8000a00 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a25      	ldr	r2, [pc, #148]	; (8000a80 <TIM_TimeBaseInit+0xc4>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d007      	beq.n	8000a00 <TIM_TimeBaseInit+0x44>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a24      	ldr	r2, [pc, #144]	; (8000a84 <TIM_TimeBaseInit+0xc8>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d003      	beq.n	8000a00 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a23      	ldr	r2, [pc, #140]	; (8000a88 <TIM_TimeBaseInit+0xcc>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d108      	bne.n	8000a12 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000a00:	89fb      	ldrh	r3, [r7, #14]
 8000a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a06:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	885a      	ldrh	r2, [r3, #2]
 8000a0c:	89fb      	ldrh	r3, [r7, #14]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <TIM_TimeBaseInit+0xd0>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d00c      	beq.n	8000a34 <TIM_TimeBaseInit+0x78>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <TIM_TimeBaseInit+0xd4>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d008      	beq.n	8000a34 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000a22:	89fb      	ldrh	r3, [r7, #14]
 8000a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a28:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	891a      	ldrh	r2, [r3, #8]
 8000a2e:	89fb      	ldrh	r3, [r7, #14]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	89fa      	ldrh	r2, [r7, #14]
 8000a38:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685a      	ldr	r2, [r3, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	881a      	ldrh	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <TIM_TimeBaseInit+0xbc>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d003      	beq.n	8000a5a <TIM_TimeBaseInit+0x9e>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <TIM_TimeBaseInit+0xc0>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d104      	bne.n	8000a64 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	7a9b      	ldrb	r3, [r3, #10]
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2201      	movs	r2, #1
 8000a68:	829a      	strh	r2, [r3, #20]
}
 8000a6a:	bf00      	nop
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40010000 	.word	0x40010000
 8000a7c:	40010400 	.word	0x40010400
 8000a80:	40000400 	.word	0x40000400
 8000a84:	40000800 	.word	0x40000800
 8000a88:	40000c00 	.word	0x40000c00
 8000a8c:	40001000 	.word	0x40001000
 8000a90:	40001400 	.word	0x40001400

08000a94 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000aa0:	78fb      	ldrb	r3, [r7, #3]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d008      	beq.n	8000ab8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000ab6:	e007      	b.n	8000ac8 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	f023 0301 	bic.w	r3, r3, #1
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	801a      	strh	r2, [r3, #0]
  }
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	807b      	strh	r3, [r7, #2]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ae4:	787b      	ldrb	r3, [r7, #1]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d008      	beq.n	8000afc <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	899b      	ldrh	r3, [r3, #12]
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	887b      	ldrh	r3, [r7, #2]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000afa:	e009      	b.n	8000b10 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	899b      	ldrh	r3, [r3, #12]
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	887b      	ldrh	r3, [r7, #2]
 8000b04:	43db      	mvns	r3, r3
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	4013      	ands	r3, r2
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	819a      	strh	r2, [r3, #12]
  }
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	81bb      	strh	r3, [r7, #12]
 8000b30:	2300      	movs	r3, #0
 8000b32:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	8a1b      	ldrh	r3, [r3, #16]
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	899b      	ldrh	r3, [r3, #12]
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	887b      	ldrh	r3, [r7, #2]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000b4c:	89bb      	ldrh	r3, [r7, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d005      	beq.n	8000b5e <TIM_GetITStatus+0x42>
 8000b52:	897b      	ldrh	r3, [r7, #10]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d002      	beq.n	8000b5e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e001      	b.n	8000b62 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000b7c:	887b      	ldrh	r3, [r7, #2]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	821a      	strh	r2, [r3, #16]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <STM_EVAL_LEDInit+0x50>)
 8000ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fe7b 	bl	80008a4 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <STM_EVAL_LEDInit+0x54>)
 8000bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <STM_EVAL_LEDInit+0x58>)
 8000bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd0:	f107 0208 	add.w	r2, r7, #8
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fdd6 	bl	8000788 <GPIO_Init>
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	0800128c 	.word	0x0800128c
 8000be8:	08001284 	.word	0x08001284
 8000bec:	20000000 	.word	0x20000000

08000bf0 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <STM_EVAL_LEDOn+0x28>)
 8000bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c02:	79fa      	ldrb	r2, [r7, #7]
 8000c04:	4905      	ldr	r1, [pc, #20]	; (8000c1c <STM_EVAL_LEDOn+0x2c>)
 8000c06:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000c0a:	831a      	strh	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	08001284 	.word	0x08001284

08000c20 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	4a09      	ldr	r2, [pc, #36]	; (8000c54 <STM_EVAL_LEDToggle+0x34>)
 8000c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c32:	79fa      	ldrb	r2, [r7, #7]
 8000c34:	4907      	ldr	r1, [pc, #28]	; (8000c54 <STM_EVAL_LEDToggle+0x34>)
 8000c36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c3a:	6952      	ldr	r2, [r2, #20]
 8000c3c:	79f9      	ldrb	r1, [r7, #7]
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <STM_EVAL_LEDToggle+0x38>)
 8000c40:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8000c44:	404a      	eors	r2, r1
 8000c46:	615a      	str	r2, [r3, #20]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	20000000 	.word	0x20000000
 8000c58:	08001284 	.word	0x08001284

08000c5c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000c60:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <Audio_MAL_IRQHandler+0xe4>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b37      	ldr	r3, [pc, #220]	; (8000d44 <Audio_MAL_IRQHandler+0xe8>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4610      	mov	r0, r2
 8000c6c:	f7ff fd22 	bl	80006b4 <DMA_GetFlagStatus>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d062      	beq.n	8000d3c <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000c76:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <Audio_MAL_IRQHandler+0xec>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d04a      	beq.n	8000d14 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000c7e:	bf00      	nop
 8000c80:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <Audio_MAL_IRQHandler+0xe4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fcfd 	bl	8000684 <DMA_GetCmdStatus>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1f7      	bne.n	8000c80 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000c90:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <Audio_MAL_IRQHandler+0xe4>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <Audio_MAL_IRQHandler+0xe8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	f7ff fd46 	bl	800072c <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	; (8000d4c <Audio_MAL_IRQHandler+0xf0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <Audio_MAL_IRQHandler+0xf4>)
 8000ca8:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000caa:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <Audio_MAL_IRQHandler+0xec>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	bf28      	it	cs
 8000cb6:	4613      	movcs	r3, r2
 8000cb8:	4a25      	ldr	r2, [pc, #148]	; (8000d50 <Audio_MAL_IRQHandler+0xf4>)
 8000cba:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000cbc:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <Audio_MAL_IRQHandler+0xe4>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4923      	ldr	r1, [pc, #140]	; (8000d50 <Audio_MAL_IRQHandler+0xf4>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fc6a 	bl	800059c <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <Audio_MAL_IRQHandler+0xe4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2101      	movs	r1, #1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fcbc 	bl	800064c <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <Audio_MAL_IRQHandler+0xf0>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <Audio_MAL_IRQHandler+0xec>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ce0:	428b      	cmp	r3, r1
 8000ce2:	bf28      	it	cs
 8000ce4:	460b      	movcs	r3, r1
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <Audio_MAL_IRQHandler+0xf0>)
 8000cec:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <Audio_MAL_IRQHandler+0xec>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <Audio_MAL_IRQHandler+0xec>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	bf28      	it	cs
 8000cfe:	460b      	movcs	r3, r1
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <Audio_MAL_IRQHandler+0xec>)
 8000d04:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <Audio_MAL_IRQHandler+0xe4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fc9d 	bl	800064c <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000d12:	e013      	b.n	8000d3c <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <Audio_MAL_IRQHandler+0xe4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fc96 	bl	800064c <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <Audio_MAL_IRQHandler+0xe4>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <Audio_MAL_IRQHandler+0xe8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	f7ff fcfe 	bl	800072c <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <Audio_MAL_IRQHandler+0xf0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f948 	bl	8000fcc <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000018 	.word	0x20000018
 8000d44:	2000001c 	.word	0x2000001c
 8000d48:	20000010 	.word	0x20000010
 8000d4c:	2000003c 	.word	0x2000003c
 8000d50:	2000007c 	.word	0x2000007c

08000d54 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000d58:	f7ff ff80 	bl	8000c5c <Audio_MAL_IRQHandler>
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000d64:	f7ff ff7a 	bl	8000c5c <Audio_MAL_IRQHandler>
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000d70:	2102      	movs	r1, #2
 8000d72:	480d      	ldr	r0, [pc, #52]	; (8000da8 <SPI3_IRQHandler+0x3c>)
 8000d74:	f7ff fe06 	bl	8000984 <SPI_I2S_GetFlagStatus>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d011      	beq.n	8000da2 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <SPI3_IRQHandler+0x40>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d106      	bne.n	8000d94 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000d86:	f000 f92d 	bl	8000fe4 <EVAL_AUDIO_GetSampleCallBack>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	2004      	movs	r0, #4
 8000d90:	f7ff fbe8 	bl	8000564 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000d94:	f000 f926 	bl	8000fe4 <EVAL_AUDIO_GetSampleCallBack>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <SPI3_IRQHandler+0x3c>)
 8000d9e:	f7ff fde1 	bl	8000964 <SPI_I2S_SendData>
  }
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40003c00 	.word	0x40003c00
 8000dac:	20000014 	.word	0x20000014

08000db0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000dba:	4909      	ldr	r1, [pc, #36]	; (8000de0 <NVIC_EnableIRQ+0x30>)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	095b      	lsrs	r3, r3, #5
 8000dc2:	79fa      	ldrb	r2, [r7, #7]
 8000dc4:	f002 021f 	and.w	r2, r2, #31
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <TIM5_IRQHandler>:
**
**  Abstract: main program
**
**===========================================================================
*/
void TIM5_IRQHandler(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	/* Check if interrupt has occured */
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
 8000de8:	2101      	movs	r1, #1
 8000dea:	480d      	ldr	r0, [pc, #52]	; (8000e20 <TIM5_IRQHandler+0x3c>)
 8000dec:	f7ff fe96 	bl	8000b1c <TIM_GetITStatus>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d011      	beq.n	8000e1a <TIM5_IRQHandler+0x36>
	{
		/* Clear interrupt pending bit */
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 8000df6:	2101      	movs	r1, #1
 8000df8:	4809      	ldr	r0, [pc, #36]	; (8000e20 <TIM5_IRQHandler+0x3c>)
 8000dfa:	f7ff feb9 	bl	8000b70 <TIM_ClearITPendingBit>
		 DAC->DHR12R1 = ADC1->DR;
 8000dfe:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <TIM5_IRQHandler+0x40>)
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <TIM5_IRQHandler+0x44>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e04:	6093      	str	r3, [r2, #8]
		 DAC->DHR12R2 = ADC2->DR;
 8000e06:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <TIM5_IRQHandler+0x40>)
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <TIM5_IRQHandler+0x48>)
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0c:	6153      	str	r3, [r2, #20]
		 ADC_SoftwareStartConv(ADC1);
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <TIM5_IRQHandler+0x44>)
 8000e10:	f7ff fb3e 	bl	8000490 <ADC_SoftwareStartConv>

		 /* WHAT EVER YOU NEED TO DO IN THE INTERRUPT HANDLER GOES HERE */
		 STM_EVAL_LEDToggle(LED3);
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff ff03 	bl	8000c20 <STM_EVAL_LEDToggle>
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40000c00 	.word	0x40000c00
 8000e24:	40007400 	.word	0x40007400
 8000e28:	40012000 	.word	0x40012000
 8000e2c:	40012100 	.word	0x40012100

08000e30 <main>:

int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /*Analog to digital converter demonstration*/
  RCC_Configuration();
 8000e34:	f000 f812 	bl	8000e5c <RCC_Configuration>

  GPIO_Configuration();
 8000e38:	f000 f86c 	bl	8000f14 <GPIO_Configuration>

  ADC_Configuration();
 8000e3c:	f000 f880 	bl	8000f40 <ADC_Configuration>

  DAC_Configuration();
 8000e40:	f000 f848 	bl	8000ed4 <DAC_Configuration>

  TIM_Configuration(840);
 8000e44:	f44f 7052 	mov.w	r0, #840	; 0x348
 8000e48:	f000 f81c 	bl	8000e84 <TIM_Configuration>

  /* Initialize LEDs */
  STM_EVAL_LEDInit(LED3);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff fea1 	bl	8000b94 <STM_EVAL_LEDInit>


  /* Turn on LEDs */
  STM_EVAL_LEDOn(LED3);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f7ff fecc 	bl	8000bf0 <STM_EVAL_LEDOn>

  /* Infinite loop */
  while (1)
  {
  }
 8000e58:	e7fe      	b.n	8000e58 <main+0x28>
 8000e5a:	bf00      	nop

08000e5c <RCC_Configuration>:
}

void RCC_Configuration(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	/* Initialize all the peripherals here. */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2, ENABLE);
 8000e60:	2101      	movs	r1, #1
 8000e62:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000e66:	f7ff fd5d 	bl	8000924 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA, ENABLE);
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f7ff fd19 	bl	80008a4 <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC  | RCC_APB1Periph_TIM5 , ENABLE);
 8000e72:	2101      	movs	r1, #1
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <RCC_Configuration+0x24>)
 8000e76:	f7ff fd35 	bl	80008e4 <RCC_APB1PeriphClockCmd>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008

08000e84 <TIM_Configuration>:
/* *
 *  @brief Initialize the timer.
 *  @args interval : 84000 = 1ms
 **/

void TIM_Configuration(int interval) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;

	/* Put your timer initialisation here */

	/* Configure the timer*/
	TIM_TimeBaseInitStruct.TIM_Period = interval - 1;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	613b      	str	r3, [r7, #16]
	TIM_TimeBaseInitStruct.TIM_Prescaler = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInitStruct.TIM_RepetitionCounter = TIM_CounterMode_Up;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	75bb      	strb	r3, [r7, #22]
	TIM_TimeBaseInitStruct.TIM_RepetitionCounter = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	75bb      	strb	r3, [r7, #22]

	/* Initialize timer 3*/
	TIM_TimeBaseInit(TIM5, &TIM_TimeBaseInitStruct);
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <TIM_Configuration+0x4c>)
 8000eaa:	f7ff fd87 	bl	80009bc <TIM_TimeBaseInit>

	NVIC_EnableIRQ(TIM5_IRQn); // Enable IRQ for TIM5 in NVIC
 8000eae:	2032      	movs	r0, #50	; 0x32
 8000eb0:	f7ff ff7e 	bl	8000db0 <NVIC_EnableIRQ>

	/* Enable timer interrupt */
	TIM_ITConfig(TIM5, TIM_IT_Update, ENABLE);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <TIM_Configuration+0x4c>)
 8000eba:	f7ff fe0b 	bl	8000ad4 <TIM_ITConfig>

	/* Start the count */
	TIM_Cmd(TIM5, ENABLE);
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <TIM_Configuration+0x4c>)
 8000ec2:	f7ff fde7 	bl	8000a94 <TIM_Cmd>
}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40000c00 	.word	0x40000c00

08000ed4 <DAC_Configuration>:
/**
 * Initialize DAC for both chnnels
 */
void DAC_Configuration(void){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
	DAC_InitTypeDef DAC_InitStructure;

	DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
	DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
	DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
	DAC_Init(DAC_Channel_1, &DAC_InitStructure);
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4619      	mov	r1, r3
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff fae0 	bl	80004b0 <DAC_Init>
	DAC_Init(DAC_Channel_2, &DAC_InitStructure);
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	2010      	movs	r0, #16
 8000ef6:	f7ff fadb 	bl	80004b0 <DAC_Init>

	DAC_Cmd(DAC_Channel_1, ENABLE);
 8000efa:	2101      	movs	r1, #1
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fb0b 	bl	8000518 <DAC_Cmd>
	DAC_Cmd(DAC_Channel_2, ENABLE);
 8000f02:	2101      	movs	r1, #1
 8000f04:	2010      	movs	r0, #16
 8000f06:	f7ff fb07 	bl	8000518 <DAC_Cmd>
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop

08000f14 <GPIO_Configuration>:

/**
 * Initialize GPIO for pins to be used
 */
void GPIO_Configuration(void){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// We will be sampling Pin 1 and 2 of GPIOA
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AN;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType 	= GPIO_OType_PP;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_5 | GPIO_Pin_4 | GPIO_Pin_2 | GPIO_Pin_1;
 8000f22:	2336      	movs	r3, #54	; 0x36
 8000f24:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4803      	ldr	r0, [pc, #12]	; (8000f3c <GPIO_Configuration+0x28>)
 8000f30:	f7ff fc2a 	bl	8000788 <GPIO_Init>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40020000 	.word	0x40020000

08000f40 <ADC_Configuration>:

/**
 *  Configure hardware that is common to all three ADC
 */
void ADC_Configuration(void){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
	ADC_InitTypeDef 		ADC_InitStructure;
	ADC_CommonInitTypeDef 	ADC_InitCommonStructure;

	/* Fill the data structure common to all  ADCs*/
	ADC_InitCommonStructure.ADC_Mode 	  		= ADC_DualMode_RegSimult;
 8000f46:	2306      	movs	r3, #6
 8000f48:	603b      	str	r3, [r7, #0]
	ADC_InitCommonStructure.ADC_Prescaler 		= ADC_Prescaler_Div2;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
	ADC_InitCommonStructure.ADC_DMAAccessMode 	= ADC_DMAAccessMode_Disabled;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]

	ADC_CommonInit(&ADC_InitCommonStructure);	// <---------- Initialize the hardware
 8000f52:	463b      	mov	r3, r7
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff f98d 	bl	8000274 <ADC_CommonInit>


	/* Fill the structure to initialize the two ADCs */
	ADC_InitStructure.ADC_Resolution 			= ADC_Resolution_8b;
 8000f5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f5e:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_ScanConvMode 			= DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	753b      	strb	r3, [r7, #20]
	ADC_InitStructure.ADC_ContinuousConvMode	= DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	757b      	strb	r3, [r7, #21]
	ADC_InitStructure.ADC_ExternalTrigConvEdge	= ADC_ExternalTrigConvEdge_None;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_ExternalTrigConv		= ADC_ExternalTrigConv_T5_CC1;
 8000f6c:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8000f70:	61fb      	str	r3, [r7, #28]
	ADC_InitStructure.ADC_DataAlign				= ADC_DataAlign_Right;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
	ADC_InitStructure.ADC_NbrOfConversion		= 1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	/* Initialize the two ADC with the same structure */
	ADC_Init(ADC1, &ADC_InitStructure);
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	4619      	mov	r1, r3
 8000f82:	4810      	ldr	r0, [pc, #64]	; (8000fc4 <ADC_Configuration+0x84>)
 8000f84:	f7ff f920 	bl	80001c8 <ADC_Init>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1,1 ,ADC_SampleTime_3Cycles);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <ADC_Configuration+0x84>)
 8000f90:	f7ff f9b4 	bl	80002fc <ADC_RegularChannelConfig>

	ADC_Init(ADC2, &ADC_InitStructure);
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <ADC_Configuration+0x88>)
 8000f9c:	f7ff f914 	bl	80001c8 <ADC_Init>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_2,1 ,ADC_SampleTime_3Cycles);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <ADC_Configuration+0x88>)
 8000fa8:	f7ff f9a8 	bl	80002fc <ADC_RegularChannelConfig>

	ADC_Cmd(ADC1, ENABLE);
 8000fac:	2101      	movs	r1, #1
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <ADC_Configuration+0x84>)
 8000fb0:	f7ff f988 	bl	80002c4 <ADC_Cmd>
	ADC_Cmd(ADC2, ENABLE);
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <ADC_Configuration+0x88>)
 8000fb8:	f7ff f984 	bl	80002c4 <ADC_Cmd>
}
 8000fbc:	bf00      	nop
 8000fbe:	3728      	adds	r7, #40	; 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40012000 	.word	0x40012000
 8000fc8:	40012100 	.word	0x40012100

08000fcc <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000fd6:	bf00      	nop
}
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8000fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001030 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ffc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ffe:	e003      	b.n	8001008 <LoopCopyDataInit>

08001000 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001002:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001004:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001006:	3104      	adds	r1, #4

08001008 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800100c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800100e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001010:	d3f6      	bcc.n	8001000 <CopyDataInit>
  ldr  r2, =_sbss
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001014:	e002      	b.n	800101c <LoopFillZerobss>

08001016 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001016:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001018:	f842 3b04 	str.w	r3, [r2], #4

0800101c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800101e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001020:	d3f9      	bcc.n	8001016 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001022:	f000 f84b 	bl	80010bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001026:	f000 f8fb 	bl	8001220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102a:	f7ff ff01 	bl	8000e30 <main>
  bx  lr    
 800102e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001030:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001034:	080012a4 	.word	0x080012a4
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800103c:	20000020 	.word	0x20000020
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001040:	20000020 	.word	0x20000020
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001044:	200000b8 	.word	0x200000b8

08001048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC_IRQHandler>
	...

0800104c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001060:	e7fe      	b.n	8001060 <HardFault_Handler+0x4>
 8001062:	bf00      	nop

08001064 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>
 800106a:	bf00      	nop

0800106c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001070:	e7fe      	b.n	8001070 <BusFault_Handler+0x4>
 8001072:	bf00      	nop

08001074 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>
 800107a:	bf00      	nop

0800107c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c0:	4a16      	ldr	r2, [pc, #88]	; (800111c <SystemInit+0x60>)
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <SystemInit+0x60>)
 80010c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010d0:	4a13      	ldr	r2, [pc, #76]	; (8001120 <SystemInit+0x64>)
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <SystemInit+0x64>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <SystemInit+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010e2:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <SystemInit+0x64>)
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <SystemInit+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <SystemInit+0x64>)
 80010f4:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <SystemInit+0x68>)
 80010f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010f8:	4a09      	ldr	r2, [pc, #36]	; (8001120 <SystemInit+0x64>)
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <SystemInit+0x64>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001102:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <SystemInit+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800110a:	f000 f80d 	bl	8001128 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800110e:	4b03      	ldr	r3, [pc, #12]	; (800111c <SystemInit+0x60>)
 8001110:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001114:	609a      	str	r2, [r3, #8]
#endif
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00
 8001120:	40023800 	.word	0x40023800
 8001124:	24003010 	.word	0x24003010

08001128 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001136:	4a36      	ldr	r2, [pc, #216]	; (8001210 <SetSysClock+0xe8>)
 8001138:	4b35      	ldr	r3, [pc, #212]	; (8001210 <SetSysClock+0xe8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001140:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001142:	4b33      	ldr	r3, [pc, #204]	; (8001210 <SetSysClock+0xe8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3301      	adds	r3, #1
 8001150:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d103      	bne.n	8001160 <SetSysClock+0x38>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800115e:	d1f0      	bne.n	8001142 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001160:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <SetSysClock+0xe8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800116c:	2301      	movs	r3, #1
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	e001      	b.n	8001176 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d142      	bne.n	8001202 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800117c:	4a24      	ldr	r2, [pc, #144]	; (8001210 <SetSysClock+0xe8>)
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <SetSysClock+0xe8>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001186:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001188:	4a22      	ldr	r2, [pc, #136]	; (8001214 <SetSysClock+0xec>)
 800118a:	4b22      	ldr	r3, [pc, #136]	; (8001214 <SetSysClock+0xec>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001192:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001194:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <SetSysClock+0xe8>)
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <SetSysClock+0xe8>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800119c:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <SetSysClock+0xe8>)
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <SetSysClock+0xe8>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011a6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80011a8:	4a19      	ldr	r2, [pc, #100]	; (8001210 <SetSysClock+0xe8>)
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <SetSysClock+0xe8>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80011b2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <SetSysClock+0xe8>)
 80011b6:	4a18      	ldr	r2, [pc, #96]	; (8001218 <SetSysClock+0xf0>)
 80011b8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80011ba:	4a15      	ldr	r2, [pc, #84]	; (8001210 <SetSysClock+0xe8>)
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <SetSysClock+0xe8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011c4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80011c6:	bf00      	nop
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <SetSysClock+0xe8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f9      	beq.n	80011c8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <SetSysClock+0xf4>)
 80011d6:	f240 6205 	movw	r2, #1541	; 0x605
 80011da:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80011dc:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <SetSysClock+0xe8>)
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <SetSysClock+0xe8>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f023 0303 	bic.w	r3, r3, #3
 80011e6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80011e8:	4a09      	ldr	r2, [pc, #36]	; (8001210 <SetSysClock+0xe8>)
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <SetSysClock+0xe8>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80011f4:	bf00      	nop
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <SetSysClock+0xe8>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d1f9      	bne.n	80011f6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40007000 	.word	0x40007000
 8001218:	07405408 	.word	0x07405408
 800121c:	40023c00 	.word	0x40023c00

08001220 <__libc_init_array>:
 8001220:	b570      	push	{r4, r5, r6, lr}
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <__libc_init_array+0x3c>)
 8001224:	4c0e      	ldr	r4, [pc, #56]	; (8001260 <__libc_init_array+0x40>)
 8001226:	1ae4      	subs	r4, r4, r3
 8001228:	10a4      	asrs	r4, r4, #2
 800122a:	2500      	movs	r5, #0
 800122c:	461e      	mov	r6, r3
 800122e:	42a5      	cmp	r5, r4
 8001230:	d004      	beq.n	800123c <__libc_init_array+0x1c>
 8001232:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001236:	4798      	blx	r3
 8001238:	3501      	adds	r5, #1
 800123a:	e7f8      	b.n	800122e <__libc_init_array+0xe>
 800123c:	f000 f816 	bl	800126c <_init>
 8001240:	4c08      	ldr	r4, [pc, #32]	; (8001264 <__libc_init_array+0x44>)
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <__libc_init_array+0x48>)
 8001244:	1ae4      	subs	r4, r4, r3
 8001246:	10a4      	asrs	r4, r4, #2
 8001248:	2500      	movs	r5, #0
 800124a:	461e      	mov	r6, r3
 800124c:	42a5      	cmp	r5, r4
 800124e:	d004      	beq.n	800125a <__libc_init_array+0x3a>
 8001250:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001254:	4798      	blx	r3
 8001256:	3501      	adds	r5, #1
 8001258:	e7f8      	b.n	800124c <__libc_init_array+0x2c>
 800125a:	bd70      	pop	{r4, r5, r6, pc}
 800125c:	0800129c 	.word	0x0800129c
 8001260:	0800129c 	.word	0x0800129c
 8001264:	080012a0 	.word	0x080012a0
 8001268:	0800129c 	.word	0x0800129c

0800126c <_init>:
 800126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126e:	bf00      	nop
 8001270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001272:	bc08      	pop	{r3}
 8001274:	469e      	mov	lr, r3
 8001276:	4770      	bx	lr

08001278 <_fini>:
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127a:	bf00      	nop
 800127c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800127e:	bc08      	pop	{r3}
 8001280:	469e      	mov	lr, r3
 8001282:	4770      	bx	lr
