
ES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002838  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080029c0  080029c0  000129c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002b98  08002b98  00012b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002b9c  08002b9c  00012b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00000498  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200004a8  200004a8  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000068e7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000f6c  00000000  00000000  00026927  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000988  00000000  00000000  00027898  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008e0  00000000  00000000  00028220  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002d5e  00000000  00000000  00028b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002e26  00000000  00000000  0002b85e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0002e684  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002af4  00000000  00000000  0002e704  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000311f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080029a8 	.word	0x080029a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080029a8 	.word	0x080029a8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <DAC_Init+0x64>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000b14:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	4013      	ands	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000b34:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <DAC_Init+0x64>)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	6013      	str	r3, [r2, #0]
}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40007400 	.word	0x40007400

08000b64 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b70:	78fb      	ldrb	r3, [r7, #3]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d009      	beq.n	8000b8a <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000b76:	490d      	ldr	r1, [pc, #52]	; (8000bac <DAC_Cmd+0x48>)
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <DAC_Cmd+0x48>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	fa00 f303 	lsl.w	r3, r0, r3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8000b88:	e009      	b.n	8000b9e <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000b8a:	4908      	ldr	r1, [pc, #32]	; (8000bac <DAC_Cmd+0x48>)
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <DAC_Cmd+0x48>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	2001      	movs	r0, #1
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	fa00 f303 	lsl.w	r3, r0, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	600b      	str	r3, [r1, #0]
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40007400 	.word	0x40007400

08000bb0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <DAC_SetChannel1Data+0x34>)
 8000bc2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	3308      	adds	r3, #8
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	887b      	ldrh	r3, [r7, #2]
 8000bd4:	6013      	str	r3, [r2, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40007400 	.word	0x40007400

08000be8 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d00a      	beq.n	8000c10 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8000bfa:	490e      	ldr	r1, [pc, #56]	; (8000c34 <DAC_DMACmd+0x4c>)
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <DAC_DMACmd+0x4c>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	fa00 f303 	lsl.w	r3, r0, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 8000c0e:	e00a      	b.n	8000c26 <DAC_DMACmd+0x3e>
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8000c10:	4908      	ldr	r1, [pc, #32]	; (8000c34 <DAC_DMACmd+0x4c>)
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <DAC_DMACmd+0x4c>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	fa00 f303 	lsl.w	r3, r0, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	4013      	ands	r3, r2
 8000c24:	600b      	str	r3, [r1, #0]
  }
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40007400 	.word	0x40007400

08000c38 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <DMA_Init+0xac>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000c62:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c6e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	6a1b      	ldr	r3, [r3, #32]
 8000c74:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c7a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c80:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000c86:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c8c:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f023 0307 	bic.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	691a      	ldr	r2, [r3, #16]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60da      	str	r2, [r3, #12]
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	f01c803f 	.word	0xf01c803f

08000ce8 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d006      	beq.n	8000d78 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f043 0201 	orr.w	r2, r3, #1
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000d76:	e005      	b.n	8000d84 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f023 0201 	bic.w	r2, r3, #1
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	601a      	str	r2, [r3, #0]
  }
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	e001      	b.n	8000db2 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a15      	ldr	r2, [pc, #84]	; (8000e2c <DMA_GetFlagStatus+0x6c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d802      	bhi.n	8000de0 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <DMA_GetFlagStatus+0x70>)
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	e001      	b.n	8000de4 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <DMA_GetFlagStatus+0x74>)
 8000de2:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	e002      	b.n	8000dfc <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000e02:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000e06:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d002      	beq.n	8000e18 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000e12:	2301      	movs	r3, #1
 8000e14:	75fb      	strb	r3, [r7, #23]
 8000e16:	e001      	b.n	8000e1c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	371c      	adds	r7, #28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	4002640f 	.word	0x4002640f
 8000e30:	40026000 	.word	0x40026000
 8000e34:	40026400 	.word	0x40026400

08000e38 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <DMA_ClearFlag+0x50>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d802      	bhi.n	8000e50 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <DMA_ClearFlag+0x54>)
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	e001      	b.n	8000e54 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <DMA_ClearFlag+0x58>)
 8000e52:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d007      	beq.n	8000e6e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000e64:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000e6c:	e006      	b.n	8000e7c <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000e74:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	6093      	str	r3, [r2, #8]
  }    
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	4002640f 	.word	0x4002640f
 8000e8c:	40026000 	.word	0x40026000
 8000e90:	40026400 	.word	0x40026400

08000e94 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	e076      	b.n	8000f9e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d165      	bne.n	8000f98 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	401a      	ands	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	791b      	ldrb	r3, [r3, #4]
 8000eea:	4619      	mov	r1, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	791b      	ldrb	r3, [r3, #4]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d003      	beq.n	8000f0a <GPIO_Init+0x76>
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	791b      	ldrb	r3, [r3, #4]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d12e      	bne.n	8000f68 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2103      	movs	r1, #3
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	795b      	ldrb	r3, [r3, #5]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	2101      	movs	r1, #1
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	401a      	ands	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	799b      	ldrb	r3, [r3, #6]
 8000f56:	4619      	mov	r1, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2103      	movs	r1, #3
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	79db      	ldrb	r3, [r3, #7]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	431a      	orrs	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d985      	bls.n	8000eb0 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	371c      	adds	r7, #28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d006      	beq.n	8000fd0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000fc2:	490a      	ldr	r1, [pc, #40]	; (8000fec <RCC_AHB1PeriphClockCmd+0x3c>)
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <RCC_AHB1PeriphClockCmd+0x3c>)
 8000fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000fce:	e006      	b.n	8000fde <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000fd0:	4906      	ldr	r1, [pc, #24]	; (8000fec <RCC_AHB1PeriphClockCmd+0x3c>)
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <RCC_AHB1PeriphClockCmd+0x3c>)
 8000fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	4013      	ands	r3, r2
 8000fdc:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800

08000ff0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d006      	beq.n	8001010 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001002:	490a      	ldr	r1, [pc, #40]	; (800102c <RCC_APB1PeriphClockCmd+0x3c>)
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <RCC_APB1PeriphClockCmd+0x3c>)
 8001006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4313      	orrs	r3, r2
 800100c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800100e:	e006      	b.n	800101e <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001010:	4906      	ldr	r1, [pc, #24]	; (800102c <RCC_APB1PeriphClockCmd+0x3c>)
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <RCC_APB1PeriphClockCmd+0x3c>)
 8001014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	43db      	mvns	r3, r3
 800101a:	4013      	ands	r3, r2
 800101c:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800

08001030 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001042:	490a      	ldr	r1, [pc, #40]	; (800106c <RCC_APB2PeriphClockCmd+0x3c>)
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <RCC_APB2PeriphClockCmd+0x3c>)
 8001046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4313      	orrs	r3, r2
 800104c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800104e:	e006      	b.n	800105e <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001050:	4906      	ldr	r1, [pc, #24]	; (800106c <RCC_APB2PeriphClockCmd+0x3c>)
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <RCC_APB2PeriphClockCmd+0x3c>)
 8001054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	43db      	mvns	r3, r3
 800105a:	4013      	ands	r3, r2
 800105c:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800

08001070 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	819a      	strh	r2, [r3, #12]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	891b      	ldrh	r3, [r3, #8]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	4013      	ands	r3, r2
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80010b0:	2301      	movs	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
 80010b4:	e001      	b.n	80010ba <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a29      	ldr	r2, [pc, #164]	; (8001184 <TIM_TimeBaseInit+0xbc>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d013      	beq.n	800110c <TIM_TimeBaseInit+0x44>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a28      	ldr	r2, [pc, #160]	; (8001188 <TIM_TimeBaseInit+0xc0>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d00f      	beq.n	800110c <TIM_TimeBaseInit+0x44>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f2:	d00b      	beq.n	800110c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a25      	ldr	r2, [pc, #148]	; (800118c <TIM_TimeBaseInit+0xc4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d007      	beq.n	800110c <TIM_TimeBaseInit+0x44>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a24      	ldr	r2, [pc, #144]	; (8001190 <TIM_TimeBaseInit+0xc8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d003      	beq.n	800110c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a23      	ldr	r2, [pc, #140]	; (8001194 <TIM_TimeBaseInit+0xcc>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d108      	bne.n	800111e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800110c:	89fb      	ldrh	r3, [r7, #14]
 800110e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001112:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	885a      	ldrh	r2, [r3, #2]
 8001118:	89fb      	ldrh	r3, [r7, #14]
 800111a:	4313      	orrs	r3, r2
 800111c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a1d      	ldr	r2, [pc, #116]	; (8001198 <TIM_TimeBaseInit+0xd0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00c      	beq.n	8001140 <TIM_TimeBaseInit+0x78>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a1c      	ldr	r2, [pc, #112]	; (800119c <TIM_TimeBaseInit+0xd4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d008      	beq.n	8001140 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001134:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	891a      	ldrh	r2, [r3, #8]
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	4313      	orrs	r3, r2
 800113e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	89fa      	ldrh	r2, [r7, #14]
 8001144:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	881a      	ldrh	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <TIM_TimeBaseInit+0xbc>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d003      	beq.n	8001166 <TIM_TimeBaseInit+0x9e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a09      	ldr	r2, [pc, #36]	; (8001188 <TIM_TimeBaseInit+0xc0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d104      	bne.n	8001170 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	7a9b      	ldrb	r3, [r3, #10]
 800116a:	b29a      	uxth	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	829a      	strh	r2, [r3, #20]
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40010000 	.word	0x40010000
 8001188:	40010400 	.word	0x40010400
 800118c:	40000400 	.word	0x40000400
 8001190:	40000800 	.word	0x40000800
 8001194:	40000c00 	.word	0x40000c00
 8001198:	40001000 	.word	0x40001000
 800119c:	40001400 	.word	0x40001400

080011a0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d008      	beq.n	80011c4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	b29a      	uxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80011c2:	e007      	b.n	80011d4 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	f023 0301 	bic.w	r3, r3, #1
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	801a      	strh	r2, [r3, #0]
  }
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	81bb      	strh	r3, [r7, #12]
 80011f4:	2300      	movs	r3, #0
 80011f6:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	8a1b      	ldrh	r3, [r3, #16]
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	887b      	ldrh	r3, [r7, #2]
 8001200:	4013      	ands	r3, r2
 8001202:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	899b      	ldrh	r3, [r3, #12]
 8001208:	b29a      	uxth	r2, r3
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	4013      	ands	r3, r2
 800120e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001210:	89bb      	ldrh	r3, [r7, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d005      	beq.n	8001222 <TIM_GetITStatus+0x42>
 8001216:	897b      	ldrh	r3, [r7, #10]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e001      	b.n	8001226 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001240:	887b      	ldrh	r3, [r7, #2]
 8001242:	43db      	mvns	r3, r3
 8001244:	b29a      	uxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	821a      	strh	r2, [r3, #16]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop

08001258 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	889b      	ldrh	r3, [r3, #4]
 8001268:	b29b      	uxth	r3, r3
 800126a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800126e:	b29a      	uxth	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	889b      	ldrh	r3, [r3, #4]
 8001278:	b29a      	uxth	r2, r3
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	4313      	orrs	r3, r2
 800127e:	b29a      	uxth	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	809a      	strh	r2, [r3, #4]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8001294:	4b37      	ldr	r3, [pc, #220]	; (8001374 <Audio_MAL_IRQHandler+0xe4>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b37      	ldr	r3, [pc, #220]	; (8001378 <Audio_MAL_IRQHandler+0xe8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	4610      	mov	r0, r2
 80012a0:	f7ff fd8e 	bl	8000dc0 <DMA_GetFlagStatus>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d062      	beq.n	8001370 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80012aa:	4b34      	ldr	r3, [pc, #208]	; (800137c <Audio_MAL_IRQHandler+0xec>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d04a      	beq.n	8001348 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80012b2:	bf00      	nop
 80012b4:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <Audio_MAL_IRQHandler+0xe4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fd69 	bl	8000d90 <DMA_GetCmdStatus>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f7      	bne.n	80012b4 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80012c4:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <Audio_MAL_IRQHandler+0xe4>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <Audio_MAL_IRQHandler+0xe8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4610      	mov	r0, r2
 80012d0:	f7ff fdb2 	bl	8000e38 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80012d4:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <Audio_MAL_IRQHandler+0xf0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <Audio_MAL_IRQHandler+0xf4>)
 80012dc:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80012de:	4b27      	ldr	r3, [pc, #156]	; (800137c <Audio_MAL_IRQHandler+0xec>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e6:	4293      	cmp	r3, r2
 80012e8:	bf28      	it	cs
 80012ea:	4613      	movcs	r3, r2
 80012ec:	4a25      	ldr	r2, [pc, #148]	; (8001384 <Audio_MAL_IRQHandler+0xf4>)
 80012ee:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <Audio_MAL_IRQHandler+0xe4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4923      	ldr	r1, [pc, #140]	; (8001384 <Audio_MAL_IRQHandler+0xf4>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fc9e 	bl	8000c38 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <Audio_MAL_IRQHandler+0xe4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2101      	movs	r1, #1
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fd28 	bl	8000d58 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8001308:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <Audio_MAL_IRQHandler+0xf0>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <Audio_MAL_IRQHandler+0xec>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001314:	428b      	cmp	r3, r1
 8001316:	bf28      	it	cs
 8001318:	460b      	movcs	r3, r1
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	4a18      	ldr	r2, [pc, #96]	; (8001380 <Audio_MAL_IRQHandler+0xf0>)
 8001320:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <Audio_MAL_IRQHandler+0xec>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <Audio_MAL_IRQHandler+0xec>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800132e:	428b      	cmp	r3, r1
 8001330:	bf28      	it	cs
 8001332:	460b      	movcs	r3, r1
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	4a11      	ldr	r2, [pc, #68]	; (800137c <Audio_MAL_IRQHandler+0xec>)
 8001338:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <Audio_MAL_IRQHandler+0xe4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2101      	movs	r1, #1
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fd09 	bl	8000d58 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001346:	e013      	b.n	8001370 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <Audio_MAL_IRQHandler+0xe4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fd02 	bl	8000d58 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <Audio_MAL_IRQHandler+0xe4>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <Audio_MAL_IRQHandler+0xe8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	4610      	mov	r0, r2
 8001360:	f7ff fd6a 	bl	8000e38 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <Audio_MAL_IRQHandler+0xf0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f97a 	bl	8001664 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000008 	.word	0x20000008
 8001378:	2000000c 	.word	0x2000000c
 800137c:	20000000 	.word	0x20000000
 8001380:	2000002c 	.word	0x2000002c
 8001384:	2000006c 	.word	0x2000006c

08001388 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800138c:	f7ff ff80 	bl	8001290 <Audio_MAL_IRQHandler>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001398:	f7ff ff7a 	bl	8001290 <Audio_MAL_IRQHandler>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80013a4:	2102      	movs	r1, #2
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <SPI3_IRQHandler+0x3c>)
 80013a8:	f7ff fe72 	bl	8001090 <SPI_I2S_GetFlagStatus>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d011      	beq.n	80013d6 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <SPI3_IRQHandler+0x40>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d106      	bne.n	80013c8 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80013ba:	f000 f95f 	bl	800167c <EVAL_AUDIO_GetSampleCallBack>
 80013be:	4603      	mov	r3, r0
 80013c0:	4619      	mov	r1, r3
 80013c2:	2004      	movs	r0, #4
 80013c4:	f7ff fbf4 	bl	8000bb0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80013c8:	f000 f958 	bl	800167c <EVAL_AUDIO_GetSampleCallBack>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4619      	mov	r1, r3
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <SPI3_IRQHandler+0x3c>)
 80013d2:	f7ff fe4d 	bl	8001070 <SPI_I2S_SendData>
  }
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40003c00 	.word	0x40003c00
 80013e0:	20000004 	.word	0x20000004

080013e4 <TIM2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
 80013e8:	2101      	movs	r1, #1
 80013ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013ee:	f7ff fef7 	bl	80011e0 <TIM_GetITStatus>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <TIM2_IRQHandler+0x1e>
  {
    TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80013f8:	2101      	movs	r1, #1
 80013fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013fe:	f7ff ff19 	bl	8001234 <TIM_ClearITPendingBit>
    //Do stuff here
  }
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop

08001408 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
	uint32_t timerFreq;
	uint16_t timerPeriod;
	uint16_t n;
	uint16_t m;
	uint32_t buttonVal;
	uint8_t buffNum = 1;
 800140e:	2301      	movs	r3, #1
 8001410:	757b      	strb	r3, [r7, #21]

	/* Calculate the gradient of the Sawtooth */
	m = (uint16_t) ( 4095 / DACBUFFERSIZE);
 8001412:	230f      	movs	r3, #15
 8001414:	827b      	strh	r3, [r7, #18]

	/* Create wave table for sinewave */
	for (n = 0; n<DACBUFFERSIZE; n++)
 8001416:	2300      	movs	r3, #0
 8001418:	82fb      	strh	r3, [r7, #22]
 800141a:	e03a      	b.n	8001492 <main+0x8a>
	{
		DACBuffer1[n] = (uint16_t)((4095+1)/2.0)*( sin( M_TWOPI*n/DACBUFFERSIZE) + 1.0 );
 800141c:	8afc      	ldrh	r4, [r7, #22]
 800141e:	8afb      	ldrh	r3, [r7, #22]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f823 	bl	800046c <__aeabi_i2d>
 8001426:	a32f      	add	r3, pc, #188	; (adr r3, 80014e4 <main+0xdc>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff f884 	bl	8000538 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <main+0xc8>)
 800143e:	f7ff f9a5 	bl	800078c <__aeabi_ddiv>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	ec43 2b17 	vmov	d7, r2, r3
 800144a:	eeb0 0a47 	vmov.f32	s0, s14
 800144e:	eef0 0a67 	vmov.f32	s1, s15
 8001452:	f000 fa59 	bl	8001908 <sin>
 8001456:	ec51 0b10 	vmov	r0, r1, d0
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <main+0xcc>)
 8001460:	f7fe feb8 	bl	80001d4 <__adddf3>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <main+0xd0>)
 8001472:	f7ff f861 	bl	8000538 <__aeabi_dmul>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	f7ff fb1d 	bl	8000abc <__aeabi_d2uiz>
 8001482:	4603      	mov	r3, r0
 8001484:	b29a      	uxth	r2, r3
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <main+0xd4>)
 8001488:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	/* Calculate the gradient of the Sawtooth */
	m = (uint16_t) ( 4095 / DACBUFFERSIZE);

	/* Create wave table for sinewave */
	for (n = 0; n<DACBUFFERSIZE; n++)
 800148c:	8afb      	ldrh	r3, [r7, #22]
 800148e:	3301      	adds	r3, #1
 8001490:	82fb      	strh	r3, [r7, #22]
 8001492:	8afb      	ldrh	r3, [r7, #22]
 8001494:	2bff      	cmp	r3, #255	; 0xff
 8001496:	d9c1      	bls.n	800141c <main+0x14>
	{
		DACBuffer1[n] = (uint16_t)((4095+1)/2.0)*( sin( M_TWOPI*n/DACBUFFERSIZE) + 1.0 );
	}

	/* Calculate frequency of timer */
	fTimer = WAVEFREQ * DACBUFFERSIZE;
 8001498:	f44f 337a 	mov.w	r3, #256000	; 0x3e800
 800149c:	60fb      	str	r3, [r7, #12]

	/* Calculate Tick Rate */
	timerFreq = TIMER_CLOCK / TIMER6_PRESCALER; /* Timer tick is in Hz */
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <main+0xd8>)
 80014a0:	60bb      	str	r3, [r7, #8]

	/* Calculate period of Timer */
	timerPeriod = (uint16_t)( timerFreq / fTimer );
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014aa:	80fb      	strh	r3, [r7, #6]

	/* System Clocks Configuration */
	RCC_Configuration();
 80014ac:	f000 f81e 	bl	80014ec <RCC_Configuration>

	/* NVIC configuration */
	NVIC_Configuration();
 80014b0:	f000 f832 	bl	8001518 <NVIC_Configuration>

	/* Configure the GPIO ports */
	GPIO_Configuration();
 80014b4:	f000 f83a 	bl	800152c <GPIO_Configuration>

	/* Timer Configuration */
	Timer_Configuration( timerPeriod, TIMER6_PRESCALER );
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	2102      	movs	r1, #2
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f88b 	bl	80015d8 <Timer_Configuration>

	/* DAC Configuration */
	DAC_Configuration();
 80014c2:	f000 f8b3 	bl	800162c <DAC_Configuration>

	/* DMA Config --> Takes in a pointer to the waveform buffer */
	DMA_Configuration ( DACBuffer1 );
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <main+0xd4>)
 80014c8:	f000 f846 	bl	8001558 <DMA_Configuration>
	/* Infinite loop */
	while (1)
	{
	  /* Do stuff here... */

	}
 80014cc:	e7fe      	b.n	80014cc <main+0xc4>
 80014ce:	bf00      	nop
 80014d0:	40700000 	.word	0x40700000
 80014d4:	3ff00000 	.word	0x3ff00000
 80014d8:	40a00000 	.word	0x40a00000
 80014dc:	200002a8 	.word	0x200002a8
 80014e0:	0280de80 	.word	0x0280de80
 80014e4:	54442d18 	.word	0x54442d18
 80014e8:	401921fb 	.word	0x401921fb

080014ec <RCC_Configuration>:
  * @brief  Configures the different system clocks.
  * @param  None
  * @retval : None
  */
void RCC_Configuration(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	/* Initialize all the peripherals here. */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6 | RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2, ENABLE);
 80014f0:	2101      	movs	r1, #1
 80014f2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80014f6:	f7ff fd9b 	bl	8001030 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_APB1Periph_DAC  | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOA, ENABLE);
 80014fa:	2101      	movs	r1, #1
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <RCC_Configuration+0x24>)
 80014fe:	f7ff fd57 	bl	8000fb0 <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd( RCC_APB1Periph_DAC | RCC_APB1Periph_TIM6 , ENABLE);
 8001502:	2101      	movs	r1, #1
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <RCC_Configuration+0x28>)
 8001506:	f7ff fd73 	bl	8000ff0 <RCC_APB1PeriphClockCmd>
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20200005 	.word	0x20200005
 8001514:	20000010 	.word	0x20000010

08001518 <NVIC_Configuration>:
  * @brief  Configures the nested vectored interrupt controller.
  * @param  None
  * @retval : None
  */
void NVIC_Configuration(void)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop

0800152c <GPIO_Configuration>:
  * @brief  Configures the different GPIO ports.
  * @param  None
  * @retval : None
  */
void GPIO_Configuration(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Pack the struct */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_4;
 8001532:	2310      	movs	r3, #16
 8001534:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001536:	2302      	movs	r3, #2
 8001538:	717b      	strb	r3, [r7, #5]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800153a:	2300      	movs	r3, #0
 800153c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	71fb      	strb	r3, [r7, #7]

	/* Call Init function */
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	463b      	mov	r3, r7
 8001544:	4619      	mov	r1, r3
 8001546:	4803      	ldr	r0, [pc, #12]	; (8001554 <GPIO_Configuration+0x28>)
 8001548:	f7ff fca4 	bl	8000e94 <GPIO_Init>

}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40020000 	.word	0x40020000

08001558 <DMA_Configuration>:
  * @brief  Configures the DMA.
  * @param  None
  * @retval : None
  */
void DMA_Configuration( uint16_t* wavBuffer )
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b092      	sub	sp, #72	; 0x48
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	DMA_InitTypeDef DMA_InitStructure;

	//Initialize the structure to default values
	DMA_StructInit(&DMA_InitStructure);
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fbbf 	bl	8000ce8 <DMA_StructInit>

	DMA_InitStructure.DMA_Channel = DMA_Channel_7;
 800156a:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 800156e:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(DAC_BASE + 0x08);  //DAC channel1 12-bit right-aligned data holding register (ref manual pg. 264)
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <DMA_Configuration+0x78>)
 8001572:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)wavBuffer;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8001578:	2340      	movs	r3, #64	; 0x40
 800157a:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_BufferSize = DACBUFFERSIZE;
 800157c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001580:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800158c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8001592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8001598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800159e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 80015a4:	2300      	movs	r3, #0
 80015a6:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 80015a8:	2303      	movs	r3, #3
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80015ac:	2300      	movs	r3, #0
 80015ae:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80015b0:	2300      	movs	r3, #0
 80015b2:	647b      	str	r3, [r7, #68]	; 0x44

	/* Call Init function */
	DMA_Init(DMA1_Stream5, &DMA_InitStructure);
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <DMA_Configuration+0x7c>)
 80015bc:	f7ff fb3c 	bl	8000c38 <DMA_Init>

	/* Enable DMA */
	DMA_Cmd(DMA1_Stream5, ENABLE);
 80015c0:	2101      	movs	r1, #1
 80015c2:	4804      	ldr	r0, [pc, #16]	; (80015d4 <DMA_Configuration+0x7c>)
 80015c4:	f7ff fbc8 	bl	8000d58 <DMA_Cmd>

}
 80015c8:	bf00      	nop
 80015ca:	3748      	adds	r7, #72	; 0x48
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40007408 	.word	0x40007408
 80015d4:	40026088 	.word	0x40026088

080015d8 <Timer_Configuration>:
  * @brief  Configures the Timers.
  * @param  wavePeriod (period of timer), preScaler (prescaler for timer)
  * @retval : None
  */
void Timer_Configuration(uint16_t wavPeriod, uint16_t preScaler)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	80fb      	strh	r3, [r7, #6]
 80015e4:	4613      	mov	r3, r2
 80015e6:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStruct;

	/* pack Timer struct */
	TIM_TimeBaseStruct.TIM_Period = wavPeriod-1;
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	613b      	str	r3, [r7, #16]
	TIM_TimeBaseStruct.TIM_Prescaler = preScaler-1;
 80015ee:	88bb      	ldrh	r3, [r7, #4]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 80015fa:	2300      	movs	r3, #0
 80015fc:	81fb      	strh	r3, [r7, #14]
	TIM_TimeBaseStruct.TIM_RepetitionCounter = 0x0000;
 80015fe:	2300      	movs	r3, #0
 8001600:	75bb      	strb	r3, [r7, #22]

	/* Call init function */
	TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStruct);
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	4619      	mov	r1, r3
 8001608:	4807      	ldr	r0, [pc, #28]	; (8001628 <Timer_Configuration+0x50>)
 800160a:	f7ff fd5d 	bl	80010c8 <TIM_TimeBaseInit>

	/* Select Timer to trigger DAC */
	TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);
 800160e:	2120      	movs	r1, #32
 8001610:	4805      	ldr	r0, [pc, #20]	; (8001628 <Timer_Configuration+0x50>)
 8001612:	f7ff fe21 	bl	8001258 <TIM_SelectOutputTrigger>

	/* TIM6 enable counter */
	TIM_Cmd(TIM6, ENABLE);
 8001616:	2101      	movs	r1, #1
 8001618:	4803      	ldr	r0, [pc, #12]	; (8001628 <Timer_Configuration+0x50>)
 800161a:	f7ff fdc1 	bl	80011a0 <TIM_Cmd>

}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40001000 	.word	0x40001000

0800162c <DAC_Configuration>:
  * @brief  Configures the DAC
  * @param  None
  * @retval : None
  */
void DAC_Configuration(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
	DAC_InitTypeDef DAC_InitStruct;

	/* Initialize the DAC_Trigger member */
	DAC_InitStruct.DAC_Trigger = DAC_Trigger_T6_TRGO;
 8001632:	2304      	movs	r3, #4
 8001634:	603b      	str	r3, [r7, #0]
	/* Initialize the DAC_WaveGeneration member */
	DAC_InitStruct.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
	/* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
	DAC_InitStruct.DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
	/* Initialize the DAC_OutputBuffer member */
	DAC_InitStruct.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]

	/* Init DAC */
	DAC_Init(DAC_Channel_1, &DAC_InitStruct);
 8001642:	463b      	mov	r3, r7
 8001644:	4619      	mov	r1, r3
 8001646:	2000      	movs	r0, #0
 8001648:	f7ff fa58 	bl	8000afc <DAC_Init>

	/* Enable DMA request */
	DAC_DMACmd(DAC_Channel_1, ENABLE);
 800164c:	2101      	movs	r1, #1
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff faca 	bl	8000be8 <DAC_DMACmd>

	/* Enable DAC Channel1: Once the DAC channel1 is enabled, PA.04 is automatically connected to the DAC converter. */
	DAC_Cmd(DAC_Channel_1, ENABLE);
 8001654:	2101      	movs	r1, #1
 8001656:	2000      	movs	r0, #0
 8001658:	f7ff fa84 	bl	8000b64 <DAC_Cmd>

}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 800166e:	bf00      	nop
}
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop

0800167c <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8001680:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001694:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001696:	e003      	b.n	80016a0 <LoopCopyDataInit>

08001698 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800169a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800169c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800169e:	3104      	adds	r1, #4

080016a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016a0:	480b      	ldr	r0, [pc, #44]	; (80016d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016a8:	d3f6      	bcc.n	8001698 <CopyDataInit>
  ldr  r2, =_sbss
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016ac:	e002      	b.n	80016b4 <LoopFillZerobss>

080016ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016b0:	f842 3b04 	str.w	r3, [r2], #4

080016b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016b8:	d3f9      	bcc.n	80016ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ba:	f000 f84b 	bl	8001754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016be:	f000 f8fb 	bl	80018b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff fea1 	bl	8001408 <main>
  bx  lr    
 80016c6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016c8:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80016cc:	08002ba0 	.word	0x08002ba0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016d4:	20000010 	.word	0x20000010
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80016d8:	20000010 	.word	0x20000010
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016dc:	200004a8 	.word	0x200004a8

080016e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC_IRQHandler>
	...

080016e4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop

080016f4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80016f8:	e7fe      	b.n	80016f8 <HardFault_Handler+0x4>
 80016fa:	bf00      	nop

080016fc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler+0x4>
 8001702:	bf00      	nop

08001704 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001708:	e7fe      	b.n	8001708 <BusFault_Handler+0x4>
 800170a:	bf00      	nop

0800170c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001710:	e7fe      	b.n	8001710 <UsageFault_Handler+0x4>
 8001712:	bf00      	nop

08001714 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop

08001724 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop

08001734 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop

08001744 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop

08001754 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001758:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <SystemInit+0x60>)
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <SystemInit+0x60>)
 800175c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001768:	4a13      	ldr	r2, [pc, #76]	; (80017b8 <SystemInit+0x64>)
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <SystemInit+0x64>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <SystemInit+0x64>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800177a:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <SystemInit+0x64>)
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <SystemInit+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <SystemInit+0x64>)
 800178c:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <SystemInit+0x68>)
 800178e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001790:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <SystemInit+0x64>)
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <SystemInit+0x64>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <SystemInit+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80017a2:	f000 f80d 	bl	80017c0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017a6:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <SystemInit+0x60>)
 80017a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ac:	609a      	str	r2, [r3, #8]
#endif
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00
 80017b8:	40023800 	.word	0x40023800
 80017bc:	24003010 	.word	0x24003010

080017c0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	2300      	movs	r3, #0
 80017cc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80017ce:	4a36      	ldr	r2, [pc, #216]	; (80018a8 <SetSysClock+0xe8>)
 80017d0:	4b35      	ldr	r3, [pc, #212]	; (80018a8 <SetSysClock+0xe8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80017da:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <SetSysClock+0xe8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3301      	adds	r3, #1
 80017e8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d103      	bne.n	80017f8 <SetSysClock+0x38>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80017f6:	d1f0      	bne.n	80017da <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80017f8:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <SetSysClock+0xe8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001804:	2301      	movs	r3, #1
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	e001      	b.n	800180e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800180a:	2300      	movs	r3, #0
 800180c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d142      	bne.n	800189a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001814:	4a24      	ldr	r2, [pc, #144]	; (80018a8 <SetSysClock+0xe8>)
 8001816:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <SetSysClock+0xe8>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001820:	4a22      	ldr	r2, [pc, #136]	; (80018ac <SetSysClock+0xec>)
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <SetSysClock+0xec>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800182a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800182c:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <SetSysClock+0xe8>)
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <SetSysClock+0xe8>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001834:	4a1c      	ldr	r2, [pc, #112]	; (80018a8 <SetSysClock+0xe8>)
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <SetSysClock+0xe8>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001840:	4a19      	ldr	r2, [pc, #100]	; (80018a8 <SetSysClock+0xe8>)
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <SetSysClock+0xe8>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800184a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800184c:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <SetSysClock+0xe8>)
 800184e:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <SetSysClock+0xf0>)
 8001850:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001852:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <SetSysClock+0xe8>)
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <SetSysClock+0xe8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800185c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800185e:	bf00      	nop
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <SetSysClock+0xe8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f9      	beq.n	8001860 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <SetSysClock+0xf4>)
 800186e:	f240 6205 	movw	r2, #1541	; 0x605
 8001872:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001874:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <SetSysClock+0xe8>)
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <SetSysClock+0xe8>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f023 0303 	bic.w	r3, r3, #3
 800187e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001880:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <SetSysClock+0xe8>)
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <SetSysClock+0xe8>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f043 0302 	orr.w	r3, r3, #2
 800188a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800188c:	bf00      	nop
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <SetSysClock+0xe8>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b08      	cmp	r3, #8
 8001898:	d1f9      	bne.n	800188e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40007000 	.word	0x40007000
 80018b0:	07405408 	.word	0x07405408
 80018b4:	40023c00 	.word	0x40023c00

080018b8 <__libc_init_array>:
 80018b8:	b570      	push	{r4, r5, r6, lr}
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <__libc_init_array+0x3c>)
 80018bc:	4c0e      	ldr	r4, [pc, #56]	; (80018f8 <__libc_init_array+0x40>)
 80018be:	1ae4      	subs	r4, r4, r3
 80018c0:	10a4      	asrs	r4, r4, #2
 80018c2:	2500      	movs	r5, #0
 80018c4:	461e      	mov	r6, r3
 80018c6:	42a5      	cmp	r5, r4
 80018c8:	d004      	beq.n	80018d4 <__libc_init_array+0x1c>
 80018ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018ce:	4798      	blx	r3
 80018d0:	3501      	adds	r5, #1
 80018d2:	e7f8      	b.n	80018c6 <__libc_init_array+0xe>
 80018d4:	f001 f868 	bl	80029a8 <_init>
 80018d8:	4c08      	ldr	r4, [pc, #32]	; (80018fc <__libc_init_array+0x44>)
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <__libc_init_array+0x48>)
 80018dc:	1ae4      	subs	r4, r4, r3
 80018de:	10a4      	asrs	r4, r4, #2
 80018e0:	2500      	movs	r5, #0
 80018e2:	461e      	mov	r6, r3
 80018e4:	42a5      	cmp	r5, r4
 80018e6:	d004      	beq.n	80018f2 <__libc_init_array+0x3a>
 80018e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018ec:	4798      	blx	r3
 80018ee:	3501      	adds	r5, #1
 80018f0:	e7f8      	b.n	80018e4 <__libc_init_array+0x2c>
 80018f2:	bd70      	pop	{r4, r5, r6, pc}
 80018f4:	08002b98 	.word	0x08002b98
 80018f8:	08002b98 	.word	0x08002b98
 80018fc:	08002b9c 	.word	0x08002b9c
 8001900:	08002b98 	.word	0x08002b98
 8001904:	00000000 	.word	0x00000000

08001908 <sin>:
 8001908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800190a:	ec51 0b10 	vmov	r0, r1, d0
 800190e:	4a20      	ldr	r2, [pc, #128]	; (8001990 <sin+0x88>)
 8001910:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001914:	4293      	cmp	r3, r2
 8001916:	dc03      	bgt.n	8001920 <sin+0x18>
 8001918:	2000      	movs	r0, #0
 800191a:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8001988 <sin+0x80>
 800191e:	e017      	b.n	8001950 <sin+0x48>
 8001920:	4a1c      	ldr	r2, [pc, #112]	; (8001994 <sin+0x8c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	dd05      	ble.n	8001932 <sin+0x2a>
 8001926:	ee10 2a10 	vmov	r2, s0
 800192a:	460b      	mov	r3, r1
 800192c:	f7fe fc50 	bl	80001d0 <__aeabi_dsub>
 8001930:	e022      	b.n	8001978 <sin+0x70>
 8001932:	4668      	mov	r0, sp
 8001934:	f000 f830 	bl	8001998 <__ieee754_rem_pio2>
 8001938:	f000 0003 	and.w	r0, r0, #3
 800193c:	2801      	cmp	r0, #1
 800193e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001942:	ed9d 0b00 	vldr	d0, [sp]
 8001946:	d008      	beq.n	800195a <sin+0x52>
 8001948:	2802      	cmp	r0, #2
 800194a:	d009      	beq.n	8001960 <sin+0x58>
 800194c:	b960      	cbnz	r0, 8001968 <sin+0x60>
 800194e:	2001      	movs	r0, #1
 8001950:	f000 fe5a 	bl	8002608 <__kernel_sin>
 8001954:	ec51 0b10 	vmov	r0, r1, d0
 8001958:	e00e      	b.n	8001978 <sin+0x70>
 800195a:	f000 fa1d 	bl	8001d98 <__kernel_cos>
 800195e:	e7f9      	b.n	8001954 <sin+0x4c>
 8001960:	2001      	movs	r0, #1
 8001962:	f000 fe51 	bl	8002608 <__kernel_sin>
 8001966:	e001      	b.n	800196c <sin+0x64>
 8001968:	f000 fa16 	bl	8001d98 <__kernel_cos>
 800196c:	ec53 2b10 	vmov	r2, r3, d0
 8001970:	ee10 0a10 	vmov	r0, s0
 8001974:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8001978:	ec41 0b10 	vmov	d0, r0, r1
 800197c:	b005      	add	sp, #20
 800197e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001982:	bf00      	nop
 8001984:	f3af 8000 	nop.w
	...
 8001990:	3fe921fb 	.word	0x3fe921fb
 8001994:	7fefffff 	.word	0x7fefffff

08001998 <__ieee754_rem_pio2>:
 8001998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800199c:	ec55 4b10 	vmov	r4, r5, d0
 80019a0:	4bc7      	ldr	r3, [pc, #796]	; (8001cc0 <__ieee754_rem_pio2+0x328>)
 80019a2:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80019a6:	4598      	cmp	r8, r3
 80019a8:	b08d      	sub	sp, #52	; 0x34
 80019aa:	4682      	mov	sl, r0
 80019ac:	46ab      	mov	fp, r5
 80019ae:	dc06      	bgt.n	80019be <__ieee754_rem_pio2+0x26>
 80019b0:	2200      	movs	r2, #0
 80019b2:	2300      	movs	r3, #0
 80019b4:	ed8a 0b00 	vstr	d0, [sl]
 80019b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80019bc:	e160      	b.n	8001c80 <__ieee754_rem_pio2+0x2e8>
 80019be:	4bc1      	ldr	r3, [pc, #772]	; (8001cc4 <__ieee754_rem_pio2+0x32c>)
 80019c0:	4598      	cmp	r8, r3
 80019c2:	dc71      	bgt.n	8001aa8 <__ieee754_rem_pio2+0x110>
 80019c4:	2d00      	cmp	r5, #0
 80019c6:	a3b0      	add	r3, pc, #704	; (adr r3, 8001c88 <__ieee754_rem_pio2+0x2f0>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	ee10 0a10 	vmov	r0, s0
 80019d0:	4629      	mov	r1, r5
 80019d2:	4ebd      	ldr	r6, [pc, #756]	; (8001cc8 <__ieee754_rem_pio2+0x330>)
 80019d4:	dd33      	ble.n	8001a3e <__ieee754_rem_pio2+0xa6>
 80019d6:	f7fe fbfb 	bl	80001d0 <__aeabi_dsub>
 80019da:	45b0      	cmp	r8, r6
 80019dc:	4604      	mov	r4, r0
 80019de:	460d      	mov	r5, r1
 80019e0:	d010      	beq.n	8001a04 <__ieee754_rem_pio2+0x6c>
 80019e2:	a3ab      	add	r3, pc, #684	; (adr r3, 8001c90 <__ieee754_rem_pio2+0x2f8>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fbf2 	bl	80001d0 <__aeabi_dsub>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	e9ca 2300 	strd	r2, r3, [sl]
 80019f4:	4620      	mov	r0, r4
 80019f6:	4629      	mov	r1, r5
 80019f8:	f7fe fbea 	bl	80001d0 <__aeabi_dsub>
 80019fc:	a3a4      	add	r3, pc, #656	; (adr r3, 8001c90 <__ieee754_rem_pio2+0x2f8>)
 80019fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a02:	e016      	b.n	8001a32 <__ieee754_rem_pio2+0x9a>
 8001a04:	a3a4      	add	r3, pc, #656	; (adr r3, 8001c98 <__ieee754_rem_pio2+0x300>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f7fe fbe1 	bl	80001d0 <__aeabi_dsub>
 8001a0e:	a3a4      	add	r3, pc, #656	; (adr r3, 8001ca0 <__ieee754_rem_pio2+0x308>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	4604      	mov	r4, r0
 8001a16:	460d      	mov	r5, r1
 8001a18:	f7fe fbda 	bl	80001d0 <__aeabi_dsub>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	e9ca 2300 	strd	r2, r3, [sl]
 8001a24:	4620      	mov	r0, r4
 8001a26:	4629      	mov	r1, r5
 8001a28:	f7fe fbd2 	bl	80001d0 <__aeabi_dsub>
 8001a2c:	a39c      	add	r3, pc, #624	; (adr r3, 8001ca0 <__ieee754_rem_pio2+0x308>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f7fe fbcd 	bl	80001d0 <__aeabi_dsub>
 8001a36:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	e1a2      	b.n	8001d84 <__ieee754_rem_pio2+0x3ec>
 8001a3e:	f7fe fbc9 	bl	80001d4 <__adddf3>
 8001a42:	45b0      	cmp	r8, r6
 8001a44:	4604      	mov	r4, r0
 8001a46:	460d      	mov	r5, r1
 8001a48:	d010      	beq.n	8001a6c <__ieee754_rem_pio2+0xd4>
 8001a4a:	a391      	add	r3, pc, #580	; (adr r3, 8001c90 <__ieee754_rem_pio2+0x2f8>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	f7fe fbc0 	bl	80001d4 <__adddf3>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	e9ca 2300 	strd	r2, r3, [sl]
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4629      	mov	r1, r5
 8001a60:	f7fe fbb6 	bl	80001d0 <__aeabi_dsub>
 8001a64:	a38a      	add	r3, pc, #552	; (adr r3, 8001c90 <__ieee754_rem_pio2+0x2f8>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	e016      	b.n	8001a9a <__ieee754_rem_pio2+0x102>
 8001a6c:	a38a      	add	r3, pc, #552	; (adr r3, 8001c98 <__ieee754_rem_pio2+0x300>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	f7fe fbaf 	bl	80001d4 <__adddf3>
 8001a76:	a38a      	add	r3, pc, #552	; (adr r3, 8001ca0 <__ieee754_rem_pio2+0x308>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	460d      	mov	r5, r1
 8001a80:	f7fe fba8 	bl	80001d4 <__adddf3>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	e9ca 2300 	strd	r2, r3, [sl]
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	4629      	mov	r1, r5
 8001a90:	f7fe fb9e 	bl	80001d0 <__aeabi_dsub>
 8001a94:	a382      	add	r3, pc, #520	; (adr r3, 8001ca0 <__ieee754_rem_pio2+0x308>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fb9b 	bl	80001d4 <__adddf3>
 8001a9e:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8001aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa6:	e16d      	b.n	8001d84 <__ieee754_rem_pio2+0x3ec>
 8001aa8:	4b88      	ldr	r3, [pc, #544]	; (8001ccc <__ieee754_rem_pio2+0x334>)
 8001aaa:	4598      	cmp	r8, r3
 8001aac:	f300 80da 	bgt.w	8001c64 <__ieee754_rem_pio2+0x2cc>
 8001ab0:	f000 fe64 	bl	800277c <fabs>
 8001ab4:	ec55 4b10 	vmov	r4, r5, d0
 8001ab8:	ee10 0a10 	vmov	r0, s0
 8001abc:	a37a      	add	r3, pc, #488	; (adr r3, 8001ca8 <__ieee754_rem_pio2+0x310>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	f7fe fd38 	bl	8000538 <__aeabi_dmul>
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4b81      	ldr	r3, [pc, #516]	; (8001cd0 <__ieee754_rem_pio2+0x338>)
 8001acc:	f7fe fb82 	bl	80001d4 <__adddf3>
 8001ad0:	f7fe ffcc 	bl	8000a6c <__aeabi_d2iz>
 8001ad4:	4681      	mov	r9, r0
 8001ad6:	f7fe fcc9 	bl	800046c <__aeabi_i2d>
 8001ada:	a36b      	add	r3, pc, #428	; (adr r3, 8001c88 <__ieee754_rem_pio2+0x2f0>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001ae4:	f7fe fd28 	bl	8000538 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4620      	mov	r0, r4
 8001aee:	4629      	mov	r1, r5
 8001af0:	f7fe fb6e 	bl	80001d0 <__aeabi_dsub>
 8001af4:	a366      	add	r3, pc, #408	; (adr r3, 8001c90 <__ieee754_rem_pio2+0x2f8>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	4604      	mov	r4, r0
 8001afc:	460d      	mov	r5, r1
 8001afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001b02:	f7fe fd19 	bl	8000538 <__aeabi_dmul>
 8001b06:	f1b9 0f1f 	cmp.w	r9, #31
 8001b0a:	4606      	mov	r6, r0
 8001b0c:	460f      	mov	r7, r1
 8001b0e:	dc06      	bgt.n	8001b1e <__ieee754_rem_pio2+0x186>
 8001b10:	f109 32ff 	add.w	r2, r9, #4294967295
 8001b14:	4b6f      	ldr	r3, [pc, #444]	; (8001cd4 <__ieee754_rem_pio2+0x33c>)
 8001b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1a:	4598      	cmp	r8, r3
 8001b1c:	d172      	bne.n	8001c04 <__ieee754_rem_pio2+0x26c>
 8001b1e:	463b      	mov	r3, r7
 8001b20:	4632      	mov	r2, r6
 8001b22:	4620      	mov	r0, r4
 8001b24:	4629      	mov	r1, r5
 8001b26:	f7fe fb53 	bl	80001d0 <__aeabi_dsub>
 8001b2a:	ea4f 5828 	mov.w	r8, r8, asr #20
 8001b2e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8001b32:	ebc3 0308 	rsb	r3, r3, r8
 8001b36:	2b10      	cmp	r3, #16
 8001b38:	e9ca 0100 	strd	r0, r1, [sl]
 8001b3c:	dd6d      	ble.n	8001c1a <__ieee754_rem_pio2+0x282>
 8001b3e:	a356      	add	r3, pc, #344	; (adr r3, 8001c98 <__ieee754_rem_pio2+0x300>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001b48:	f7fe fcf6 	bl	8000538 <__aeabi_dmul>
 8001b4c:	4606      	mov	r6, r0
 8001b4e:	460f      	mov	r7, r1
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4620      	mov	r0, r4
 8001b56:	4629      	mov	r1, r5
 8001b58:	f7fe fb3a 	bl	80001d0 <__aeabi_dsub>
 8001b5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4620      	mov	r0, r4
 8001b66:	4629      	mov	r1, r5
 8001b68:	f7fe fb32 	bl	80001d0 <__aeabi_dsub>
 8001b6c:	4632      	mov	r2, r6
 8001b6e:	463b      	mov	r3, r7
 8001b70:	f7fe fb2e 	bl	80001d0 <__aeabi_dsub>
 8001b74:	a34a      	add	r3, pc, #296	; (adr r3, 8001ca0 <__ieee754_rem_pio2+0x308>)
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	460d      	mov	r5, r1
 8001b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001b82:	f7fe fcd9 	bl	8000538 <__aeabi_dmul>
 8001b86:	4622      	mov	r2, r4
 8001b88:	462b      	mov	r3, r5
 8001b8a:	f7fe fb21 	bl	80001d0 <__aeabi_dsub>
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4602      	mov	r2, r0
 8001b92:	4606      	mov	r6, r0
 8001b94:	460f      	mov	r7, r1
 8001b96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001b9a:	f7fe fb19 	bl	80001d0 <__aeabi_dsub>
 8001b9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8001ba2:	ebc3 0808 	rsb	r8, r3, r8
 8001ba6:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
 8001baa:	e9ca 0100 	strd	r0, r1, [sl]
 8001bae:	dd32      	ble.n	8001c16 <__ieee754_rem_pio2+0x27e>
 8001bb0:	a33f      	add	r3, pc, #252	; (adr r3, 8001cb0 <__ieee754_rem_pio2+0x318>)
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001bba:	f7fe fcbd 	bl	8000538 <__aeabi_dmul>
 8001bbe:	4606      	mov	r6, r0
 8001bc0:	460f      	mov	r7, r1
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001bca:	f7fe fb01 	bl	80001d0 <__aeabi_dsub>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	460d      	mov	r5, r1
 8001bd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001bda:	f7fe faf9 	bl	80001d0 <__aeabi_dsub>
 8001bde:	4632      	mov	r2, r6
 8001be0:	463b      	mov	r3, r7
 8001be2:	f7fe faf5 	bl	80001d0 <__aeabi_dsub>
 8001be6:	a334      	add	r3, pc, #208	; (adr r3, 8001cb8 <__ieee754_rem_pio2+0x320>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	4606      	mov	r6, r0
 8001bee:	460f      	mov	r7, r1
 8001bf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001bf4:	f7fe fca0 	bl	8000538 <__aeabi_dmul>
 8001bf8:	4632      	mov	r2, r6
 8001bfa:	463b      	mov	r3, r7
 8001bfc:	f7fe fae8 	bl	80001d0 <__aeabi_dsub>
 8001c00:	4606      	mov	r6, r0
 8001c02:	460f      	mov	r7, r1
 8001c04:	4632      	mov	r2, r6
 8001c06:	463b      	mov	r3, r7
 8001c08:	4620      	mov	r0, r4
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	f7fe fae0 	bl	80001d0 <__aeabi_dsub>
 8001c10:	e9ca 0100 	strd	r0, r1, [sl]
 8001c14:	e001      	b.n	8001c1a <__ieee754_rem_pio2+0x282>
 8001c16:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8001c1a:	ed9a 7b00 	vldr	d7, [sl]
 8001c1e:	4620      	mov	r0, r4
 8001c20:	ec53 2b17 	vmov	r2, r3, d7
 8001c24:	4629      	mov	r1, r5
 8001c26:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001c2a:	f7fe fad1 	bl	80001d0 <__aeabi_dsub>
 8001c2e:	4632      	mov	r2, r6
 8001c30:	463b      	mov	r3, r7
 8001c32:	f7fe facd 	bl	80001d0 <__aeabi_dsub>
 8001c36:	f1bb 0f00 	cmp.w	fp, #0
 8001c3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8001c3e:	f280 80a0 	bge.w	8001d82 <__ieee754_rem_pio2+0x3ea>
 8001c42:	9b02      	ldr	r3, [sp, #8]
 8001c44:	f8ca 3000 	str.w	r3, [sl]
 8001c48:	9b03      	ldr	r3, [sp, #12]
 8001c4a:	f8ca 0008 	str.w	r0, [sl, #8]
 8001c4e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001c52:	f8ca 3004 	str.w	r3, [sl, #4]
 8001c56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001c5a:	f8ca 300c 	str.w	r3, [sl, #12]
 8001c5e:	f1c9 0000 	rsb	r0, r9, #0
 8001c62:	e08f      	b.n	8001d84 <__ieee754_rem_pio2+0x3ec>
 8001c64:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <__ieee754_rem_pio2+0x340>)
 8001c66:	4598      	cmp	r8, r3
 8001c68:	dd38      	ble.n	8001cdc <__ieee754_rem_pio2+0x344>
 8001c6a:	ee10 2a10 	vmov	r2, s0
 8001c6e:	462b      	mov	r3, r5
 8001c70:	4620      	mov	r0, r4
 8001c72:	4629      	mov	r1, r5
 8001c74:	f7fe faac 	bl	80001d0 <__aeabi_dsub>
 8001c78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8001c7c:	e9ca 0100 	strd	r0, r1, [sl]
 8001c80:	2000      	movs	r0, #0
 8001c82:	e07f      	b.n	8001d84 <__ieee754_rem_pio2+0x3ec>
 8001c84:	f3af 8000 	nop.w
 8001c88:	54400000 	.word	0x54400000
 8001c8c:	3ff921fb 	.word	0x3ff921fb
 8001c90:	1a626331 	.word	0x1a626331
 8001c94:	3dd0b461 	.word	0x3dd0b461
 8001c98:	1a600000 	.word	0x1a600000
 8001c9c:	3dd0b461 	.word	0x3dd0b461
 8001ca0:	2e037073 	.word	0x2e037073
 8001ca4:	3ba3198a 	.word	0x3ba3198a
 8001ca8:	6dc9c883 	.word	0x6dc9c883
 8001cac:	3fe45f30 	.word	0x3fe45f30
 8001cb0:	2e000000 	.word	0x2e000000
 8001cb4:	3ba3198a 	.word	0x3ba3198a
 8001cb8:	252049c1 	.word	0x252049c1
 8001cbc:	397b839a 	.word	0x397b839a
 8001cc0:	3fe921fb 	.word	0x3fe921fb
 8001cc4:	4002d97b 	.word	0x4002d97b
 8001cc8:	3ff921fb 	.word	0x3ff921fb
 8001ccc:	413921fb 	.word	0x413921fb
 8001cd0:	3fe00000 	.word	0x3fe00000
 8001cd4:	080029c0 	.word	0x080029c0
 8001cd8:	7fefffff 	.word	0x7fefffff
 8001cdc:	ea4f 5628 	mov.w	r6, r8, asr #20
 8001ce0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8001ce4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8001ce8:	4620      	mov	r0, r4
 8001cea:	460d      	mov	r5, r1
 8001cec:	f7fe febe 	bl	8000a6c <__aeabi_d2iz>
 8001cf0:	f7fe fbbc 	bl	800046c <__aeabi_i2d>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001d00:	f7fe fa66 	bl	80001d0 <__aeabi_dsub>
 8001d04:	2200      	movs	r2, #0
 8001d06:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <__ieee754_rem_pio2+0x3f4>)
 8001d08:	f7fe fc16 	bl	8000538 <__aeabi_dmul>
 8001d0c:	460d      	mov	r5, r1
 8001d0e:	4604      	mov	r4, r0
 8001d10:	f7fe feac 	bl	8000a6c <__aeabi_d2iz>
 8001d14:	f7fe fbaa 	bl	800046c <__aeabi_i2d>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	4629      	mov	r1, r5
 8001d20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d24:	f7fe fa54 	bl	80001d0 <__aeabi_dsub>
 8001d28:	2200      	movs	r2, #0
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <__ieee754_rem_pio2+0x3f4>)
 8001d2c:	f7fe fc04 	bl	8000538 <__aeabi_dmul>
 8001d30:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001d34:	ad0c      	add	r5, sp, #48	; 0x30
 8001d36:	2403      	movs	r4, #3
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e975 0102 	ldrd	r0, r1, [r5, #-8]!
 8001d40:	1e67      	subs	r7, r4, #1
 8001d42:	f7fe fe61 	bl	8000a08 <__aeabi_dcmpeq>
 8001d46:	b108      	cbz	r0, 8001d4c <__ieee754_rem_pio2+0x3b4>
 8001d48:	463c      	mov	r4, r7
 8001d4a:	e7f5      	b.n	8001d38 <__ieee754_rem_pio2+0x3a0>
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <__ieee754_rem_pio2+0x3f8>)
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	2302      	movs	r3, #2
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	4632      	mov	r2, r6
 8001d56:	4623      	mov	r3, r4
 8001d58:	4651      	mov	r1, sl
 8001d5a:	a806      	add	r0, sp, #24
 8001d5c:	f000 f904 	bl	8001f68 <__kernel_rem_pio2>
 8001d60:	f1bb 0f00 	cmp.w	fp, #0
 8001d64:	da0e      	bge.n	8001d84 <__ieee754_rem_pio2+0x3ec>
 8001d66:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001d6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001d6e:	f8ca 3004 	str.w	r3, [sl, #4]
 8001d72:	f8da 300c 	ldr.w	r3, [sl, #12]
 8001d76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001d7a:	f8ca 300c 	str.w	r3, [sl, #12]
 8001d7e:	4240      	negs	r0, r0
 8001d80:	e000      	b.n	8001d84 <__ieee754_rem_pio2+0x3ec>
 8001d82:	4648      	mov	r0, r9
 8001d84:	b00d      	add	sp, #52	; 0x34
 8001d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d8a:	bf00      	nop
 8001d8c:	41700000 	.word	0x41700000
 8001d90:	08002a40 	.word	0x08002a40
 8001d94:	00000000 	.word	0x00000000

08001d98 <__kernel_cos>:
 8001d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d9c:	ec59 8b10 	vmov	r8, r9, d0
 8001da0:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8001da4:	b085      	sub	sp, #20
 8001da6:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8001daa:	ed8d 1b00 	vstr	d1, [sp]
 8001dae:	da07      	bge.n	8001dc0 <__kernel_cos+0x28>
 8001db0:	ee10 0a10 	vmov	r0, s0
 8001db4:	4649      	mov	r1, r9
 8001db6:	f7fe fe59 	bl	8000a6c <__aeabi_d2iz>
 8001dba:	2800      	cmp	r0, #0
 8001dbc:	f000 80a6 	beq.w	8001f0c <__kernel_cos+0x174>
 8001dc0:	4642      	mov	r2, r8
 8001dc2:	464b      	mov	r3, r9
 8001dc4:	4640      	mov	r0, r8
 8001dc6:	4649      	mov	r1, r9
 8001dc8:	f7fe fbb6 	bl	8000538 <__aeabi_dmul>
 8001dcc:	a359      	add	r3, pc, #356	; (adr r3, 8001f34 <__kernel_cos+0x19c>)
 8001dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	460d      	mov	r5, r1
 8001dd6:	f7fe fbaf 	bl	8000538 <__aeabi_dmul>
 8001dda:	a358      	add	r3, pc, #352	; (adr r3, 8001f3c <__kernel_cos+0x1a4>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	f7fe f9f8 	bl	80001d4 <__adddf3>
 8001de4:	4622      	mov	r2, r4
 8001de6:	462b      	mov	r3, r5
 8001de8:	f7fe fba6 	bl	8000538 <__aeabi_dmul>
 8001dec:	a355      	add	r3, pc, #340	; (adr r3, 8001f44 <__kernel_cos+0x1ac>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe f9ed 	bl	80001d0 <__aeabi_dsub>
 8001df6:	4622      	mov	r2, r4
 8001df8:	462b      	mov	r3, r5
 8001dfa:	f7fe fb9d 	bl	8000538 <__aeabi_dmul>
 8001dfe:	a353      	add	r3, pc, #332	; (adr r3, 8001f4c <__kernel_cos+0x1b4>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe f9e6 	bl	80001d4 <__adddf3>
 8001e08:	4622      	mov	r2, r4
 8001e0a:	462b      	mov	r3, r5
 8001e0c:	f7fe fb94 	bl	8000538 <__aeabi_dmul>
 8001e10:	a350      	add	r3, pc, #320	; (adr r3, 8001f54 <__kernel_cos+0x1bc>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe f9db 	bl	80001d0 <__aeabi_dsub>
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	462b      	mov	r3, r5
 8001e1e:	f7fe fb8b 	bl	8000538 <__aeabi_dmul>
 8001e22:	a34e      	add	r3, pc, #312	; (adr r3, 8001f5c <__kernel_cos+0x1c4>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	f7fe f9d4 	bl	80001d4 <__adddf3>
 8001e2c:	462b      	mov	r3, r5
 8001e2e:	4622      	mov	r2, r4
 8001e30:	f7fe fb82 	bl	8000538 <__aeabi_dmul>
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <__kernel_cos+0x188>)
 8001e36:	429f      	cmp	r7, r3
 8001e38:	4682      	mov	sl, r0
 8001e3a:	468b      	mov	fp, r1
 8001e3c:	dc26      	bgt.n	8001e8c <__kernel_cos+0xf4>
 8001e3e:	2200      	movs	r2, #0
 8001e40:	4b38      	ldr	r3, [pc, #224]	; (8001f24 <__kernel_cos+0x18c>)
 8001e42:	4620      	mov	r0, r4
 8001e44:	4629      	mov	r1, r5
 8001e46:	f7fe fb77 	bl	8000538 <__aeabi_dmul>
 8001e4a:	4652      	mov	r2, sl
 8001e4c:	4606      	mov	r6, r0
 8001e4e:	460f      	mov	r7, r1
 8001e50:	465b      	mov	r3, fp
 8001e52:	4620      	mov	r0, r4
 8001e54:	4629      	mov	r1, r5
 8001e56:	f7fe fb6f 	bl	8000538 <__aeabi_dmul>
 8001e5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001e5e:	4604      	mov	r4, r0
 8001e60:	460d      	mov	r5, r1
 8001e62:	4640      	mov	r0, r8
 8001e64:	4649      	mov	r1, r9
 8001e66:	f7fe fb67 	bl	8000538 <__aeabi_dmul>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4620      	mov	r0, r4
 8001e70:	4629      	mov	r1, r5
 8001e72:	f7fe f9ad 	bl	80001d0 <__aeabi_dsub>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4630      	mov	r0, r6
 8001e7c:	4639      	mov	r1, r7
 8001e7e:	f7fe f9a7 	bl	80001d0 <__aeabi_dsub>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	2000      	movs	r0, #0
 8001e88:	4927      	ldr	r1, [pc, #156]	; (8001f28 <__kernel_cos+0x190>)
 8001e8a:	e03c      	b.n	8001f06 <__kernel_cos+0x16e>
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <__kernel_cos+0x194>)
 8001e8e:	4926      	ldr	r1, [pc, #152]	; (8001f28 <__kernel_cos+0x190>)
 8001e90:	429f      	cmp	r7, r3
 8001e92:	bfd7      	itett	le
 8001e94:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8001e98:	4f25      	ldrgt	r7, [pc, #148]	; (8001f30 <__kernel_cos+0x198>)
 8001e9a:	2200      	movle	r2, #0
 8001e9c:	4616      	movle	r6, r2
 8001e9e:	bfd4      	ite	le
 8001ea0:	461f      	movle	r7, r3
 8001ea2:	2600      	movgt	r6, #0
 8001ea4:	4632      	mov	r2, r6
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7fe f991 	bl	80001d0 <__aeabi_dsub>
 8001eae:	2200      	movs	r2, #0
 8001eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <__kernel_cos+0x18c>)
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	4629      	mov	r1, r5
 8001eba:	f7fe fb3d 	bl	8000538 <__aeabi_dmul>
 8001ebe:	4632      	mov	r2, r6
 8001ec0:	463b      	mov	r3, r7
 8001ec2:	f7fe f985 	bl	80001d0 <__aeabi_dsub>
 8001ec6:	4652      	mov	r2, sl
 8001ec8:	4606      	mov	r6, r0
 8001eca:	460f      	mov	r7, r1
 8001ecc:	465b      	mov	r3, fp
 8001ece:	4620      	mov	r0, r4
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	f7fe fb31 	bl	8000538 <__aeabi_dmul>
 8001ed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001eda:	4604      	mov	r4, r0
 8001edc:	460d      	mov	r5, r1
 8001ede:	4640      	mov	r0, r8
 8001ee0:	4649      	mov	r1, r9
 8001ee2:	f7fe fb29 	bl	8000538 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4620      	mov	r0, r4
 8001eec:	4629      	mov	r1, r5
 8001eee:	f7fe f96f 	bl	80001d0 <__aeabi_dsub>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4630      	mov	r0, r6
 8001ef8:	4639      	mov	r1, r7
 8001efa:	f7fe f969 	bl	80001d0 <__aeabi_dsub>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001f06:	f7fe f963 	bl	80001d0 <__aeabi_dsub>
 8001f0a:	e001      	b.n	8001f10 <__kernel_cos+0x178>
 8001f0c:	4906      	ldr	r1, [pc, #24]	; (8001f28 <__kernel_cos+0x190>)
 8001f0e:	2000      	movs	r0, #0
 8001f10:	ec41 0b10 	vmov	d0, r0, r1
 8001f14:	b005      	add	sp, #20
 8001f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f1a:	bf00      	nop
 8001f1c:	f3af 8000 	nop.w
 8001f20:	3fd33332 	.word	0x3fd33332
 8001f24:	3fe00000 	.word	0x3fe00000
 8001f28:	3ff00000 	.word	0x3ff00000
 8001f2c:	3fe90000 	.word	0x3fe90000
 8001f30:	3fd20000 	.word	0x3fd20000
 8001f34:	be8838d4 	.word	0xbe8838d4
 8001f38:	bda8fae9 	.word	0xbda8fae9
 8001f3c:	bdb4b1c4 	.word	0xbdb4b1c4
 8001f40:	3e21ee9e 	.word	0x3e21ee9e
 8001f44:	809c52ad 	.word	0x809c52ad
 8001f48:	3e927e4f 	.word	0x3e927e4f
 8001f4c:	19cb1590 	.word	0x19cb1590
 8001f50:	3efa01a0 	.word	0x3efa01a0
 8001f54:	16c15177 	.word	0x16c15177
 8001f58:	3f56c16c 	.word	0x3f56c16c
 8001f5c:	5555554c 	.word	0x5555554c
 8001f60:	3fa55555 	.word	0x3fa55555
 8001f64:	00000000 	.word	0x00000000

08001f68 <__kernel_rem_pio2>:
 8001f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f6c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8001f70:	2418      	movs	r4, #24
 8001f72:	9306      	str	r3, [sp, #24]
 8001f74:	9101      	str	r1, [sp, #4]
 8001f76:	4bba      	ldr	r3, [pc, #744]	; (8002260 <__kernel_rem_pio2+0x2f8>)
 8001f78:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8001f7a:	9009      	str	r0, [sp, #36]	; 0x24
 8001f7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f80:	9302      	str	r3, [sp, #8]
 8001f82:	9b06      	ldr	r3, [sp, #24]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	9305      	str	r3, [sp, #20]
 8001f88:	1ed3      	subs	r3, r2, #3
 8001f8a:	fb93 f4f4 	sdiv	r4, r3, r4
 8001f8e:	f06f 0317 	mvn.w	r3, #23
 8001f92:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8001f96:	fb04 3303 	mla	r3, r4, r3, r3
 8001f9a:	eb03 0802 	add.w	r8, r3, r2
 8001f9e:	9b02      	ldr	r3, [sp, #8]
 8001fa0:	9a05      	ldr	r2, [sp, #20]
 8001fa2:	eb03 0a02 	add.w	sl, r3, r2
 8001fa6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8001fa8:	1aa7      	subs	r7, r4, r2
 8001faa:	ae20      	add	r6, sp, #128	; 0x80
 8001fac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8001fb0:	2500      	movs	r5, #0
 8001fb2:	4555      	cmp	r5, sl
 8001fb4:	dc0c      	bgt.n	8001fd0 <__kernel_rem_pio2+0x68>
 8001fb6:	42ef      	cmn	r7, r5
 8001fb8:	d404      	bmi.n	8001fc4 <__kernel_rem_pio2+0x5c>
 8001fba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8001fbe:	f7fe fa55 	bl	800046c <__aeabi_i2d>
 8001fc2:	e001      	b.n	8001fc8 <__kernel_rem_pio2+0x60>
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	e8e6 0102 	strd	r0, r1, [r6], #8
 8001fcc:	3501      	adds	r5, #1
 8001fce:	e7f0      	b.n	8001fb2 <__kernel_rem_pio2+0x4a>
 8001fd0:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8001fd4:	2600      	movs	r6, #0
 8001fd6:	9b02      	ldr	r3, [sp, #8]
 8001fd8:	429e      	cmp	r6, r3
 8001fda:	dc27      	bgt.n	800202c <__kernel_rem_pio2+0xc4>
 8001fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fde:	9304      	str	r3, [sp, #16]
 8001fe0:	9b06      	ldr	r3, [sp, #24]
 8001fe2:	199d      	adds	r5, r3, r6
 8001fe4:	ab20      	add	r3, sp, #128	; 0x80
 8001fe6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001fea:	9308      	str	r3, [sp, #32]
 8001fec:	f04f 0900 	mov.w	r9, #0
 8001ff0:	f04f 0a00 	mov.w	sl, #0
 8001ff4:	2700      	movs	r7, #0
 8001ff6:	9b05      	ldr	r3, [sp, #20]
 8001ff8:	429f      	cmp	r7, r3
 8001ffa:	dc13      	bgt.n	8002024 <__kernel_rem_pio2+0xbc>
 8001ffc:	9908      	ldr	r1, [sp, #32]
 8001ffe:	9d04      	ldr	r5, [sp, #16]
 8002000:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8002004:	9108      	str	r1, [sp, #32]
 8002006:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800200a:	9504      	str	r5, [sp, #16]
 800200c:	f7fe fa94 	bl	8000538 <__aeabi_dmul>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4648      	mov	r0, r9
 8002016:	4651      	mov	r1, sl
 8002018:	f7fe f8dc 	bl	80001d4 <__adddf3>
 800201c:	3701      	adds	r7, #1
 800201e:	4681      	mov	r9, r0
 8002020:	468a      	mov	sl, r1
 8002022:	e7e8      	b.n	8001ff6 <__kernel_rem_pio2+0x8e>
 8002024:	e8ab 0600 	stmia.w	fp!, {r9, sl}
 8002028:	3601      	adds	r6, #1
 800202a:	e7d4      	b.n	8001fd6 <__kernel_rem_pio2+0x6e>
 800202c:	9b02      	ldr	r3, [sp, #8]
 800202e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002032:	aa0c      	add	r2, sp, #48	; 0x30
 8002034:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002038:	930a      	str	r3, [sp, #40]	; 0x28
 800203a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800203c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002040:	930b      	str	r3, [sp, #44]	; 0x2c
 8002042:	ab98      	add	r3, sp, #608	; 0x260
 8002044:	f10b 5a00 	add.w	sl, fp, #536870912	; 0x20000000
 8002048:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800204c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002050:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8002054:	aa98      	add	r2, sp, #608	; 0x260
 8002056:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800205a:	eb02 0903 	add.w	r9, r2, r3
 800205e:	9308      	str	r3, [sp, #32]
 8002060:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8002064:	f04f 0a00 	mov.w	sl, #0
 8002068:	ebca 030b 	rsb	r3, sl, fp
 800206c:	2b00      	cmp	r3, #0
 800206e:	dd25      	ble.n	80020bc <__kernel_rem_pio2+0x154>
 8002070:	2200      	movs	r2, #0
 8002072:	4b7c      	ldr	r3, [pc, #496]	; (8002264 <__kernel_rem_pio2+0x2fc>)
 8002074:	4630      	mov	r0, r6
 8002076:	4639      	mov	r1, r7
 8002078:	f7fe fa5e 	bl	8000538 <__aeabi_dmul>
 800207c:	f7fe fcf6 	bl	8000a6c <__aeabi_d2iz>
 8002080:	f7fe f9f4 	bl	800046c <__aeabi_i2d>
 8002084:	2200      	movs	r2, #0
 8002086:	4b78      	ldr	r3, [pc, #480]	; (8002268 <__kernel_rem_pio2+0x300>)
 8002088:	4604      	mov	r4, r0
 800208a:	460d      	mov	r5, r1
 800208c:	f7fe fa54 	bl	8000538 <__aeabi_dmul>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4630      	mov	r0, r6
 8002096:	4639      	mov	r1, r7
 8002098:	f7fe f89a 	bl	80001d0 <__aeabi_dsub>
 800209c:	f7fe fce6 	bl	8000a6c <__aeabi_d2iz>
 80020a0:	ab0c      	add	r3, sp, #48	; 0x30
 80020a2:	4629      	mov	r1, r5
 80020a4:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 80020a8:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 80020ac:	4620      	mov	r0, r4
 80020ae:	f7fe f891 	bl	80001d4 <__adddf3>
 80020b2:	f10a 0a01 	add.w	sl, sl, #1
 80020b6:	4606      	mov	r6, r0
 80020b8:	460f      	mov	r7, r1
 80020ba:	e7d5      	b.n	8002068 <__kernel_rem_pio2+0x100>
 80020bc:	ec47 6b10 	vmov	d0, r6, r7
 80020c0:	4640      	mov	r0, r8
 80020c2:	f000 fbe9 	bl	8002898 <scalbn>
 80020c6:	ec55 4b10 	vmov	r4, r5, d0
 80020ca:	2200      	movs	r2, #0
 80020cc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80020d0:	ee10 0a10 	vmov	r0, s0
 80020d4:	4629      	mov	r1, r5
 80020d6:	f7fe fa2f 	bl	8000538 <__aeabi_dmul>
 80020da:	ec41 0b10 	vmov	d0, r0, r1
 80020de:	f000 fb57 	bl	8002790 <floor>
 80020e2:	2200      	movs	r2, #0
 80020e4:	ec51 0b10 	vmov	r0, r1, d0
 80020e8:	4b60      	ldr	r3, [pc, #384]	; (800226c <__kernel_rem_pio2+0x304>)
 80020ea:	f7fe fa25 	bl	8000538 <__aeabi_dmul>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4620      	mov	r0, r4
 80020f4:	4629      	mov	r1, r5
 80020f6:	f7fe f86b 	bl	80001d0 <__aeabi_dsub>
 80020fa:	460d      	mov	r5, r1
 80020fc:	4604      	mov	r4, r0
 80020fe:	f7fe fcb5 	bl	8000a6c <__aeabi_d2iz>
 8002102:	9004      	str	r0, [sp, #16]
 8002104:	f7fe f9b2 	bl	800046c <__aeabi_i2d>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4620      	mov	r0, r4
 800210e:	4629      	mov	r1, r5
 8002110:	f7fe f85e 	bl	80001d0 <__aeabi_dsub>
 8002114:	f1b8 0f00 	cmp.w	r8, #0
 8002118:	4606      	mov	r6, r0
 800211a:	460f      	mov	r7, r1
 800211c:	dd15      	ble.n	800214a <__kernel_rem_pio2+0x1e2>
 800211e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8002122:	ab0c      	add	r3, sp, #48	; 0x30
 8002124:	f1c8 0018 	rsb	r0, r8, #24
 8002128:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800212c:	9c04      	ldr	r4, [sp, #16]
 800212e:	fa42 f300 	asr.w	r3, r2, r0
 8002132:	441c      	add	r4, r3
 8002134:	4083      	lsls	r3, r0
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	aa0c      	add	r2, sp, #48	; 0x30
 800213a:	f1c8 0017 	rsb	r0, r8, #23
 800213e:	9404      	str	r4, [sp, #16]
 8002140:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002144:	fa43 fa00 	asr.w	sl, r3, r0
 8002148:	e00f      	b.n	800216a <__kernel_rem_pio2+0x202>
 800214a:	d107      	bne.n	800215c <__kernel_rem_pio2+0x1f4>
 800214c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002150:	aa0c      	add	r2, sp, #48	; 0x30
 8002152:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002156:	ea4f 5ae0 	mov.w	sl, r0, asr #23
 800215a:	e006      	b.n	800216a <__kernel_rem_pio2+0x202>
 800215c:	2200      	movs	r2, #0
 800215e:	4b44      	ldr	r3, [pc, #272]	; (8002270 <__kernel_rem_pio2+0x308>)
 8002160:	f7fe fc70 	bl	8000a44 <__aeabi_dcmpge>
 8002164:	b928      	cbnz	r0, 8002172 <__kernel_rem_pio2+0x20a>
 8002166:	4682      	mov	sl, r0
 8002168:	e052      	b.n	8002210 <__kernel_rem_pio2+0x2a8>
 800216a:	f1ba 0f00 	cmp.w	sl, #0
 800216e:	dc02      	bgt.n	8002176 <__kernel_rem_pio2+0x20e>
 8002170:	e04e      	b.n	8002210 <__kernel_rem_pio2+0x2a8>
 8002172:	f04f 0a02 	mov.w	sl, #2
 8002176:	9b04      	ldr	r3, [sp, #16]
 8002178:	2200      	movs	r2, #0
 800217a:	3301      	adds	r3, #1
 800217c:	9304      	str	r3, [sp, #16]
 800217e:	4614      	mov	r4, r2
 8002180:	4593      	cmp	fp, r2
 8002182:	dd11      	ble.n	80021a8 <__kernel_rem_pio2+0x240>
 8002184:	ab0c      	add	r3, sp, #48	; 0x30
 8002186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800218a:	b91c      	cbnz	r4, 8002194 <__kernel_rem_pio2+0x22c>
 800218c:	b153      	cbz	r3, 80021a4 <__kernel_rem_pio2+0x23c>
 800218e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8002192:	e003      	b.n	800219c <__kernel_rem_pio2+0x234>
 8002194:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 8002198:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800219c:	a90c      	add	r1, sp, #48	; 0x30
 800219e:	2401      	movs	r4, #1
 80021a0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80021a4:	3201      	adds	r2, #1
 80021a6:	e7eb      	b.n	8002180 <__kernel_rem_pio2+0x218>
 80021a8:	f1b8 0f00 	cmp.w	r8, #0
 80021ac:	dd17      	ble.n	80021de <__kernel_rem_pio2+0x276>
 80021ae:	f1b8 0f01 	cmp.w	r8, #1
 80021b2:	d00a      	beq.n	80021ca <__kernel_rem_pio2+0x262>
 80021b4:	f1b8 0f02 	cmp.w	r8, #2
 80021b8:	d111      	bne.n	80021de <__kernel_rem_pio2+0x276>
 80021ba:	f10b 32ff 	add.w	r2, fp, #4294967295
 80021be:	ab0c      	add	r3, sp, #48	; 0x30
 80021c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80021c8:	e006      	b.n	80021d8 <__kernel_rem_pio2+0x270>
 80021ca:	f10b 32ff 	add.w	r2, fp, #4294967295
 80021ce:	ab0c      	add	r3, sp, #48	; 0x30
 80021d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80021d8:	a90c      	add	r1, sp, #48	; 0x30
 80021da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80021de:	f1ba 0f02 	cmp.w	sl, #2
 80021e2:	d115      	bne.n	8002210 <__kernel_rem_pio2+0x2a8>
 80021e4:	4632      	mov	r2, r6
 80021e6:	463b      	mov	r3, r7
 80021e8:	2000      	movs	r0, #0
 80021ea:	4922      	ldr	r1, [pc, #136]	; (8002274 <__kernel_rem_pio2+0x30c>)
 80021ec:	f7fd fff0 	bl	80001d0 <__aeabi_dsub>
 80021f0:	4606      	mov	r6, r0
 80021f2:	460f      	mov	r7, r1
 80021f4:	b164      	cbz	r4, 8002210 <__kernel_rem_pio2+0x2a8>
 80021f6:	4640      	mov	r0, r8
 80021f8:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002258 <__kernel_rem_pio2+0x2f0>
 80021fc:	f000 fb4c 	bl	8002898 <scalbn>
 8002200:	4630      	mov	r0, r6
 8002202:	4639      	mov	r1, r7
 8002204:	ec53 2b10 	vmov	r2, r3, d0
 8002208:	f7fd ffe2 	bl	80001d0 <__aeabi_dsub>
 800220c:	4606      	mov	r6, r0
 800220e:	460f      	mov	r7, r1
 8002210:	2200      	movs	r2, #0
 8002212:	2300      	movs	r3, #0
 8002214:	4630      	mov	r0, r6
 8002216:	4639      	mov	r1, r7
 8002218:	f7fe fbf6 	bl	8000a08 <__aeabi_dcmpeq>
 800221c:	2800      	cmp	r0, #0
 800221e:	d074      	beq.n	800230a <__kernel_rem_pio2+0x3a2>
 8002220:	f10b 31ff 	add.w	r1, fp, #4294967295
 8002224:	460b      	mov	r3, r1
 8002226:	2200      	movs	r2, #0
 8002228:	9802      	ldr	r0, [sp, #8]
 800222a:	4283      	cmp	r3, r0
 800222c:	db05      	blt.n	800223a <__kernel_rem_pio2+0x2d2>
 800222e:	a80c      	add	r0, sp, #48	; 0x30
 8002230:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8002234:	3b01      	subs	r3, #1
 8002236:	4302      	orrs	r2, r0
 8002238:	e7f6      	b.n	8002228 <__kernel_rem_pio2+0x2c0>
 800223a:	2a00      	cmp	r2, #0
 800223c:	d158      	bne.n	80022f0 <__kernel_rem_pio2+0x388>
 800223e:	2301      	movs	r3, #1
 8002240:	f06f 0103 	mvn.w	r1, #3
 8002244:	fb01 f203 	mul.w	r2, r1, r3
 8002248:	980a      	ldr	r0, [sp, #40]	; 0x28
 800224a:	5882      	ldr	r2, [r0, r2]
 800224c:	b9a2      	cbnz	r2, 8002278 <__kernel_rem_pio2+0x310>
 800224e:	3301      	adds	r3, #1
 8002250:	e7f8      	b.n	8002244 <__kernel_rem_pio2+0x2dc>
 8002252:	bf00      	nop
 8002254:	f3af 8000 	nop.w
 8002258:	00000000 	.word	0x00000000
 800225c:	3ff00000 	.word	0x3ff00000
 8002260:	08002b48 	.word	0x08002b48
 8002264:	3e700000 	.word	0x3e700000
 8002268:	41700000 	.word	0x41700000
 800226c:	40200000 	.word	0x40200000
 8002270:	3fe00000 	.word	0x3fe00000
 8002274:	3ff00000 	.word	0x3ff00000
 8002278:	9a08      	ldr	r2, [sp, #32]
 800227a:	a998      	add	r1, sp, #608	; 0x260
 800227c:	440a      	add	r2, r1
 800227e:	3a98      	subs	r2, #152	; 0x98
 8002280:	9204      	str	r2, [sp, #16]
 8002282:	9a06      	ldr	r2, [sp, #24]
 8002284:	445b      	add	r3, fp
 8002286:	eb02 050b 	add.w	r5, r2, fp
 800228a:	aa20      	add	r2, sp, #128	; 0x80
 800228c:	f10b 0601 	add.w	r6, fp, #1
 8002290:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8002294:	9308      	str	r3, [sp, #32]
 8002296:	9b08      	ldr	r3, [sp, #32]
 8002298:	429e      	cmp	r6, r3
 800229a:	dc27      	bgt.n	80022ec <__kernel_rem_pio2+0x384>
 800229c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800229e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80022a2:	f7fe f8e3 	bl	800046c <__aeabi_i2d>
 80022a6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80022aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022ac:	46a9      	mov	r9, r5
 80022ae:	461c      	mov	r4, r3
 80022b0:	2700      	movs	r7, #0
 80022b2:	f04f 0a00 	mov.w	sl, #0
 80022b6:	f04f 0b00 	mov.w	fp, #0
 80022ba:	9b05      	ldr	r3, [sp, #20]
 80022bc:	429f      	cmp	r7, r3
 80022be:	dc0f      	bgt.n	80022e0 <__kernel_rem_pio2+0x378>
 80022c0:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 80022c4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80022c8:	f7fe f936 	bl	8000538 <__aeabi_dmul>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4650      	mov	r0, sl
 80022d2:	4659      	mov	r1, fp
 80022d4:	f7fd ff7e 	bl	80001d4 <__adddf3>
 80022d8:	3701      	adds	r7, #1
 80022da:	4682      	mov	sl, r0
 80022dc:	468b      	mov	fp, r1
 80022de:	e7ec      	b.n	80022ba <__kernel_rem_pio2+0x352>
 80022e0:	9b04      	ldr	r3, [sp, #16]
 80022e2:	e9e3 ab02 	strd	sl, fp, [r3, #8]!
 80022e6:	3601      	adds	r6, #1
 80022e8:	9304      	str	r3, [sp, #16]
 80022ea:	e7d4      	b.n	8002296 <__kernel_rem_pio2+0x32e>
 80022ec:	469b      	mov	fp, r3
 80022ee:	e6a8      	b.n	8002042 <__kernel_rem_pio2+0xda>
 80022f0:	f1a8 0818 	sub.w	r8, r8, #24
 80022f4:	468b      	mov	fp, r1
 80022f6:	ab0c      	add	r3, sp, #48	; 0x30
 80022f8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d13c      	bne.n	800237a <__kernel_rem_pio2+0x412>
 8002300:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002304:	f1a8 0818 	sub.w	r8, r8, #24
 8002308:	e7f5      	b.n	80022f6 <__kernel_rem_pio2+0x38e>
 800230a:	f1c8 0000 	rsb	r0, r8, #0
 800230e:	ec47 6b10 	vmov	d0, r6, r7
 8002312:	f000 fac1 	bl	8002898 <scalbn>
 8002316:	ec55 4b10 	vmov	r4, r5, d0
 800231a:	2200      	movs	r2, #0
 800231c:	4bb6      	ldr	r3, [pc, #728]	; (80025f8 <__kernel_rem_pio2+0x690>)
 800231e:	ee10 0a10 	vmov	r0, s0
 8002322:	4629      	mov	r1, r5
 8002324:	f7fe fb8e 	bl	8000a44 <__aeabi_dcmpge>
 8002328:	b300      	cbz	r0, 800236c <__kernel_rem_pio2+0x404>
 800232a:	2200      	movs	r2, #0
 800232c:	4bb3      	ldr	r3, [pc, #716]	; (80025fc <__kernel_rem_pio2+0x694>)
 800232e:	4620      	mov	r0, r4
 8002330:	4629      	mov	r1, r5
 8002332:	f7fe f901 	bl	8000538 <__aeabi_dmul>
 8002336:	f7fe fb99 	bl	8000a6c <__aeabi_d2iz>
 800233a:	4606      	mov	r6, r0
 800233c:	f7fe f896 	bl	800046c <__aeabi_i2d>
 8002340:	2200      	movs	r2, #0
 8002342:	4bad      	ldr	r3, [pc, #692]	; (80025f8 <__kernel_rem_pio2+0x690>)
 8002344:	f7fe f8f8 	bl	8000538 <__aeabi_dmul>
 8002348:	460b      	mov	r3, r1
 800234a:	4602      	mov	r2, r0
 800234c:	4629      	mov	r1, r5
 800234e:	4620      	mov	r0, r4
 8002350:	f7fd ff3e 	bl	80001d0 <__aeabi_dsub>
 8002354:	f7fe fb8a 	bl	8000a6c <__aeabi_d2iz>
 8002358:	ab0c      	add	r3, sp, #48	; 0x30
 800235a:	f108 0818 	add.w	r8, r8, #24
 800235e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8002362:	f10b 0b01 	add.w	fp, fp, #1
 8002366:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800236a:	e006      	b.n	800237a <__kernel_rem_pio2+0x412>
 800236c:	4620      	mov	r0, r4
 800236e:	4629      	mov	r1, r5
 8002370:	f7fe fb7c 	bl	8000a6c <__aeabi_d2iz>
 8002374:	ab0c      	add	r3, sp, #48	; 0x30
 8002376:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800237a:	4640      	mov	r0, r8
 800237c:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 80025e8 <__kernel_rem_pio2+0x680>
 8002380:	f000 fa8a 	bl	8002898 <scalbn>
 8002384:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002388:	9305      	str	r3, [sp, #20]
 800238a:	9a05      	ldr	r2, [sp, #20]
 800238c:	ab98      	add	r3, sp, #608	; 0x260
 800238e:	189f      	adds	r7, r3, r2
 8002390:	ec55 4b10 	vmov	r4, r5, d0
 8002394:	3f98      	subs	r7, #152	; 0x98
 8002396:	465e      	mov	r6, fp
 8002398:	2e00      	cmp	r6, #0
 800239a:	db14      	blt.n	80023c6 <__kernel_rem_pio2+0x45e>
 800239c:	ab0c      	add	r3, sp, #48	; 0x30
 800239e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80023a2:	f7fe f863 	bl	800046c <__aeabi_i2d>
 80023a6:	4622      	mov	r2, r4
 80023a8:	462b      	mov	r3, r5
 80023aa:	f7fe f8c5 	bl	8000538 <__aeabi_dmul>
 80023ae:	2200      	movs	r2, #0
 80023b0:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80023b4:	4b91      	ldr	r3, [pc, #580]	; (80025fc <__kernel_rem_pio2+0x694>)
 80023b6:	4620      	mov	r0, r4
 80023b8:	4629      	mov	r1, r5
 80023ba:	f7fe f8bd 	bl	8000538 <__aeabi_dmul>
 80023be:	3e01      	subs	r6, #1
 80023c0:	4604      	mov	r4, r0
 80023c2:	460d      	mov	r5, r1
 80023c4:	e7e8      	b.n	8002398 <__kernel_rem_pio2+0x430>
 80023c6:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 80023ca:	2400      	movs	r4, #0
 80023cc:	4645      	mov	r5, r8
 80023ce:	ebbb 0704 	subs.w	r7, fp, r4
 80023d2:	d424      	bmi.n	800241e <__kernel_rem_pio2+0x4b6>
 80023d4:	ed9f 7b86 	vldr	d7, [pc, #536]	; 80025f0 <__kernel_rem_pio2+0x688>
 80023d8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80023dc:	ab70      	add	r3, sp, #448	; 0x1c0
 80023de:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8002600 <__kernel_rem_pio2+0x698>
 80023e2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80023e6:	2600      	movs	r6, #0
 80023e8:	9b02      	ldr	r3, [sp, #8]
 80023ea:	429e      	cmp	r6, r3
 80023ec:	dc11      	bgt.n	8002412 <__kernel_rem_pio2+0x4aa>
 80023ee:	42a6      	cmp	r6, r4
 80023f0:	dc0f      	bgt.n	8002412 <__kernel_rem_pio2+0x4aa>
 80023f2:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 80023f6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80023fa:	f7fe f89d 	bl	8000538 <__aeabi_dmul>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002406:	f7fd fee5 	bl	80001d4 <__adddf3>
 800240a:	3601      	adds	r6, #1
 800240c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002410:	e7ea      	b.n	80023e8 <__kernel_rem_pio2+0x480>
 8002412:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002416:	3401      	adds	r4, #1
 8002418:	eca8 7b02 	vstmia	r8!, {d7}
 800241c:	e7d7      	b.n	80023ce <__kernel_rem_pio2+0x466>
 800241e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8002420:	2b03      	cmp	r3, #3
 8002422:	f200 80d8 	bhi.w	80025d6 <__kernel_rem_pio2+0x66e>
 8002426:	e8df f003 	tbb	[pc, r3]
 800242a:	0810      	.short	0x0810
 800242c:	0208      	.short	0x0208
 800242e:	9a05      	ldr	r2, [sp, #20]
 8002430:	ab48      	add	r3, sp, #288	; 0x120
 8002432:	189c      	adds	r4, r3, r2
 8002434:	46a0      	mov	r8, r4
 8002436:	46d9      	mov	r9, fp
 8002438:	e056      	b.n	80024e8 <__kernel_rem_pio2+0x580>
 800243a:	9c05      	ldr	r4, [sp, #20]
 800243c:	ab48      	add	r3, sp, #288	; 0x120
 800243e:	3408      	adds	r4, #8
 8002440:	441c      	add	r4, r3
 8002442:	465d      	mov	r5, fp
 8002444:	2000      	movs	r0, #0
 8002446:	2100      	movs	r1, #0
 8002448:	e01d      	b.n	8002486 <__kernel_rem_pio2+0x51e>
 800244a:	9b05      	ldr	r3, [sp, #20]
 800244c:	aa98      	add	r2, sp, #608	; 0x260
 800244e:	4413      	add	r3, r2
 8002450:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 8002454:	2000      	movs	r0, #0
 8002456:	2100      	movs	r1, #0
 8002458:	f1bb 0f00 	cmp.w	fp, #0
 800245c:	db06      	blt.n	800246c <__kernel_rem_pio2+0x504>
 800245e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8002462:	f7fd feb7 	bl	80001d4 <__adddf3>
 8002466:	f10b 3bff 	add.w	fp, fp, #4294967295
 800246a:	e7f5      	b.n	8002458 <__kernel_rem_pio2+0x4f0>
 800246c:	f1ba 0f00 	cmp.w	sl, #0
 8002470:	d003      	beq.n	800247a <__kernel_rem_pio2+0x512>
 8002472:	4602      	mov	r2, r0
 8002474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002478:	e001      	b.n	800247e <__kernel_rem_pio2+0x516>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	9901      	ldr	r1, [sp, #4]
 8002480:	e9c1 2300 	strd	r2, r3, [r1]
 8002484:	e0a7      	b.n	80025d6 <__kernel_rem_pio2+0x66e>
 8002486:	2d00      	cmp	r5, #0
 8002488:	db05      	blt.n	8002496 <__kernel_rem_pio2+0x52e>
 800248a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800248e:	f7fd fea1 	bl	80001d4 <__adddf3>
 8002492:	3d01      	subs	r5, #1
 8002494:	e7f7      	b.n	8002486 <__kernel_rem_pio2+0x51e>
 8002496:	f1ba 0f00 	cmp.w	sl, #0
 800249a:	d003      	beq.n	80024a4 <__kernel_rem_pio2+0x53c>
 800249c:	4602      	mov	r2, r0
 800249e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80024a2:	e001      	b.n	80024a8 <__kernel_rem_pio2+0x540>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	9c01      	ldr	r4, [sp, #4]
 80024aa:	e9c4 2300 	strd	r2, r3, [r4]
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80024b6:	f7fd fe8b 	bl	80001d0 <__aeabi_dsub>
 80024ba:	ad4a      	add	r5, sp, #296	; 0x128
 80024bc:	2401      	movs	r4, #1
 80024be:	45a3      	cmp	fp, r4
 80024c0:	db05      	blt.n	80024ce <__kernel_rem_pio2+0x566>
 80024c2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80024c6:	f7fd fe85 	bl	80001d4 <__adddf3>
 80024ca:	3401      	adds	r4, #1
 80024cc:	e7f7      	b.n	80024be <__kernel_rem_pio2+0x556>
 80024ce:	f1ba 0f00 	cmp.w	sl, #0
 80024d2:	d003      	beq.n	80024dc <__kernel_rem_pio2+0x574>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80024da:	e001      	b.n	80024e0 <__kernel_rem_pio2+0x578>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	9901      	ldr	r1, [sp, #4]
 80024e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80024e6:	e076      	b.n	80025d6 <__kernel_rem_pio2+0x66e>
 80024e8:	f1b9 0f00 	cmp.w	r9, #0
 80024ec:	dd20      	ble.n	8002530 <__kernel_rem_pio2+0x5c8>
 80024ee:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
 80024f2:	ed98 7b02 	vldr	d7, [r8, #8]
 80024f6:	4630      	mov	r0, r6
 80024f8:	ec53 2b17 	vmov	r2, r3, d7
 80024fc:	4639      	mov	r1, r7
 80024fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002502:	f7fd fe67 	bl	80001d4 <__adddf3>
 8002506:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4630      	mov	r0, r6
 8002510:	4639      	mov	r1, r7
 8002512:	f7fd fe5d 	bl	80001d0 <__aeabi_dsub>
 8002516:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800251a:	f7fd fe5b 	bl	80001d4 <__adddf3>
 800251e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002522:	f109 39ff 	add.w	r9, r9, #4294967295
 8002526:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800252a:	ed88 7b00 	vstr	d7, [r8]
 800252e:	e7db      	b.n	80024e8 <__kernel_rem_pio2+0x580>
 8002530:	465e      	mov	r6, fp
 8002532:	2e01      	cmp	r6, #1
 8002534:	dd1f      	ble.n	8002576 <__kernel_rem_pio2+0x60e>
 8002536:	e974 8902 	ldrd	r8, r9, [r4, #-8]!
 800253a:	ed94 7b02 	vldr	d7, [r4, #8]
 800253e:	4640      	mov	r0, r8
 8002540:	ec53 2b17 	vmov	r2, r3, d7
 8002544:	4649      	mov	r1, r9
 8002546:	ed8d 7b02 	vstr	d7, [sp, #8]
 800254a:	f7fd fe43 	bl	80001d4 <__adddf3>
 800254e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4640      	mov	r0, r8
 8002558:	4649      	mov	r1, r9
 800255a:	f7fd fe39 	bl	80001d0 <__aeabi_dsub>
 800255e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002562:	f7fd fe37 	bl	80001d4 <__adddf3>
 8002566:	ed9d 7b06 	vldr	d7, [sp, #24]
 800256a:	3e01      	subs	r6, #1
 800256c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002570:	ed84 7b00 	vstr	d7, [r4]
 8002574:	e7dd      	b.n	8002532 <__kernel_rem_pio2+0x5ca>
 8002576:	9c05      	ldr	r4, [sp, #20]
 8002578:	ab48      	add	r3, sp, #288	; 0x120
 800257a:	3408      	adds	r4, #8
 800257c:	441c      	add	r4, r3
 800257e:	2000      	movs	r0, #0
 8002580:	2100      	movs	r1, #0
 8002582:	f1bb 0f01 	cmp.w	fp, #1
 8002586:	dd06      	ble.n	8002596 <__kernel_rem_pio2+0x62e>
 8002588:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800258c:	f7fd fe22 	bl	80001d4 <__adddf3>
 8002590:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002594:	e7f5      	b.n	8002582 <__kernel_rem_pio2+0x61a>
 8002596:	f1ba 0f00 	cmp.w	sl, #0
 800259a:	d10b      	bne.n	80025b4 <__kernel_rem_pio2+0x64c>
 800259c:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80025a0:	9c01      	ldr	r4, [sp, #4]
 80025a2:	e9c4 2300 	strd	r2, r3, [r4]
 80025a6:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 80025aa:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80025ae:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80025b2:	e010      	b.n	80025d6 <__kernel_rem_pio2+0x66e>
 80025b4:	9a01      	ldr	r2, [sp, #4]
 80025b6:	682b      	ldr	r3, [r5, #0]
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	686b      	ldr	r3, [r5, #4]
 80025bc:	6110      	str	r0, [r2, #16]
 80025be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80025c2:	6053      	str	r3, [r2, #4]
 80025c4:	68ab      	ldr	r3, [r5, #8]
 80025c6:	6093      	str	r3, [r2, #8]
 80025c8:	68eb      	ldr	r3, [r5, #12]
 80025ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80025ce:	60d3      	str	r3, [r2, #12]
 80025d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80025d4:	6153      	str	r3, [r2, #20]
 80025d6:	9b04      	ldr	r3, [sp, #16]
 80025d8:	f003 0007 	and.w	r0, r3, #7
 80025dc:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80025e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025e4:	f3af 8000 	nop.w
 80025e8:	00000000 	.word	0x00000000
 80025ec:	3ff00000 	.word	0x3ff00000
	...
 80025f8:	41700000 	.word	0x41700000
 80025fc:	3e700000 	.word	0x3e700000
 8002600:	08002b58 	.word	0x08002b58
 8002604:	00000000 	.word	0x00000000

08002608 <__kernel_sin>:
 8002608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800260c:	ec55 4b10 	vmov	r4, r5, d0
 8002610:	b085      	sub	sp, #20
 8002612:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8002616:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800261a:	ed8d 1b00 	vstr	d1, [sp]
 800261e:	9002      	str	r0, [sp, #8]
 8002620:	da07      	bge.n	8002632 <__kernel_sin+0x2a>
 8002622:	ee10 0a10 	vmov	r0, s0
 8002626:	4629      	mov	r1, r5
 8002628:	f7fe fa20 	bl	8000a6c <__aeabi_d2iz>
 800262c:	2800      	cmp	r0, #0
 800262e:	f000 8081 	beq.w	8002734 <__kernel_sin+0x12c>
 8002632:	4622      	mov	r2, r4
 8002634:	462b      	mov	r3, r5
 8002636:	4620      	mov	r0, r4
 8002638:	4629      	mov	r1, r5
 800263a:	f7fd ff7d 	bl	8000538 <__aeabi_dmul>
 800263e:	4682      	mov	sl, r0
 8002640:	468b      	mov	fp, r1
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4620      	mov	r0, r4
 8002648:	4629      	mov	r1, r5
 800264a:	f7fd ff75 	bl	8000538 <__aeabi_dmul>
 800264e:	a341      	add	r3, pc, #260	; (adr r3, 8002754 <__kernel_sin+0x14c>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	4680      	mov	r8, r0
 8002656:	4689      	mov	r9, r1
 8002658:	4650      	mov	r0, sl
 800265a:	4659      	mov	r1, fp
 800265c:	f7fd ff6c 	bl	8000538 <__aeabi_dmul>
 8002660:	a33e      	add	r3, pc, #248	; (adr r3, 800275c <__kernel_sin+0x154>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	f7fd fdb3 	bl	80001d0 <__aeabi_dsub>
 800266a:	4652      	mov	r2, sl
 800266c:	465b      	mov	r3, fp
 800266e:	f7fd ff63 	bl	8000538 <__aeabi_dmul>
 8002672:	a33c      	add	r3, pc, #240	; (adr r3, 8002764 <__kernel_sin+0x15c>)
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	f7fd fdac 	bl	80001d4 <__adddf3>
 800267c:	4652      	mov	r2, sl
 800267e:	465b      	mov	r3, fp
 8002680:	f7fd ff5a 	bl	8000538 <__aeabi_dmul>
 8002684:	a339      	add	r3, pc, #228	; (adr r3, 800276c <__kernel_sin+0x164>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	f7fd fda1 	bl	80001d0 <__aeabi_dsub>
 800268e:	4652      	mov	r2, sl
 8002690:	465b      	mov	r3, fp
 8002692:	f7fd ff51 	bl	8000538 <__aeabi_dmul>
 8002696:	a337      	add	r3, pc, #220	; (adr r3, 8002774 <__kernel_sin+0x16c>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fd fd9a 	bl	80001d4 <__adddf3>
 80026a0:	9b02      	ldr	r3, [sp, #8]
 80026a2:	4606      	mov	r6, r0
 80026a4:	460f      	mov	r7, r1
 80026a6:	b99b      	cbnz	r3, 80026d0 <__kernel_sin+0xc8>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4650      	mov	r0, sl
 80026ae:	4659      	mov	r1, fp
 80026b0:	f7fd ff42 	bl	8000538 <__aeabi_dmul>
 80026b4:	a324      	add	r3, pc, #144	; (adr r3, 8002748 <__kernel_sin+0x140>)
 80026b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ba:	f7fd fd89 	bl	80001d0 <__aeabi_dsub>
 80026be:	4642      	mov	r2, r8
 80026c0:	464b      	mov	r3, r9
 80026c2:	f7fd ff39 	bl	8000538 <__aeabi_dmul>
 80026c6:	4622      	mov	r2, r4
 80026c8:	462b      	mov	r3, r5
 80026ca:	f7fd fd83 	bl	80001d4 <__adddf3>
 80026ce:	e033      	b.n	8002738 <__kernel_sin+0x130>
 80026d0:	2200      	movs	r2, #0
 80026d2:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <__kernel_sin+0x148>)
 80026d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80026d8:	f7fd ff2e 	bl	8000538 <__aeabi_dmul>
 80026dc:	4632      	mov	r2, r6
 80026de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026e2:	463b      	mov	r3, r7
 80026e4:	4640      	mov	r0, r8
 80026e6:	4649      	mov	r1, r9
 80026e8:	f7fd ff26 	bl	8000538 <__aeabi_dmul>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80026f4:	f7fd fd6c 	bl	80001d0 <__aeabi_dsub>
 80026f8:	4652      	mov	r2, sl
 80026fa:	465b      	mov	r3, fp
 80026fc:	f7fd ff1c 	bl	8000538 <__aeabi_dmul>
 8002700:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002704:	f7fd fd64 	bl	80001d0 <__aeabi_dsub>
 8002708:	a30f      	add	r3, pc, #60	; (adr r3, 8002748 <__kernel_sin+0x140>)
 800270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270e:	4606      	mov	r6, r0
 8002710:	460f      	mov	r7, r1
 8002712:	4640      	mov	r0, r8
 8002714:	4649      	mov	r1, r9
 8002716:	f7fd ff0f 	bl	8000538 <__aeabi_dmul>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4630      	mov	r0, r6
 8002720:	4639      	mov	r1, r7
 8002722:	f7fd fd57 	bl	80001d4 <__adddf3>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4620      	mov	r0, r4
 800272c:	4629      	mov	r1, r5
 800272e:	f7fd fd4f 	bl	80001d0 <__aeabi_dsub>
 8002732:	e001      	b.n	8002738 <__kernel_sin+0x130>
 8002734:	4620      	mov	r0, r4
 8002736:	4629      	mov	r1, r5
 8002738:	ec41 0b10 	vmov	d0, r0, r1
 800273c:	b005      	add	sp, #20
 800273e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002742:	bf00      	nop
 8002744:	f3af 8000 	nop.w
 8002748:	55555549 	.word	0x55555549
 800274c:	3fc55555 	.word	0x3fc55555
 8002750:	3fe00000 	.word	0x3fe00000
 8002754:	5acfd57c 	.word	0x5acfd57c
 8002758:	3de5d93a 	.word	0x3de5d93a
 800275c:	8a2b9ceb 	.word	0x8a2b9ceb
 8002760:	3e5ae5e6 	.word	0x3e5ae5e6
 8002764:	57b1fe7d 	.word	0x57b1fe7d
 8002768:	3ec71de3 	.word	0x3ec71de3
 800276c:	19c161d5 	.word	0x19c161d5
 8002770:	3f2a01a0 	.word	0x3f2a01a0
 8002774:	1110f8a6 	.word	0x1110f8a6
 8002778:	3f811111 	.word	0x3f811111

0800277c <fabs>:
 800277c:	ec53 2b10 	vmov	r2, r3, d0
 8002780:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002784:	ec43 2b10 	vmov	d0, r2, r3
 8002788:	4770      	bx	lr
 800278a:	0000      	movs	r0, r0
 800278c:	0000      	movs	r0, r0
	...

08002790 <floor>:
 8002790:	ec51 0b10 	vmov	r0, r1, d0
 8002794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002798:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800279c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80027a0:	2e13      	cmp	r6, #19
 80027a2:	ee10 8a10 	vmov	r8, s0
 80027a6:	460c      	mov	r4, r1
 80027a8:	ee10 5a10 	vmov	r5, s0
 80027ac:	dc33      	bgt.n	8002816 <floor+0x86>
 80027ae:	2e00      	cmp	r6, #0
 80027b0:	da16      	bge.n	80027e0 <floor+0x50>
 80027b2:	a335      	add	r3, pc, #212	; (adr r3, 8002888 <floor+0xf8>)
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	f7fd fd0c 	bl	80001d4 <__adddf3>
 80027bc:	2200      	movs	r2, #0
 80027be:	2300      	movs	r3, #0
 80027c0:	f7fe f94a 	bl	8000a58 <__aeabi_dcmpgt>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d057      	beq.n	8002878 <floor+0xe8>
 80027c8:	2c00      	cmp	r4, #0
 80027ca:	da53      	bge.n	8002874 <floor+0xe4>
 80027cc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80027d0:	ea53 0308 	orrs.w	r3, r3, r8
 80027d4:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <floor+0x100>)
 80027d6:	f04f 0500 	mov.w	r5, #0
 80027da:	bf18      	it	ne
 80027dc:	461c      	movne	r4, r3
 80027de:	e04b      	b.n	8002878 <floor+0xe8>
 80027e0:	4f2c      	ldr	r7, [pc, #176]	; (8002894 <floor+0x104>)
 80027e2:	4137      	asrs	r7, r6
 80027e4:	ea01 0307 	and.w	r3, r1, r7
 80027e8:	4303      	orrs	r3, r0
 80027ea:	d047      	beq.n	800287c <floor+0xec>
 80027ec:	a326      	add	r3, pc, #152	; (adr r3, 8002888 <floor+0xf8>)
 80027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f2:	f7fd fcef 	bl	80001d4 <__adddf3>
 80027f6:	2200      	movs	r2, #0
 80027f8:	2300      	movs	r3, #0
 80027fa:	f7fe f92d 	bl	8000a58 <__aeabi_dcmpgt>
 80027fe:	b3d8      	cbz	r0, 8002878 <floor+0xe8>
 8002800:	2c00      	cmp	r4, #0
 8002802:	bfbe      	ittt	lt
 8002804:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8002808:	fa43 f606 	asrlt.w	r6, r3, r6
 800280c:	19a4      	addlt	r4, r4, r6
 800280e:	ea24 0407 	bic.w	r4, r4, r7
 8002812:	2500      	movs	r5, #0
 8002814:	e030      	b.n	8002878 <floor+0xe8>
 8002816:	2e33      	cmp	r6, #51	; 0x33
 8002818:	dd08      	ble.n	800282c <floor+0x9c>
 800281a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800281e:	d12d      	bne.n	800287c <floor+0xec>
 8002820:	ee10 2a10 	vmov	r2, s0
 8002824:	460b      	mov	r3, r1
 8002826:	f7fd fcd5 	bl	80001d4 <__adddf3>
 800282a:	e027      	b.n	800287c <floor+0xec>
 800282c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8002830:	f04f 33ff 	mov.w	r3, #4294967295
 8002834:	fa23 f707 	lsr.w	r7, r3, r7
 8002838:	4238      	tst	r0, r7
 800283a:	d01f      	beq.n	800287c <floor+0xec>
 800283c:	a312      	add	r3, pc, #72	; (adr r3, 8002888 <floor+0xf8>)
 800283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002842:	f7fd fcc7 	bl	80001d4 <__adddf3>
 8002846:	2200      	movs	r2, #0
 8002848:	2300      	movs	r3, #0
 800284a:	f7fe f905 	bl	8000a58 <__aeabi_dcmpgt>
 800284e:	b198      	cbz	r0, 8002878 <floor+0xe8>
 8002850:	2c00      	cmp	r4, #0
 8002852:	da0c      	bge.n	800286e <floor+0xde>
 8002854:	2e14      	cmp	r6, #20
 8002856:	d101      	bne.n	800285c <floor+0xcc>
 8002858:	3401      	adds	r4, #1
 800285a:	e008      	b.n	800286e <floor+0xde>
 800285c:	2301      	movs	r3, #1
 800285e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8002862:	fa03 f606 	lsl.w	r6, r3, r6
 8002866:	4435      	add	r5, r6
 8002868:	45a8      	cmp	r8, r5
 800286a:	bf88      	it	hi
 800286c:	18e4      	addhi	r4, r4, r3
 800286e:	ea25 0507 	bic.w	r5, r5, r7
 8002872:	e001      	b.n	8002878 <floor+0xe8>
 8002874:	2500      	movs	r5, #0
 8002876:	462c      	mov	r4, r5
 8002878:	4621      	mov	r1, r4
 800287a:	4628      	mov	r0, r5
 800287c:	ec41 0b10 	vmov	d0, r0, r1
 8002880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002884:	f3af 8000 	nop.w
 8002888:	8800759c 	.word	0x8800759c
 800288c:	7e37e43c 	.word	0x7e37e43c
 8002890:	bff00000 	.word	0xbff00000
 8002894:	000fffff 	.word	0x000fffff

08002898 <scalbn>:
 8002898:	b570      	push	{r4, r5, r6, lr}
 800289a:	ec55 4b10 	vmov	r4, r5, d0
 800289e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80028a2:	4606      	mov	r6, r0
 80028a4:	462b      	mov	r3, r5
 80028a6:	b9a2      	cbnz	r2, 80028d2 <scalbn+0x3a>
 80028a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80028ac:	4323      	orrs	r3, r4
 80028ae:	d059      	beq.n	8002964 <scalbn+0xcc>
 80028b0:	2200      	movs	r2, #0
 80028b2:	4b33      	ldr	r3, [pc, #204]	; (8002980 <scalbn+0xe8>)
 80028b4:	4629      	mov	r1, r5
 80028b6:	ee10 0a10 	vmov	r0, s0
 80028ba:	f7fd fe3d 	bl	8000538 <__aeabi_dmul>
 80028be:	4a31      	ldr	r2, [pc, #196]	; (8002984 <scalbn+0xec>)
 80028c0:	4296      	cmp	r6, r2
 80028c2:	4604      	mov	r4, r0
 80028c4:	460d      	mov	r5, r1
 80028c6:	460b      	mov	r3, r1
 80028c8:	da0f      	bge.n	80028ea <scalbn+0x52>
 80028ca:	a329      	add	r3, pc, #164	; (adr r3, 8002970 <scalbn+0xd8>)
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	e045      	b.n	800295e <scalbn+0xc6>
 80028d2:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80028d6:	428a      	cmp	r2, r1
 80028d8:	d10a      	bne.n	80028f0 <scalbn+0x58>
 80028da:	ee10 2a10 	vmov	r2, s0
 80028de:	462b      	mov	r3, r5
 80028e0:	4620      	mov	r0, r4
 80028e2:	4629      	mov	r1, r5
 80028e4:	f7fd fc76 	bl	80001d4 <__adddf3>
 80028e8:	e03e      	b.n	8002968 <scalbn+0xd0>
 80028ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80028ee:	3a36      	subs	r2, #54	; 0x36
 80028f0:	4432      	add	r2, r6
 80028f2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80028f6:	428a      	cmp	r2, r1
 80028f8:	dd02      	ble.n	8002900 <scalbn+0x68>
 80028fa:	ec45 4b11 	vmov	d1, r4, r5
 80028fe:	e011      	b.n	8002924 <scalbn+0x8c>
 8002900:	2a00      	cmp	r2, #0
 8002902:	dd06      	ble.n	8002912 <scalbn+0x7a>
 8002904:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002908:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800290c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002910:	e028      	b.n	8002964 <scalbn+0xcc>
 8002912:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8002916:	da17      	bge.n	8002948 <scalbn+0xb0>
 8002918:	f24c 3350 	movw	r3, #50000	; 0xc350
 800291c:	429e      	cmp	r6, r3
 800291e:	ec45 4b11 	vmov	d1, r4, r5
 8002922:	dd07      	ble.n	8002934 <scalbn+0x9c>
 8002924:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8002978 <scalbn+0xe0>
 8002928:	f000 f830 	bl	800298c <copysign>
 800292c:	a312      	add	r3, pc, #72	; (adr r3, 8002978 <scalbn+0xe0>)
 800292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002932:	e006      	b.n	8002942 <scalbn+0xaa>
 8002934:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002970 <scalbn+0xd8>
 8002938:	f000 f828 	bl	800298c <copysign>
 800293c:	a30c      	add	r3, pc, #48	; (adr r3, 8002970 <scalbn+0xd8>)
 800293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002942:	ec51 0b10 	vmov	r0, r1, d0
 8002946:	e00a      	b.n	800295e <scalbn+0xc6>
 8002948:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800294c:	3236      	adds	r2, #54	; 0x36
 800294e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002952:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <scalbn+0xf0>)
 8002958:	4620      	mov	r0, r4
 800295a:	4629      	mov	r1, r5
 800295c:	2200      	movs	r2, #0
 800295e:	f7fd fdeb 	bl	8000538 <__aeabi_dmul>
 8002962:	e001      	b.n	8002968 <scalbn+0xd0>
 8002964:	4620      	mov	r0, r4
 8002966:	4629      	mov	r1, r5
 8002968:	ec41 0b10 	vmov	d0, r0, r1
 800296c:	bd70      	pop	{r4, r5, r6, pc}
 800296e:	bf00      	nop
 8002970:	c2f8f359 	.word	0xc2f8f359
 8002974:	01a56e1f 	.word	0x01a56e1f
 8002978:	8800759c 	.word	0x8800759c
 800297c:	7e37e43c 	.word	0x7e37e43c
 8002980:	43500000 	.word	0x43500000
 8002984:	ffff3cb0 	.word	0xffff3cb0
 8002988:	3c900000 	.word	0x3c900000

0800298c <copysign>:
 800298c:	ec53 2b10 	vmov	r2, r3, d0
 8002990:	ee11 0a90 	vmov	r0, s3
 8002994:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002998:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800299c:	ea41 0300 	orr.w	r3, r1, r0
 80029a0:	ec43 2b10 	vmov	d0, r2, r3
 80029a4:	4770      	bx	lr
	...

080029a8 <_init>:
 80029a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029aa:	bf00      	nop
 80029ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ae:	bc08      	pop	{r3}
 80029b0:	469e      	mov	lr, r3
 80029b2:	4770      	bx	lr

080029b4 <_fini>:
 80029b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b6:	bf00      	nop
 80029b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ba:	bc08      	pop	{r3}
 80029bc:	469e      	mov	lr, r3
 80029be:	4770      	bx	lr
