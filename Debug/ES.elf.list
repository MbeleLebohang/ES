
ES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001140  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080012c8  080012c8  000112c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080012e0  080012e0  000112e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080012e4  080012e4  000112e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000030  20000000  080012e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020030  2**0
                  CONTENTS
  7 .bss          000000a0  20000030  20000030  00020030  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000d0  200000d0  00020030  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 10 .debug_info   000085e7  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000013e8  00000000  00000000  00028647  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b20  00000000  00000000  00029a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a48  00000000  00000000  0002a550  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003752  00000000  00000000  0002af98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003762  00000000  00000000  0002e6ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00031e4c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002fd8  00000000  00000000  00031ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00034ea4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080012b0 	.word	0x080012b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	080012b0 	.word	0x080012b0

080001c8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <NVIC_PriorityGroupConfig+0x24>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001dc:	60d3      	str	r3, [r2, #12]
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
 80001fc:	2300      	movs	r3, #0
 80001fe:	73bb      	strb	r3, [r7, #14]
 8000200:	230f      	movs	r3, #15
 8000202:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	78db      	ldrb	r3, [r3, #3]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d038      	beq.n	800027e <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800020c:	4b27      	ldr	r3, [pc, #156]	; (80002ac <NVIC_Init+0xbc>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	43db      	mvns	r3, r3
 8000212:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000216:	0a1b      	lsrs	r3, r3, #8
 8000218:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800021a:	7bfb      	ldrb	r3, [r7, #15]
 800021c:	f1c3 0304 	rsb	r3, r3, #4
 8000220:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000222:	7b7a      	ldrb	r2, [r7, #13]
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	fa42 f303 	asr.w	r3, r2, r3
 800022a:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	785b      	ldrb	r3, [r3, #1]
 8000230:	461a      	mov	r2, r3
 8000232:	7bbb      	ldrb	r3, [r7, #14]
 8000234:	fa02 f303 	lsl.w	r3, r2, r3
 8000238:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	789a      	ldrb	r2, [r3, #2]
 800023e:	7b7b      	ldrb	r3, [r7, #13]
 8000240:	4013      	ands	r3, r2
 8000242:	b2da      	uxtb	r2, r3
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	4313      	orrs	r3, r2
 8000248:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	011b      	lsls	r3, r3, #4
 800024e:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000250:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <NVIC_Init+0xc0>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	4413      	add	r3, r2
 8000258:	7bfa      	ldrb	r2, [r7, #15]
 800025a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800025e:	4a14      	ldr	r2, [pc, #80]	; (80002b0 <NVIC_Init+0xc0>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	095b      	lsrs	r3, r3, #5
 8000266:	b2db      	uxtb	r3, r3
 8000268:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	f003 031f 	and.w	r3, r3, #31
 8000272:	2101      	movs	r1, #1
 8000274:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000278:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800027c:	e00f      	b.n	800029e <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027e:	490c      	ldr	r1, [pc, #48]	; (80002b0 <NVIC_Init+0xc0>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	095b      	lsrs	r3, r3, #5
 8000286:	b2db      	uxtb	r3, r3
 8000288:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	f003 031f 	and.w	r3, r3, #31
 8000292:	2201      	movs	r2, #1
 8000294:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000296:	f100 0320 	add.w	r3, r0, #32
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	e000ed00 	.word	0xe000ed00
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	460b      	mov	r3, r1
 80002be:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <DAC_SetChannel1Data+0x34>)
 80002c6:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4413      	add	r3, r2
 80002ce:	3308      	adds	r3, #8
 80002d0:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	461a      	mov	r2, r3
 80002d6:	887b      	ldrh	r3, [r7, #2]
 80002d8:	6013      	str	r3, [r2, #0]
}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40007400 	.word	0x40007400

080002ec <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	4b25      	ldr	r3, [pc, #148]	; (8000398 <DMA_Init+0xac>)
 8000304:	4013      	ands	r3, r2
 8000306:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000316:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000322:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	6a1b      	ldr	r3, [r3, #32]
 8000328:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800032e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000334:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800033a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000340:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000342:	68fa      	ldr	r2, [r7, #12]
 8000344:	4313      	orrs	r3, r2
 8000346:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	68fa      	ldr	r2, [r7, #12]
 800034c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 0307 	bic.w	r3, r3, #7
 800035a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4313      	orrs	r3, r2
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	4313      	orrs	r3, r2
 800036a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	691a      	ldr	r2, [r3, #16]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	689a      	ldr	r2, [r3, #8]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	60da      	str	r2, [r3, #12]
}
 800038a:	bf00      	nop
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	f01c803f 	.word	0xf01c803f

0800039c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d006      	beq.n	80003bc <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f043 0201 	orr.w	r2, r3, #1
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80003ba:	e005      	b.n	80003c8 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 0201 	bic.w	r2, r3, #1
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	601a      	str	r2, [r3, #0]
  }
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr

080003d4 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80003dc:	2300      	movs	r3, #0
 80003de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f003 0301 	and.w	r3, r3, #1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d002      	beq.n	80003f2 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80003ec:	2301      	movs	r3, #1
 80003ee:	73fb      	strb	r3, [r7, #15]
 80003f0:	e001      	b.n	80003f6 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80003f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000404:	b480      	push	{r7}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800040e:	2300      	movs	r3, #0
 8000410:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a15      	ldr	r2, [pc, #84]	; (8000470 <DMA_GetFlagStatus+0x6c>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d802      	bhi.n	8000424 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <DMA_GetFlagStatus+0x70>)
 8000420:	613b      	str	r3, [r7, #16]
 8000422:	e001      	b.n	8000428 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <DMA_GetFlagStatus+0x74>)
 8000426:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800042e:	2b00      	cmp	r3, #0
 8000430:	d003      	beq.n	800043a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	e002      	b.n	8000440 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800043a:	693b      	ldr	r3, [r7, #16]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000446:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800044a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	4013      	ands	r3, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	d002      	beq.n	800045c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000456:	2301      	movs	r3, #1
 8000458:	75fb      	strb	r3, [r7, #23]
 800045a:	e001      	b.n	8000460 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800045c:	2300      	movs	r3, #0
 800045e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000460:	7dfb      	ldrb	r3, [r7, #23]
}
 8000462:	4618      	mov	r0, r3
 8000464:	371c      	adds	r7, #28
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	4002640f 	.word	0x4002640f
 8000474:	40026000 	.word	0x40026000
 8000478:	40026400 	.word	0x40026400

0800047c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a10      	ldr	r2, [pc, #64]	; (80004cc <DMA_ClearFlag+0x50>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d802      	bhi.n	8000494 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <DMA_ClearFlag+0x54>)
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	e001      	b.n	8000498 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <DMA_ClearFlag+0x58>)
 8000496:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d007      	beq.n	80004b2 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80004a8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80004ac:	68fa      	ldr	r2, [r7, #12]
 80004ae:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80004b0:	e006      	b.n	80004c0 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80004b8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80004bc:	68fa      	ldr	r2, [r7, #12]
 80004be:	6093      	str	r3, [r2, #8]
  }    
}
 80004c0:	bf00      	nop
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	4002640f 	.word	0x4002640f
 80004d0:	40026000 	.word	0x40026000
 80004d4:	40026400 	.word	0x40026400

080004d8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004d8:	b480      	push	{r7}
 80004da:	b087      	sub	sp, #28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004ee:	2300      	movs	r3, #0
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	e076      	b.n	80005e2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004f4:	2201      	movs	r2, #1
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	fa02 f303 	lsl.w	r3, r2, r3
 80004fc:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	693b      	ldr	r3, [r7, #16]
 8000504:	4013      	ands	r3, r2
 8000506:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	693b      	ldr	r3, [r7, #16]
 800050c:	429a      	cmp	r2, r3
 800050e:	d165      	bne.n	80005dc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	2103      	movs	r1, #3
 800051a:	fa01 f303 	lsl.w	r3, r1, r3
 800051e:	43db      	mvns	r3, r3
 8000520:	401a      	ands	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	791b      	ldrb	r3, [r3, #4]
 800052e:	4619      	mov	r1, r3
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	431a      	orrs	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	791b      	ldrb	r3, [r3, #4]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d003      	beq.n	800054e <GPIO_Init+0x76>
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	791b      	ldrb	r3, [r3, #4]
 800054a:	2b02      	cmp	r3, #2
 800054c:	d12e      	bne.n	80005ac <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	689a      	ldr	r2, [r3, #8]
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	2103      	movs	r1, #3
 8000558:	fa01 f303 	lsl.w	r3, r1, r3
 800055c:	43db      	mvns	r3, r3
 800055e:	401a      	ands	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	689a      	ldr	r2, [r3, #8]
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	795b      	ldrb	r3, [r3, #5]
 800056c:	4619      	mov	r1, r3
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	fa01 f303 	lsl.w	r3, r1, r3
 8000576:	431a      	orrs	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	685a      	ldr	r2, [r3, #4]
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	b29b      	uxth	r3, r3
 8000584:	2101      	movs	r1, #1
 8000586:	fa01 f303 	lsl.w	r3, r1, r3
 800058a:	43db      	mvns	r3, r3
 800058c:	401a      	ands	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	685a      	ldr	r2, [r3, #4]
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	799b      	ldrb	r3, [r3, #6]
 800059a:	4619      	mov	r1, r3
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	fa01 f303 	lsl.w	r3, r1, r3
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	431a      	orrs	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	68da      	ldr	r2, [r3, #12]
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	2103      	movs	r1, #3
 80005b8:	fa01 f303 	lsl.w	r3, r1, r3
 80005bc:	43db      	mvns	r3, r3
 80005be:	401a      	ands	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68da      	ldr	r2, [r3, #12]
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	79db      	ldrb	r3, [r3, #7]
 80005cc:	4619      	mov	r1, r3
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	fa01 f303 	lsl.w	r3, r1, r3
 80005d6:	431a      	orrs	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	3301      	adds	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d985      	bls.n	80004f4 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80005e8:	bf00      	nop
 80005ea:	371c      	adds	r7, #28
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	807b      	strh	r3, [r7, #2]
 8000600:	4613      	mov	r3, r2
 8000602:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800060c:	787a      	ldrb	r2, [r7, #1]
 800060e:	887b      	ldrh	r3, [r7, #2]
 8000610:	f003 0307 	and.w	r3, r3, #7
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	fa02 f303 	lsl.w	r3, r2, r3
 800061a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800061c:	887b      	ldrh	r3, [r7, #2]
 800061e:	08db      	lsrs	r3, r3, #3
 8000620:	b29b      	uxth	r3, r3
 8000622:	4618      	mov	r0, r3
 8000624:	887b      	ldrh	r3, [r7, #2]
 8000626:	08db      	lsrs	r3, r3, #3
 8000628:	b29b      	uxth	r3, r3
 800062a:	461a      	mov	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3208      	adds	r2, #8
 8000630:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000634:	887b      	ldrh	r3, [r7, #2]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	210f      	movs	r1, #15
 800063e:	fa01 f303 	lsl.w	r3, r1, r3
 8000642:	43db      	mvns	r3, r3
 8000644:	ea02 0103 	and.w	r1, r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f100 0208 	add.w	r2, r0, #8
 800064e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000652:	887b      	ldrh	r3, [r7, #2]
 8000654:	08db      	lsrs	r3, r3, #3
 8000656:	b29b      	uxth	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3208      	adds	r2, #8
 800065e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4313      	orrs	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000668:	887b      	ldrh	r3, [r7, #2]
 800066a:	08db      	lsrs	r3, r3, #3
 800066c:	b29b      	uxth	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3208      	adds	r2, #8
 8000674:	68b9      	ldr	r1, [r7, #8]
 8000676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800067a:	bf00      	nop
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000688:	b480      	push	{r7}
 800068a:	b089      	sub	sp, #36	; 0x24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	2302      	movs	r3, #2
 80006a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80006a8:	4b48      	ldr	r3, [pc, #288]	; (80007cc <RCC_GetClocksFreq+0x144>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	f003 030c 	and.w	r3, r3, #12
 80006b0:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	2b04      	cmp	r3, #4
 80006b6:	d007      	beq.n	80006c8 <RCC_GetClocksFreq+0x40>
 80006b8:	2b08      	cmp	r3, #8
 80006ba:	d009      	beq.n	80006d0 <RCC_GetClocksFreq+0x48>
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d13f      	bne.n	8000740 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a43      	ldr	r2, [pc, #268]	; (80007d0 <RCC_GetClocksFreq+0x148>)
 80006c4:	601a      	str	r2, [r3, #0]
      break;
 80006c6:	e03f      	b.n	8000748 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a42      	ldr	r2, [pc, #264]	; (80007d4 <RCC_GetClocksFreq+0x14c>)
 80006cc:	601a      	str	r2, [r3, #0]
      break;
 80006ce:	e03b      	b.n	8000748 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006d0:	4b3e      	ldr	r3, [pc, #248]	; (80007cc <RCC_GetClocksFreq+0x144>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006d8:	0d9b      	lsrs	r3, r3, #22
 80006da:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006dc:	4b3b      	ldr	r3, [pc, #236]	; (80007cc <RCC_GetClocksFreq+0x144>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006e4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d00d      	beq.n	8000708 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006ec:	4a39      	ldr	r2, [pc, #228]	; (80007d4 <RCC_GetClocksFreq+0x14c>)
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80006f4:	4b35      	ldr	r3, [pc, #212]	; (80007cc <RCC_GetClocksFreq+0x144>)
 80006f6:	6859      	ldr	r1, [r3, #4]
 80006f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80006fc:	400b      	ands	r3, r1
 80006fe:	099b      	lsrs	r3, r3, #6
 8000700:	fb03 f302 	mul.w	r3, r3, r2
 8000704:	61fb      	str	r3, [r7, #28]
 8000706:	e00c      	b.n	8000722 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000708:	4a31      	ldr	r2, [pc, #196]	; (80007d0 <RCC_GetClocksFreq+0x148>)
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000710:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <RCC_GetClocksFreq+0x144>)
 8000712:	6859      	ldr	r1, [r3, #4]
 8000714:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000718:	400b      	ands	r3, r1
 800071a:	099b      	lsrs	r3, r3, #6
 800071c:	fb03 f302 	mul.w	r3, r3, r2
 8000720:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <RCC_GetClocksFreq+0x144>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800072a:	0c1b      	lsrs	r3, r3, #16
 800072c:	3301      	adds	r3, #1
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000732:	69fa      	ldr	r2, [r7, #28]
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	fbb2 f2f3 	udiv	r2, r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	601a      	str	r2, [r3, #0]
      break;
 800073e:	e003      	b.n	8000748 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a23      	ldr	r2, [pc, #140]	; (80007d0 <RCC_GetClocksFreq+0x148>)
 8000744:	601a      	str	r2, [r3, #0]
      break;
 8000746:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000748:	4b20      	ldr	r3, [pc, #128]	; (80007cc <RCC_GetClocksFreq+0x144>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000750:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	091b      	lsrs	r3, r3, #4
 8000756:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000758:	4a1f      	ldr	r2, [pc, #124]	; (80007d8 <RCC_GetClocksFreq+0x150>)
 800075a:	69bb      	ldr	r3, [r7, #24]
 800075c:	4413      	add	r3, r2
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	40da      	lsrs	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <RCC_GetClocksFreq+0x144>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000778:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	0a9b      	lsrs	r3, r3, #10
 800077e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000780:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <RCC_GetClocksFreq+0x150>)
 8000782:	69bb      	ldr	r3, [r7, #24]
 8000784:	4413      	add	r3, r2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	685a      	ldr	r2, [r3, #4]
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	40da      	lsrs	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <RCC_GetClocksFreq+0x144>)
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80007a0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	0b5b      	lsrs	r3, r3, #13
 80007a6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80007a8:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <RCC_GetClocksFreq+0x150>)
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	685a      	ldr	r2, [r3, #4]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	40da      	lsrs	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]
}
 80007c0:	bf00      	nop
 80007c2:	3724      	adds	r7, #36	; 0x24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	40023800 	.word	0x40023800
 80007d0:	00f42400 	.word	0x00f42400
 80007d4:	007a1200 	.word	0x007a1200
 80007d8:	20000000 	.word	0x20000000

080007dc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d006      	beq.n	80007fc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80007ee:	490a      	ldr	r1, [pc, #40]	; (8000818 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80007fa:	e006      	b.n	800080a <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80007fc:	4906      	ldr	r1, [pc, #24]	; (8000818 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	43db      	mvns	r3, r3
 8000806:	4013      	ands	r3, r2
 8000808:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d006      	beq.n	800083c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800082e:	490a      	ldr	r1, [pc, #40]	; (8000858 <RCC_APB1PeriphClockCmd+0x3c>)
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <RCC_APB1PeriphClockCmd+0x3c>)
 8000832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4313      	orrs	r3, r2
 8000838:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800083a:	e006      	b.n	800084a <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800083c:	4906      	ldr	r1, [pc, #24]	; (8000858 <RCC_APB1PeriphClockCmd+0x3c>)
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <RCC_APB1PeriphClockCmd+0x3c>)
 8000840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	43db      	mvns	r3, r3
 8000846:	4013      	ands	r3, r2
 8000848:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000868:	78fb      	ldrb	r3, [r7, #3]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d006      	beq.n	800087c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800086e:	490a      	ldr	r1, [pc, #40]	; (8000898 <RCC_APB2PeriphClockCmd+0x3c>)
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <RCC_APB2PeriphClockCmd+0x3c>)
 8000872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4313      	orrs	r3, r2
 8000878:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800087a:	e006      	b.n	800088a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <RCC_APB2PeriphClockCmd+0x3c>)
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <RCC_APB2PeriphClockCmd+0x3c>)
 8000880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	43db      	mvns	r3, r3
 8000886:	4013      	ands	r3, r2
 8000888:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	887a      	ldrh	r2, [r7, #2]
 80008ac:	819a      	strh	r2, [r3, #12]
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	891b      	ldrh	r3, [r3, #8]
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	887b      	ldrh	r3, [r7, #2]
 80008d4:	4013      	ands	r3, r2
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d002      	beq.n	80008e2 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80008dc:	2301      	movs	r3, #1
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	e001      	b.n	80008e6 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000904:	2300      	movs	r3, #0
 8000906:	81bb      	strh	r3, [r7, #12]
 8000908:	2300      	movs	r3, #0
 800090a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	8a1b      	ldrh	r3, [r3, #16]
 8000910:	b29a      	uxth	r2, r3
 8000912:	887b      	ldrh	r3, [r7, #2]
 8000914:	4013      	ands	r3, r2
 8000916:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	899b      	ldrh	r3, [r3, #12]
 800091c:	b29a      	uxth	r2, r3
 800091e:	887b      	ldrh	r3, [r7, #2]
 8000920:	4013      	ands	r3, r2
 8000922:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000924:	89bb      	ldrh	r3, [r7, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d005      	beq.n	8000936 <TIM_GetITStatus+0x42>
 800092a:	897b      	ldrh	r3, [r7, #10]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d002      	beq.n	8000936 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000930:	2301      	movs	r3, #1
 8000932:	73fb      	strb	r3, [r7, #15]
 8000934:	e001      	b.n	800093a <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000936:	2300      	movs	r3, #0
 8000938:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800093a:	7bfb      	ldrb	r3, [r7, #15]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000954:	887b      	ldrh	r3, [r7, #2]
 8000956:	43db      	mvns	r3, r3
 8000958:	b29a      	uxth	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	821a      	strh	r2, [r3, #16]
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	8a1b      	ldrh	r3, [r3, #16]
 800098a:	b29b      	uxth	r3, r3
 800098c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000994:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	88db      	ldrh	r3, [r3, #6]
 800099a:	461a      	mov	r2, r3
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	4313      	orrs	r3, r2
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	899b      	ldrh	r3, [r3, #12]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80009b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80009b8:	f023 030c 	bic.w	r3, r3, #12
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	889a      	ldrh	r2, [r3, #4]
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	891b      	ldrh	r3, [r3, #8]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80009ce:	4313      	orrs	r3, r2
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	461a      	mov	r2, r3
 80009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d6:	4313      	orrs	r3, r2
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	b29a      	uxth	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	8a9b      	ldrh	r3, [r3, #20]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	899b      	ldrh	r3, [r3, #12]
 80009f6:	461a      	mov	r2, r3
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	4313      	orrs	r3, r2
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fe3c 	bl	8000688 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a30      	ldr	r2, [pc, #192]	; (8000ad4 <USART_Init+0x168>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d003      	beq.n	8000a20 <USART_Init+0xb4>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a2f      	ldr	r2, [pc, #188]	; (8000ad8 <USART_Init+0x16c>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d102      	bne.n	8000a26 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	623b      	str	r3, [r7, #32]
 8000a24:	e001      	b.n	8000a2a <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	899b      	ldrh	r3, [r3, #12]
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	da0c      	bge.n	8000a50 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000a36:	6a3a      	ldr	r2, [r7, #32]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4413      	add	r3, r2
 8000a3e:	009a      	lsls	r2, r3, #2
 8000a40:	441a      	add	r2, r3
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4c:	61fb      	str	r3, [r7, #28]
 8000a4e:	e00b      	b.n	8000a68 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000a50:	6a3a      	ldr	r2, [r7, #32]
 8000a52:	4613      	mov	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4413      	add	r3, r2
 8000a58:	009a      	lsls	r2, r3, #2
 8000a5a:	441a      	add	r2, r3
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a66:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <USART_Init+0x170>)
 8000a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a70:	095b      	lsrs	r3, r3, #5
 8000a72:	011b      	lsls	r3, r3, #4
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	091b      	lsrs	r3, r3, #4
 8000a7a:	2264      	movs	r2, #100	; 0x64
 8000a7c:	fb02 f303 	mul.w	r3, r2, r3
 8000a80:	69fa      	ldr	r2, [r7, #28]
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	899b      	ldrh	r3, [r3, #12]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	b21b      	sxth	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	da0c      	bge.n	8000aac <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	3332      	adds	r3, #50	; 0x32
 8000a98:	4a10      	ldr	r2, [pc, #64]	; (8000adc <USART_Init+0x170>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	095b      	lsrs	r3, r3, #5
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aaa:	e00b      	b.n	8000ac4 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	011b      	lsls	r3, r3, #4
 8000ab0:	3332      	adds	r3, #50	; 0x32
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <USART_Init+0x170>)
 8000ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab8:	095b      	lsrs	r3, r3, #5
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	811a      	strh	r2, [r3, #8]
}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40011000 	.word	0x40011000
 8000ad8:	40011400 	.word	0x40011400
 8000adc:	51eb851f 	.word	0x51eb851f

08000ae0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d008      	beq.n	8000b04 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	899b      	ldrh	r3, [r3, #12]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000b02:	e007      	b.n	8000b14 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	899b      	ldrh	r3, [r3, #12]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	819a      	strh	r2, [r3, #12]
  }
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b2c:	78fb      	ldrb	r3, [r7, #3]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00a      	beq.n	8000b48 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	899b      	ldrh	r3, [r3, #12]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
 8000b46:	e007      	b.n	8000b58 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	899b      	ldrh	r3, [r3, #12]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	819a      	strh	r2, [r3, #12]
  }
}  
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	889b      	ldrh	r3, [r3, #4]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b76:	b29b      	uxth	r3, r3
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	807b      	strh	r3, [r7, #2]
 8000b90:	4613      	mov	r3, r2
 8000b92:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	095b      	lsrs	r3, r3, #5
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	f003 031f 	and.w	r3, r3, #31
 8000bb8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d103      	bne.n	8000bd2 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	330c      	adds	r3, #12
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e009      	b.n	8000be6 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d103      	bne.n	8000be0 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3310      	adds	r3, #16
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	e002      	b.n	8000be6 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	3314      	adds	r3, #20
 8000be4:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000be6:	787b      	ldrb	r3, [r7, #1]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d006      	beq.n	8000bfa <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	6811      	ldr	r1, [r2, #0]
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000bf8:	e006      	b.n	8000c08 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	697a      	ldr	r2, [r7, #20]
 8000bfe:	6811      	ldr	r1, [r2, #0]
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	43d2      	mvns	r2, r2
 8000c04:	400a      	ands	r2, r1
 8000c06:	601a      	str	r2, [r3, #0]
  }
}
 8000c08:	bf00      	nop
 8000c0a:	371c      	adds	r7, #28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <STM_EVAL_LEDInit+0x50>)
 8000c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c26:	2101      	movs	r1, #1
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fdd7 	bl	80007dc <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <STM_EVAL_LEDInit+0x54>)
 8000c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000c44:	2302      	movs	r3, #2
 8000c46:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <STM_EVAL_LEDInit+0x58>)
 8000c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c50:	f107 0208 	add.w	r2, r7, #8
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fc3e 	bl	80004d8 <GPIO_Init>
}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	080012d0 	.word	0x080012d0
 8000c68:	080012c8 	.word	0x080012c8
 8000c6c:	20000010 	.word	0x20000010

08000c70 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	4a09      	ldr	r2, [pc, #36]	; (8000ca4 <STM_EVAL_LEDToggle+0x34>)
 8000c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c82:	79fa      	ldrb	r2, [r7, #7]
 8000c84:	4907      	ldr	r1, [pc, #28]	; (8000ca4 <STM_EVAL_LEDToggle+0x34>)
 8000c86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c8a:	6952      	ldr	r2, [r2, #20]
 8000c8c:	79f9      	ldrb	r1, [r7, #7]
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <STM_EVAL_LEDToggle+0x38>)
 8000c90:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8000c94:	404a      	eors	r2, r1
 8000c96:	615a      	str	r2, [r3, #20]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	20000010 	.word	0x20000010
 8000ca8:	080012c8 	.word	0x080012c8

08000cac <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000cb0:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <Audio_MAL_IRQHandler+0xe4>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b37      	ldr	r3, [pc, #220]	; (8000d94 <Audio_MAL_IRQHandler+0xe8>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4610      	mov	r0, r2
 8000cbc:	f7ff fba2 	bl	8000404 <DMA_GetFlagStatus>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d062      	beq.n	8000d8c <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000cc6:	4b34      	ldr	r3, [pc, #208]	; (8000d98 <Audio_MAL_IRQHandler+0xec>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d04a      	beq.n	8000d64 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000cce:	bf00      	nop
 8000cd0:	4b2f      	ldr	r3, [pc, #188]	; (8000d90 <Audio_MAL_IRQHandler+0xe4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fb7d 	bl	80003d4 <DMA_GetCmdStatus>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f7      	bne.n	8000cd0 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <Audio_MAL_IRQHandler+0xe4>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <Audio_MAL_IRQHandler+0xe8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4610      	mov	r0, r2
 8000cec:	f7ff fbc6 	bl	800047c <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <Audio_MAL_IRQHandler+0xf0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <Audio_MAL_IRQHandler+0xf4>)
 8000cf8:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <Audio_MAL_IRQHandler+0xec>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d02:	4293      	cmp	r3, r2
 8000d04:	bf28      	it	cs
 8000d06:	4613      	movcs	r3, r2
 8000d08:	4a25      	ldr	r2, [pc, #148]	; (8000da0 <Audio_MAL_IRQHandler+0xf4>)
 8000d0a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000d0c:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <Audio_MAL_IRQHandler+0xe4>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4923      	ldr	r1, [pc, #140]	; (8000da0 <Audio_MAL_IRQHandler+0xf4>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff faea 	bl	80002ec <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <Audio_MAL_IRQHandler+0xe4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fb3c 	bl	800039c <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <Audio_MAL_IRQHandler+0xf0>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <Audio_MAL_IRQHandler+0xec>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d30:	428b      	cmp	r3, r1
 8000d32:	bf28      	it	cs
 8000d34:	460b      	movcs	r3, r1
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a18      	ldr	r2, [pc, #96]	; (8000d9c <Audio_MAL_IRQHandler+0xf0>)
 8000d3c:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <Audio_MAL_IRQHandler+0xec>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <Audio_MAL_IRQHandler+0xec>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	bf28      	it	cs
 8000d4e:	460b      	movcs	r3, r1
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	4a11      	ldr	r2, [pc, #68]	; (8000d98 <Audio_MAL_IRQHandler+0xec>)
 8000d54:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <Audio_MAL_IRQHandler+0xe4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fb1d 	bl	800039c <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000d62:	e013      	b.n	8000d8c <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <Audio_MAL_IRQHandler+0xe4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fb16 	bl	800039c <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <Audio_MAL_IRQHandler+0xe4>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <Audio_MAL_IRQHandler+0xe8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4610      	mov	r0, r2
 8000d7c:	f7ff fb7e 	bl	800047c <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <Audio_MAL_IRQHandler+0xf0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f942 	bl	8001010 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000028 	.word	0x20000028
 8000d94:	2000002c 	.word	0x2000002c
 8000d98:	20000020 	.word	0x20000020
 8000d9c:	2000004c 	.word	0x2000004c
 8000da0:	2000008c 	.word	0x2000008c

08000da4 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000da8:	f7ff ff80 	bl	8000cac <Audio_MAL_IRQHandler>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000db4:	f7ff ff7a 	bl	8000cac <Audio_MAL_IRQHandler>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <SPI3_IRQHandler+0x3c>)
 8000dc4:	f7ff fd7a 	bl	80008bc <SPI_I2S_GetFlagStatus>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d011      	beq.n	8000df2 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <SPI3_IRQHandler+0x40>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d106      	bne.n	8000de4 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000dd6:	f000 f927 	bl	8001028 <EVAL_AUDIO_GetSampleCallBack>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	2004      	movs	r0, #4
 8000de0:	f7ff fa68 	bl	80002b4 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000de4:	f000 f920 	bl	8001028 <EVAL_AUDIO_GetSampleCallBack>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4619      	mov	r1, r3
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <SPI3_IRQHandler+0x3c>)
 8000dee:	f7ff fd55 	bl	800089c <SPI_I2S_SendData>
  }
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40003c00 	.word	0x40003c00
 8000dfc:	20000024 	.word	0x20000024

08000e00 <TIM2_IRQHandler>:
**
**  Abstract: main program
**
**===========================================================================
*/
void TIM2_IRQHandler(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	/* Check if interrupt has occured */
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
 8000e04:	2101      	movs	r1, #1
 8000e06:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e0a:	f7ff fd73 	bl	80008f4 <TIM_GetITStatus>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d007      	beq.n	8000e24 <TIM2_IRQHandler+0x24>
	{
		/* Clear interrupt pending bit */
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000e14:	2101      	movs	r1, #1
 8000e16:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e1a:	f7ff fd95 	bl	8000948 <TIM_ClearITPendingBit>

		/* WHAT EVER YOU NEED TO DO IN THE INTERRUPT HANDLER GOES HERE */
		STM_EVAL_LEDToggle(LED3);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f7ff ff26 	bl	8000c70 <STM_EVAL_LEDToggle>
	}
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <main>:

int main(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /*MIDI Receiver*/
  RCC_Configuration();
 8000e2c:	f000 f80a 	bl	8000e44 <RCC_Configuration>

  NVIC_Configuration();
 8000e30:	f000 f81c 	bl	8000e6c <NVIC_Configuration>

  GPIO_Configuration();
 8000e34:	f000 f85c 	bl	8000ef0 <GPIO_Configuration>

  USARTx_Configuration();
 8000e38:	f000 f830 	bl	8000e9c <USARTx_Configuration>

  STM_EVAL_LEDInit(LED3);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff fee9 	bl	8000c14 <STM_EVAL_LEDInit>
  /* Infinite loop */
  while (1)
  {
  }
 8000e42:	e7fe      	b.n	8000e42 <main+0x1a>

08000e44 <RCC_Configuration>:
}

void RCC_Configuration(void){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	/* Initialize all the peripherals here. */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6 | RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2, ENABLE);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000e4e:	f7ff fd05 	bl	800085c <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_APB1Periph_DAC  | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOA, ENABLE);
 8000e52:	2101      	movs	r1, #1
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <RCC_Configuration+0x24>)
 8000e56:	f7ff fcc1 	bl	80007dc <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd( RCC_APB1Periph_TIM2 , ENABLE);
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff fcdd 	bl	800081c <RCC_APB1PeriphClockCmd>
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000005 	.word	0x20000005

08000e6c <NVIC_Configuration>:

/**
 * @Brief NVIC Configuration
 */

void NVIC_Configuration(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Configure the Priority Group to 2 bits */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8000e72:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000e76:	f7ff f9a7 	bl	80001c8 <NVIC_PriorityGroupConfig>

	/* Enable the USARTx Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
 8000e7a:	2347      	movs	r3, #71	; 0x47
 8000e7c:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000e86:	2301      	movs	r3, #1
 8000e88:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff f9af 	bl	80001f0 <NVIC_Init>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop

08000e9c <USARTx_Configuration>:
 *       - No parity																			 *
 *       - Hardware flow control disabled (RTS and CTS signals)									 *
 *       - Receive and transmit enabled															 *
 *************************************************************************************************/

void USARTx_Configuration(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0

	USART_InitTypeDef USART_InitStructure;

	/* Enable the USART OverSampling by 8 */
	USART_OverSampling8Cmd(USART6, ENABLE);
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4811      	ldr	r0, [pc, #68]	; (8000eec <USARTx_Configuration+0x50>)
 8000ea6:	f7ff fe3b 	bl	8000b20 <USART_OverSampling8Cmd>

	// USART6 configuration
	USART_InitStructure.USART_BaudRate = 31250;
 8000eaa:	f647 2312 	movw	r3, #31250	; 0x7a12
 8000eae:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	80fb      	strh	r3, [r7, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000ec0:	230c      	movs	r3, #12
 8000ec2:	817b      	strh	r3, [r7, #10]

	USART_Init(USART6, &USART_InitStructure);
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <USARTx_Configuration+0x50>)
 8000eca:	f7ff fd4f 	bl	800096c <USART_Init>

	//Enables USART 6 and receiver
	USART_Cmd(USART6, ENABLE);
 8000ece:	2101      	movs	r1, #1
 8000ed0:	4806      	ldr	r0, [pc, #24]	; (8000eec <USARTx_Configuration+0x50>)
 8000ed2:	f7ff fe05 	bl	8000ae0 <USART_Cmd>

	//Enable RXNE interrupt
	USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f240 5125 	movw	r1, #1317	; 0x525
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <USARTx_Configuration+0x50>)
 8000ede:	f7ff fe51 	bl	8000b84 <USART_ITConfig>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40011400 	.word	0x40011400

08000ef0 <GPIO_Configuration>:
}

/**
 * Initialize GPIO for pins to be used
 */
void GPIO_Configuration(void){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	//  PA4 and PA5 for DAC.
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AN;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType 	= GPIO_OType_PP;
 8000efa:	2300      	movs	r3, #0
 8000efc:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_5 | GPIO_Pin_4;
 8000efe:	2330      	movs	r3, #48	; 0x30
 8000f00:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f06:	463b      	mov	r3, r7
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480f      	ldr	r0, [pc, #60]	; (8000f48 <GPIO_Configuration+0x58>)
 8000f0c:	f7ff fae4 	bl	80004d8 <GPIO_Init>

	/* Configure USART6 Tx and Rx as alternate function push-pull for MIDI Receiver*/
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 8000f10:	2302      	movs	r3, #2
 8000f12:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_100MHz;
 8000f14:	2303      	movs	r3, #3
 8000f16:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_UP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin   	= USARTx_TX_PIN | USARTx_RX_PIN;
 8000f1c:	23c0      	movs	r3, #192	; 0xc0
 8000f1e:	603b      	str	r3, [r7, #0]

	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000f20:	463b      	mov	r3, r7
 8000f22:	4619      	mov	r1, r3
 8000f24:	4809      	ldr	r0, [pc, #36]	; (8000f4c <GPIO_Configuration+0x5c>)
 8000f26:	f7ff fad7 	bl	80004d8 <GPIO_Init>

	// Alternate function PC 6-7 to USART_6
	GPIO_PinAFConfig(GPIOC, USARTx_TX_SOURCE, USARTx_TX_AF);
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	2106      	movs	r1, #6
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <GPIO_Configuration+0x5c>)
 8000f30:	f7ff fb60 	bl	80005f4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, USARTx_RX_SOURCE, USARTx_RX_AF);
 8000f34:	2208      	movs	r2, #8
 8000f36:	2107      	movs	r1, #7
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <GPIO_Configuration+0x5c>)
 8000f3a:	f7ff fb5b 	bl	80005f4 <GPIO_PinAFConfig>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	40020800 	.word	0x40020800

08000f50 <USART6_IRQHandler>:

	ADC_Cmd(ADC1, ENABLE);
	ADC_Cmd(ADC2, ENABLE);
}

void USART6_IRQHandler() {
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
	if (USART6->DR/16 == 0x9) {
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <USART6_IRQHandler+0xb0>)
 8000f58:	889b      	ldrh	r3, [r3, #4]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	3b90      	subs	r3, #144	; 0x90
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d806      	bhi.n	8000f72 <USART6_IRQHandler+0x22>
		//If it has just received a new status byte
		MIDI_BYTEx = 1;
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <USART6_IRQHandler+0xb4>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
		MIDI_NOTE_ON = 1;
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <USART6_IRQHandler+0xb8>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e010      	b.n	8000f94 <USART6_IRQHandler+0x44>
	}
	else {
		//If not receiving a status byte and byte_no > 3, assume running_status byte(s)
		//If some other status byte
		if ((USART6->DR >> 7) == 1){
 8000f72:	4b23      	ldr	r3, [pc, #140]	; (8001000 <USART6_IRQHandler+0xb0>)
 8000f74:	889b      	ldrh	r3, [r3, #4]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	09db      	lsrs	r3, r3, #7
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d102      	bne.n	8000f86 <USART6_IRQHandler+0x36>
			MIDI_NOTE_ON = 0;
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <USART6_IRQHandler+0xb8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
		}

		if (MIDI_BYTEx > 3){
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <USART6_IRQHandler+0xb4>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d902      	bls.n	8000f94 <USART6_IRQHandler+0x44>
			MIDI_BYTEx = 2;			//Running status
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <USART6_IRQHandler+0xb4>)
 8000f90:	2202      	movs	r2, #2
 8000f92:	701a      	strb	r2, [r3, #0]
		}
	}

	//Read in byte
	Midi_Bytes[MIDI_BYTEx-1] = USART_ReceiveData(USART6);
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <USART6_IRQHandler+0xb4>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	1e5c      	subs	r4, r3, #1
 8000f9a:	4819      	ldr	r0, [pc, #100]	; (8001000 <USART6_IRQHandler+0xb0>)
 8000f9c:	f7ff fde2 	bl	8000b64 <USART_ReceiveData>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <USART6_IRQHandler+0xbc>)
 8000fa6:	551a      	strb	r2, [r3, r4]

	if (MIDI_BYTEx == 3 && MIDI_NOTE_ON == 1 && Midi_Bytes[2] != 0) {
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <USART6_IRQHandler+0xb4>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d11c      	bne.n	8000fea <USART6_IRQHandler+0x9a>
 8000fb0:	4b15      	ldr	r3, [pc, #84]	; (8001008 <USART6_IRQHandler+0xb8>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d118      	bne.n	8000fea <USART6_IRQHandler+0x9a>
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <USART6_IRQHandler+0xbc>)
 8000fba:	789b      	ldrb	r3, [r3, #2]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d014      	beq.n	8000fea <USART6_IRQHandler+0x9a>
		//If the current command is NOTE ON
		if (Midi_Bytes[0]/16 == 0x9) {
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <USART6_IRQHandler+0xbc>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	3370      	adds	r3, #112	; 0x70
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d80e      	bhi.n	8000fea <USART6_IRQHandler+0x9a>
			//Finish reading block
			// calculate the new ARR
			char data1 =  Midi_Bytes[0];
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <USART6_IRQHandler+0xbc>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	71fb      	strb	r3, [r7, #7]
			data1 =  Midi_Bytes[1];
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <USART6_IRQHandler+0xbc>)
 8000fd4:	785b      	ldrb	r3, [r3, #1]
 8000fd6:	71fb      	strb	r3, [r7, #7]
			data1 =  Midi_Bytes[2];
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <USART6_IRQHandler+0xbc>)
 8000fda:	789b      	ldrb	r3, [r3, #2]
 8000fdc:	71fb      	strb	r3, [r7, #7]
			data1 =  Midi_Bytes[0];
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <USART6_IRQHandler+0xbc>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
			STM_EVAL_LEDToggle(LED3);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f7ff fe43 	bl	8000c70 <STM_EVAL_LEDToggle>

		}
	}
	MIDI_BYTEx++;
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <USART6_IRQHandler+0xb4>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <USART6_IRQHandler+0xb4>)
 8000ff4:	701a      	strb	r2, [r3, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40011400 	.word	0x40011400
 8001004:	200000cc 	.word	0x200000cc
 8001008:	200000cb 	.word	0x200000cb
 800100c:	200000c8 	.word	0x200000c8

08001010 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 800101a:	bf00      	nop
}
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 800102c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001074 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001040:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001042:	e003      	b.n	800104c <LoopCopyDataInit>

08001044 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001046:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001048:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800104a:	3104      	adds	r1, #4

0800104c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800104c:	480b      	ldr	r0, [pc, #44]	; (800107c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001050:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001052:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001054:	d3f6      	bcc.n	8001044 <CopyDataInit>
  ldr  r2, =_sbss
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001058:	e002      	b.n	8001060 <LoopFillZerobss>

0800105a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800105a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800105c:	f842 3b04 	str.w	r3, [r2], #4

08001060 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001062:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001064:	d3f9      	bcc.n	800105a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001066:	f000 f84b 	bl	8001100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106a:	f000 f8fb 	bl	8001264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106e:	f7ff fedb 	bl	8000e28 <main>
  bx  lr    
 8001072:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001074:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001078:	080012e8 	.word	0x080012e8
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001080:	20000030 	.word	0x20000030
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001084:	20000030 	.word	0x20000030
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001088:	200000d0 	.word	0x200000d0

0800108c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC_IRQHandler>
	...

08001090 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80010a4:	e7fe      	b.n	80010a4 <HardFault_Handler+0x4>
 80010a6:	bf00      	nop

080010a8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80010ac:	e7fe      	b.n	80010ac <MemManage_Handler+0x4>
 80010ae:	bf00      	nop

080010b0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80010b4:	e7fe      	b.n	80010b4 <BusFault_Handler+0x4>
 80010b6:	bf00      	nop

080010b8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80010bc:	e7fe      	b.n	80010bc <UsageFault_Handler+0x4>
 80010be:	bf00      	nop

080010c0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001104:	4a16      	ldr	r2, [pc, #88]	; (8001160 <SystemInit+0x60>)
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <SystemInit+0x60>)
 8001108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001114:	4a13      	ldr	r2, [pc, #76]	; (8001164 <SystemInit+0x64>)
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <SystemInit+0x64>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <SystemInit+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001126:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <SystemInit+0x64>)
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <SystemInit+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001134:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <SystemInit+0x64>)
 8001138:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <SystemInit+0x68>)
 800113a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800113c:	4a09      	ldr	r2, [pc, #36]	; (8001164 <SystemInit+0x64>)
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <SystemInit+0x64>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001146:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <SystemInit+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800114e:	f000 f80d 	bl	800116c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001152:	4b03      	ldr	r3, [pc, #12]	; (8001160 <SystemInit+0x60>)
 8001154:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001158:	609a      	str	r2, [r3, #8]
#endif
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00
 8001164:	40023800 	.word	0x40023800
 8001168:	24003010 	.word	0x24003010

0800116c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800117a:	4a36      	ldr	r2, [pc, #216]	; (8001254 <SetSysClock+0xe8>)
 800117c:	4b35      	ldr	r3, [pc, #212]	; (8001254 <SetSysClock+0xe8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001186:	4b33      	ldr	r3, [pc, #204]	; (8001254 <SetSysClock+0xe8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3301      	adds	r3, #1
 8001194:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d103      	bne.n	80011a4 <SetSysClock+0x38>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80011a2:	d1f0      	bne.n	8001186 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <SetSysClock+0xe8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80011b0:	2301      	movs	r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	e001      	b.n	80011ba <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d142      	bne.n	8001246 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80011c0:	4a24      	ldr	r2, [pc, #144]	; (8001254 <SetSysClock+0xe8>)
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <SetSysClock+0xe8>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ca:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80011cc:	4a22      	ldr	r2, [pc, #136]	; (8001258 <SetSysClock+0xec>)
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <SetSysClock+0xec>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011d6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80011d8:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <SetSysClock+0xe8>)
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <SetSysClock+0xe8>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80011e0:	4a1c      	ldr	r2, [pc, #112]	; (8001254 <SetSysClock+0xe8>)
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <SetSysClock+0xe8>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ea:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80011ec:	4a19      	ldr	r2, [pc, #100]	; (8001254 <SetSysClock+0xe8>)
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <SetSysClock+0xe8>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80011f6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <SetSysClock+0xe8>)
 80011fa:	4a18      	ldr	r2, [pc, #96]	; (800125c <SetSysClock+0xf0>)
 80011fc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80011fe:	4a15      	ldr	r2, [pc, #84]	; (8001254 <SetSysClock+0xe8>)
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <SetSysClock+0xe8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001208:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800120a:	bf00      	nop
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <SetSysClock+0xe8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f9      	beq.n	800120c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <SetSysClock+0xf4>)
 800121a:	f240 6205 	movw	r2, #1541	; 0x605
 800121e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001220:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <SetSysClock+0xe8>)
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <SetSysClock+0xe8>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f023 0303 	bic.w	r3, r3, #3
 800122a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800122c:	4a09      	ldr	r2, [pc, #36]	; (8001254 <SetSysClock+0xe8>)
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <SetSysClock+0xe8>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001238:	bf00      	nop
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <SetSysClock+0xe8>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b08      	cmp	r3, #8
 8001244:	d1f9      	bne.n	800123a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40007000 	.word	0x40007000
 800125c:	07405408 	.word	0x07405408
 8001260:	40023c00 	.word	0x40023c00

08001264 <__libc_init_array>:
 8001264:	b570      	push	{r4, r5, r6, lr}
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <__libc_init_array+0x3c>)
 8001268:	4c0e      	ldr	r4, [pc, #56]	; (80012a4 <__libc_init_array+0x40>)
 800126a:	1ae4      	subs	r4, r4, r3
 800126c:	10a4      	asrs	r4, r4, #2
 800126e:	2500      	movs	r5, #0
 8001270:	461e      	mov	r6, r3
 8001272:	42a5      	cmp	r5, r4
 8001274:	d004      	beq.n	8001280 <__libc_init_array+0x1c>
 8001276:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800127a:	4798      	blx	r3
 800127c:	3501      	adds	r5, #1
 800127e:	e7f8      	b.n	8001272 <__libc_init_array+0xe>
 8001280:	f000 f816 	bl	80012b0 <_init>
 8001284:	4c08      	ldr	r4, [pc, #32]	; (80012a8 <__libc_init_array+0x44>)
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <__libc_init_array+0x48>)
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	10a4      	asrs	r4, r4, #2
 800128c:	2500      	movs	r5, #0
 800128e:	461e      	mov	r6, r3
 8001290:	42a5      	cmp	r5, r4
 8001292:	d004      	beq.n	800129e <__libc_init_array+0x3a>
 8001294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001298:	4798      	blx	r3
 800129a:	3501      	adds	r5, #1
 800129c:	e7f8      	b.n	8001290 <__libc_init_array+0x2c>
 800129e:	bd70      	pop	{r4, r5, r6, pc}
 80012a0:	080012e0 	.word	0x080012e0
 80012a4:	080012e0 	.word	0x080012e0
 80012a8:	080012e4 	.word	0x080012e4
 80012ac:	080012e0 	.word	0x080012e0

080012b0 <_init>:
 80012b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b2:	bf00      	nop
 80012b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012b6:	bc08      	pop	{r3}
 80012b8:	469e      	mov	lr, r3
 80012ba:	4770      	bx	lr

080012bc <_fini>:
 80012bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012be:	bf00      	nop
 80012c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012c2:	bc08      	pop	{r3}
 80012c4:	469e      	mov	lr, r3
 80012c6:	4770      	bx	lr
