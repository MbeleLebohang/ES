
ES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f78  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08003100  08003100  00013100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  080032f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  7 .bss          0000209c  20000020  20000020  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200020bc  200020bc  00020020  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   000082f1  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000012d2  00000000  00000000  00028341  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b18  00000000  00000000  00029618  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a50  00000000  00000000  0002a130  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003598  00000000  00000000  0002ab80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000036cd  00000000  00000000  0002e118  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000317e5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003204  00000000  00000000  00031864  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00034a68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030e8 	.word	0x080030e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	080030e8 	.word	0x080030e8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ade:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	791b      	ldrb	r3, [r3, #4]
 8000ae4:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000aea:	4313      	orrs	r3, r2
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <ADC_Init+0xa8>)
 8000b02:	4013      	ands	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b0e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000b14:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	795b      	ldrb	r3, [r3, #5]
 8000b1a:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000b36:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	7d1b      	ldrb	r3, [r3, #20]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	7afb      	ldrb	r3, [r7, #11]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000b46:	7afb      	ldrb	r3, [r7, #11]
 8000b48:	051b      	lsls	r3, r3, #20
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	c0fff7fd 	.word	0xc0fff7fd

08000b68 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <ADC_CommonInit+0x48>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <ADC_CommonInit+0x4c>)
 8000b7e:	4013      	ands	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000b8a:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000b90:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000b96:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <ADC_CommonInit+0x48>)
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	6053      	str	r3, [r2, #4]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40012300 	.word	0x40012300
 8000bb4:	fffc30e0 	.word	0xfffc30e0

08000bb8 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000bc4:	78fb      	ldrb	r3, [r7, #3]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d006      	beq.n	8000bd8 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	f043 0201 	orr.w	r2, r3, #1
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000bd6:	e005      	b.n	8000be4 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	f023 0201 	bic.w	r2, r3, #1
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	609a      	str	r2, [r3, #8]
  }
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	4608      	mov	r0, r1
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4603      	mov	r3, r0
 8000c00:	70fb      	strb	r3, [r7, #3]
 8000c02:	460b      	mov	r3, r1
 8000c04:	70bb      	strb	r3, [r7, #2]
 8000c06:	4613      	mov	r3, r2
 8000c08:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000c12:	78fb      	ldrb	r3, [r7, #3]
 8000c14:	2b09      	cmp	r3, #9
 8000c16:	d923      	bls.n	8000c60 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000c1e:	78fb      	ldrb	r3, [r7, #3]
 8000c20:	f1a3 020a 	sub.w	r2, r3, #10
 8000c24:	4613      	mov	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4413      	add	r3, r2
 8000c2a:	2207      	movs	r2, #7
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000c3c:	7879      	ldrb	r1, [r7, #1]
 8000c3e:	78fb      	ldrb	r3, [r7, #3]
 8000c40:	f1a3 020a 	sub.w	r2, r3, #10
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	e01e      	b.n	8000c9e <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000c66:	78fa      	ldrb	r2, [r7, #3]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	2207      	movs	r2, #7
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000c80:	7879      	ldrb	r1, [r7, #1]
 8000c82:	78fa      	ldrb	r2, [r7, #3]
 8000c84:	4613      	mov	r3, r2
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	4413      	add	r3, r2
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000c9e:	78bb      	ldrb	r3, [r7, #2]
 8000ca0:	2b06      	cmp	r3, #6
 8000ca2:	d821      	bhi.n	8000ce8 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000caa:	78bb      	ldrb	r3, [r7, #2]
 8000cac:	1e5a      	subs	r2, r3, #1
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	221f      	movs	r2, #31
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000cc6:	78f9      	ldrb	r1, [r7, #3]
 8000cc8:	78bb      	ldrb	r3, [r7, #2]
 8000cca:	1e5a      	subs	r2, r3, #1
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000ce6:	e047      	b.n	8000d78 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000ce8:	78bb      	ldrb	r3, [r7, #2]
 8000cea:	2b0c      	cmp	r3, #12
 8000cec:	d821      	bhi.n	8000d32 <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000cf4:	78bb      	ldrb	r3, [r7, #2]
 8000cf6:	1fda      	subs	r2, r3, #7
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	221f      	movs	r2, #31
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000d10:	78f9      	ldrb	r1, [r7, #3]
 8000d12:	78bb      	ldrb	r3, [r7, #2]
 8000d14:	1fda      	subs	r2, r3, #7
 8000d16:	4613      	mov	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d20:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000d30:	e022      	b.n	8000d78 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000d38:	78bb      	ldrb	r3, [r7, #2]
 8000d3a:	f1a3 020d 	sub.w	r2, r3, #13
 8000d3e:	4613      	mov	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	221f      	movs	r2, #31
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	4013      	ands	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000d56:	78f9      	ldrb	r1, [r7, #3]
 8000d58:	78bb      	ldrb	r3, [r7, #2]
 8000d5a:	f1a3 020d 	sub.w	r2, r3, #13
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	609a      	str	r2, [r3, #8]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	807b      	strh	r3, [r7, #2]
 8000db0:	4613      	mov	r3, r2
 8000db2:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8000db8:	887b      	ldrh	r3, [r7, #2]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8000dc8:	787b      	ldrb	r3, [r7, #1]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d006      	beq.n	8000ddc <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 8000dda:	e006      	b.n	8000dea <ADC_ITConfig+0x46>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	401a      	ands	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	605a      	str	r2, [r3, #4]
  }
}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <DAC_Init+0x64>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000e10:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000e30:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000e36:	4313      	orrs	r3, r2
 8000e38:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <DAC_Init+0x64>)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	6013      	str	r3, [r2, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40007400 	.word	0x40007400

08000e60 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d009      	beq.n	8000e86 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000e72:	490d      	ldr	r1, [pc, #52]	; (8000ea8 <DAC_Cmd+0x48>)
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <DAC_Cmd+0x48>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	2001      	movs	r0, #1
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	fa00 f303 	lsl.w	r3, r0, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8000e84:	e009      	b.n	8000e9a <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <DAC_Cmd+0x48>)
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <DAC_Cmd+0x48>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	fa00 f303 	lsl.w	r3, r0, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	4013      	ands	r3, r2
 8000e98:	600b      	str	r3, [r1, #0]
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40007400 	.word	0x40007400

08000eac <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <DAC_SetChannel1Data+0x34>)
 8000ebe:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3308      	adds	r3, #8
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	6013      	str	r3, [r2, #0]
}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40007400 	.word	0x40007400

08000ee4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <DMA_Init+0xac>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000f0e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000f1a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f26:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000f32:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f38:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f023 0307 	bic.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	691a      	ldr	r2, [r3, #16]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60da      	str	r2, [r3, #12]
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	f01c803f 	.word	0xf01c803f

08000f94 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d006      	beq.n	8000fb4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f043 0201 	orr.w	r2, r3, #1
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000fb2:	e005      	b.n	8000fc0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f023 0201 	bic.w	r2, r3, #1
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	601a      	str	r2, [r3, #0]
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d002      	beq.n	8000fea <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e001      	b.n	8000fee <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a15      	ldr	r2, [pc, #84]	; (8001068 <DMA_GetFlagStatus+0x6c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d802      	bhi.n	800101c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <DMA_GetFlagStatus+0x70>)
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	e001      	b.n	8001020 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <DMA_GetFlagStatus+0x74>)
 800101e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e002      	b.n	8001038 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800103e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001042:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	4013      	ands	r3, r2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800104e:	2301      	movs	r3, #1
 8001050:	75fb      	strb	r3, [r7, #23]
 8001052:	e001      	b.n	8001058 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001058:	7dfb      	ldrb	r3, [r7, #23]
}
 800105a:	4618      	mov	r0, r3
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	4002640f 	.word	0x4002640f
 800106c:	40026000 	.word	0x40026000
 8001070:	40026400 	.word	0x40026400

08001074 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a10      	ldr	r2, [pc, #64]	; (80010c4 <DMA_ClearFlag+0x50>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d802      	bhi.n	800108c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <DMA_ClearFlag+0x54>)
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e001      	b.n	8001090 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <DMA_ClearFlag+0x58>)
 800108e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80010a0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80010a8:	e006      	b.n	80010b8 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80010b0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	6093      	str	r3, [r2, #8]
  }    
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	4002640f 	.word	0x4002640f
 80010c8:	40026000 	.word	0x40026000
 80010cc:	40026400 	.word	0x40026400

080010d0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e076      	b.n	80011da <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80010ec:	2201      	movs	r2, #1
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d165      	bne.n	80011d4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2103      	movs	r1, #3
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	401a      	ands	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	791b      	ldrb	r3, [r3, #4]
 8001126:	4619      	mov	r1, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	431a      	orrs	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	791b      	ldrb	r3, [r3, #4]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d003      	beq.n	8001146 <GPIO_Init+0x76>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	791b      	ldrb	r3, [r3, #4]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d12e      	bne.n	80011a4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2103      	movs	r1, #3
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	401a      	ands	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	795b      	ldrb	r3, [r3, #5]
 8001164:	4619      	mov	r1, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	b29b      	uxth	r3, r3
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	401a      	ands	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	799b      	ldrb	r3, [r3, #6]
 8001192:	4619      	mov	r1, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	b29b      	uxth	r3, r3
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	b29b      	uxth	r3, r3
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2103      	movs	r1, #3
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	401a      	ands	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	79db      	ldrb	r3, [r3, #7]
 80011c4:	4619      	mov	r1, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	3301      	adds	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d985      	bls.n	80010ec <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80011e0:	bf00      	nop
 80011e2:	371c      	adds	r7, #28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80011fe:	490a      	ldr	r1, [pc, #40]	; (8001228 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4313      	orrs	r3, r2
 8001208:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800120a:	e006      	b.n	800121a <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800120c:	4906      	ldr	r1, [pc, #24]	; (8001228 <RCC_AHB1PeriphClockCmd+0x3c>)
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	43db      	mvns	r3, r3
 8001216:	4013      	ands	r3, r2
 8001218:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d006      	beq.n	800124c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800123e:	490a      	ldr	r1, [pc, #40]	; (8001268 <RCC_APB1PeriphClockCmd+0x3c>)
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <RCC_APB1PeriphClockCmd+0x3c>)
 8001242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4313      	orrs	r3, r2
 8001248:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800124a:	e006      	b.n	800125a <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800124c:	4906      	ldr	r1, [pc, #24]	; (8001268 <RCC_APB1PeriphClockCmd+0x3c>)
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <RCC_APB1PeriphClockCmd+0x3c>)
 8001250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	43db      	mvns	r3, r3
 8001256:	4013      	ands	r3, r2
 8001258:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d006      	beq.n	800128c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800127e:	490a      	ldr	r1, [pc, #40]	; (80012a8 <RCC_APB2PeriphClockCmd+0x3c>)
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <RCC_APB2PeriphClockCmd+0x3c>)
 8001282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4313      	orrs	r3, r2
 8001288:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800128a:	e006      	b.n	800129a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800128c:	4906      	ldr	r1, [pc, #24]	; (80012a8 <RCC_APB2PeriphClockCmd+0x3c>)
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <RCC_APB2PeriphClockCmd+0x3c>)
 8001290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	43db      	mvns	r3, r3
 8001296:	4013      	ands	r3, r2
 8001298:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800

080012ac <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	819a      	strh	r2, [r3, #12]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	891b      	ldrh	r3, [r3, #8]
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	4013      	ands	r3, r2
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e001      	b.n	80012f6 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a29      	ldr	r2, [pc, #164]	; (80013c0 <TIM_TimeBaseInit+0xbc>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d013      	beq.n	8001348 <TIM_TimeBaseInit+0x44>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a28      	ldr	r2, [pc, #160]	; (80013c4 <TIM_TimeBaseInit+0xc0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d00f      	beq.n	8001348 <TIM_TimeBaseInit+0x44>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800132e:	d00b      	beq.n	8001348 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <TIM_TimeBaseInit+0xc4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d007      	beq.n	8001348 <TIM_TimeBaseInit+0x44>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a24      	ldr	r2, [pc, #144]	; (80013cc <TIM_TimeBaseInit+0xc8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d003      	beq.n	8001348 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a23      	ldr	r2, [pc, #140]	; (80013d0 <TIM_TimeBaseInit+0xcc>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d108      	bne.n	800135a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800134e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	885a      	ldrh	r2, [r3, #2]
 8001354:	89fb      	ldrh	r3, [r7, #14]
 8001356:	4313      	orrs	r3, r2
 8001358:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <TIM_TimeBaseInit+0xd0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00c      	beq.n	800137c <TIM_TimeBaseInit+0x78>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <TIM_TimeBaseInit+0xd4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d008      	beq.n	800137c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001370:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	891a      	ldrh	r2, [r3, #8]
 8001376:	89fb      	ldrh	r3, [r7, #14]
 8001378:	4313      	orrs	r3, r2
 800137a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	89fa      	ldrh	r2, [r7, #14]
 8001380:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	881a      	ldrh	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <TIM_TimeBaseInit+0xbc>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d003      	beq.n	80013a2 <TIM_TimeBaseInit+0x9e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <TIM_TimeBaseInit+0xc0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d104      	bne.n	80013ac <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	7a9b      	ldrb	r3, [r3, #10]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	829a      	strh	r2, [r3, #20]
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40010000 	.word	0x40010000
 80013c4:	40010400 	.word	0x40010400
 80013c8:	40000400 	.word	0x40000400
 80013cc:	40000800 	.word	0x40000800
 80013d0:	40000c00 	.word	0x40000c00
 80013d4:	40001000 	.word	0x40001000
 80013d8:	40001400 	.word	0x40001400

080013dc <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80013e8:	78fb      	ldrb	r3, [r7, #3]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d008      	beq.n	8001400 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80013fe:	e007      	b.n	8001410 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	b29b      	uxth	r3, r3
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	b29a      	uxth	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	801a      	strh	r2, [r3, #0]
  }
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	817b      	strh	r3, [r7, #10]
 800142a:	2300      	movs	r3, #0
 800142c:	81fb      	strh	r3, [r7, #14]
 800142e:	2300      	movs	r3, #0
 8001430:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	8c1b      	ldrh	r3, [r3, #32]
 8001436:	b29b      	uxth	r3, r3
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	b29a      	uxth	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	8c1b      	ldrh	r3, [r3, #32]
 8001446:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	889b      	ldrh	r3, [r3, #4]
 800144c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	8b1b      	ldrh	r3, [r3, #24]
 8001452:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8001454:	897b      	ldrh	r3, [r7, #10]
 8001456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800145a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800145c:	897b      	ldrh	r3, [r7, #10]
 800145e:	f023 0303 	bic.w	r3, r3, #3
 8001462:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	881a      	ldrh	r2, [r3, #0]
 8001468:	897b      	ldrh	r3, [r7, #10]
 800146a:	4313      	orrs	r3, r2
 800146c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	f023 0302 	bic.w	r3, r3, #2
 8001474:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	899a      	ldrh	r2, [r3, #12]
 800147a:	89fb      	ldrh	r3, [r7, #14]
 800147c:	4313      	orrs	r3, r2
 800147e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	885a      	ldrh	r2, [r3, #2]
 8001484:	89fb      	ldrh	r3, [r7, #14]
 8001486:	4313      	orrs	r3, r2
 8001488:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a1e      	ldr	r2, [pc, #120]	; (8001508 <TIM_OC1Init+0xec>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d003      	beq.n	800149a <TIM_OC1Init+0x7e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a1d      	ldr	r2, [pc, #116]	; (800150c <TIM_OC1Init+0xf0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d123      	bne.n	80014e2 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	f023 0308 	bic.w	r3, r3, #8
 80014a0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	89da      	ldrh	r2, [r3, #14]
 80014a6:	89fb      	ldrh	r3, [r7, #14]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80014ac:	89fb      	ldrh	r3, [r7, #14]
 80014ae:	f023 0304 	bic.w	r3, r3, #4
 80014b2:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	889a      	ldrh	r2, [r3, #4]
 80014b8:	89fb      	ldrh	r3, [r7, #14]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 80014be:	89bb      	ldrh	r3, [r7, #12]
 80014c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014c4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80014c6:	89bb      	ldrh	r3, [r7, #12]
 80014c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014cc:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	8a1a      	ldrh	r2, [r3, #16]
 80014d2:	89bb      	ldrh	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	8a5a      	ldrh	r2, [r3, #18]
 80014dc:	89bb      	ldrh	r3, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	89ba      	ldrh	r2, [r7, #12]
 80014e6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	897a      	ldrh	r2, [r7, #10]
 80014ec:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	89fa      	ldrh	r2, [r7, #14]
 80014fa:	841a      	strh	r2, [r3, #32]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40010000 	.word	0x40010000
 800150c:	40010400 	.word	0x40010400

08001510 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800151c:	2300      	movs	r3, #0
 800151e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001520:	2300      	movs	r3, #0
 8001522:	81bb      	strh	r3, [r7, #12]
 8001524:	2300      	movs	r3, #0
 8001526:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	8a1b      	ldrh	r3, [r3, #16]
 800152c:	b29a      	uxth	r2, r3
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	4013      	ands	r3, r2
 8001532:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	899b      	ldrh	r3, [r3, #12]
 8001538:	b29a      	uxth	r2, r3
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	4013      	ands	r3, r2
 800153e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001540:	89bb      	ldrh	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <TIM_GetITStatus+0x42>
 8001546:	897b      	ldrh	r3, [r7, #10]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e001      	b.n	8001556 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	43db      	mvns	r3, r3
 8001574:	b29a      	uxth	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	821a      	strh	r2, [r3, #16]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop

08001588 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <STM_EVAL_LEDInit+0x50>)
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	2101      	movs	r1, #1
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fe25 	bl	80011ec <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <STM_EVAL_LEDInit+0x54>)
 80015a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80015ac:	2301      	movs	r3, #1
 80015ae:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80015b0:	2300      	movs	r3, #0
 80015b2:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80015b8:	2302      	movs	r3, #2
 80015ba:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <STM_EVAL_LEDInit+0x58>)
 80015c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c4:	f107 0208 	add.w	r2, r7, #8
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fd80 	bl	80010d0 <GPIO_Init>
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	08003108 	.word	0x08003108
 80015dc:	08003100 	.word	0x08003100
 80015e0:	20000000 	.word	0x20000000

080015e4 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	4a06      	ldr	r2, [pc, #24]	; (800160c <STM_EVAL_LEDOn+0x28>)
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	4905      	ldr	r1, [pc, #20]	; (8001610 <STM_EVAL_LEDOn+0x2c>)
 80015fa:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80015fe:	831a      	strh	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	20000000 	.word	0x20000000
 8001610:	08003100 	.word	0x08003100

08001614 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	4a09      	ldr	r2, [pc, #36]	; (8001648 <STM_EVAL_LEDToggle+0x34>)
 8001622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001626:	79fa      	ldrb	r2, [r7, #7]
 8001628:	4907      	ldr	r1, [pc, #28]	; (8001648 <STM_EVAL_LEDToggle+0x34>)
 800162a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800162e:	6952      	ldr	r2, [r2, #20]
 8001630:	79f9      	ldrb	r1, [r7, #7]
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <STM_EVAL_LEDToggle+0x38>)
 8001634:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8001638:	404a      	eors	r2, r1
 800163a:	615a      	str	r2, [r3, #20]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	20000000 	.word	0x20000000
 800164c:	08003100 	.word	0x08003100

08001650 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8001654:	4b37      	ldr	r3, [pc, #220]	; (8001734 <Audio_MAL_IRQHandler+0xe4>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b37      	ldr	r3, [pc, #220]	; (8001738 <Audio_MAL_IRQHandler+0xe8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	4610      	mov	r0, r2
 8001660:	f7ff fccc 	bl	8000ffc <DMA_GetFlagStatus>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d062      	beq.n	8001730 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800166a:	4b34      	ldr	r3, [pc, #208]	; (800173c <Audio_MAL_IRQHandler+0xec>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d04a      	beq.n	8001708 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8001672:	bf00      	nop
 8001674:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <Audio_MAL_IRQHandler+0xe4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fca7 	bl	8000fcc <DMA_GetCmdStatus>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f7      	bne.n	8001674 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8001684:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <Audio_MAL_IRQHandler+0xe4>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <Audio_MAL_IRQHandler+0xe8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	4610      	mov	r0, r2
 8001690:	f7ff fcf0 	bl	8001074 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <Audio_MAL_IRQHandler+0xf0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <Audio_MAL_IRQHandler+0xf4>)
 800169c:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800169e:	4b27      	ldr	r3, [pc, #156]	; (800173c <Audio_MAL_IRQHandler+0xec>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a6:	4293      	cmp	r3, r2
 80016a8:	bf28      	it	cs
 80016aa:	4613      	movcs	r3, r2
 80016ac:	4a25      	ldr	r2, [pc, #148]	; (8001744 <Audio_MAL_IRQHandler+0xf4>)
 80016ae:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <Audio_MAL_IRQHandler+0xe4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4923      	ldr	r1, [pc, #140]	; (8001744 <Audio_MAL_IRQHandler+0xf4>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fc14 	bl	8000ee4 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80016bc:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <Audio_MAL_IRQHandler+0xe4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2101      	movs	r1, #1
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fc66 	bl	8000f94 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <Audio_MAL_IRQHandler+0xf0>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <Audio_MAL_IRQHandler+0xec>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016d4:	428b      	cmp	r3, r1
 80016d6:	bf28      	it	cs
 80016d8:	460b      	movcs	r3, r1
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	4a18      	ldr	r2, [pc, #96]	; (8001740 <Audio_MAL_IRQHandler+0xf0>)
 80016e0:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <Audio_MAL_IRQHandler+0xec>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <Audio_MAL_IRQHandler+0xec>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016ee:	428b      	cmp	r3, r1
 80016f0:	bf28      	it	cs
 80016f2:	460b      	movcs	r3, r1
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	4a11      	ldr	r2, [pc, #68]	; (800173c <Audio_MAL_IRQHandler+0xec>)
 80016f8:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <Audio_MAL_IRQHandler+0xe4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2101      	movs	r1, #1
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fc47 	bl	8000f94 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001706:	e013      	b.n	8001730 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <Audio_MAL_IRQHandler+0xe4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fc40 	bl	8000f94 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <Audio_MAL_IRQHandler+0xe4>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <Audio_MAL_IRQHandler+0xe8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	4610      	mov	r0, r2
 8001720:	f7ff fca8 	bl	8001074 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <Audio_MAL_IRQHandler+0xf0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f000 faf6 	bl	8001d1c <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000018 	.word	0x20000018
 8001738:	2000001c 	.word	0x2000001c
 800173c:	20000010 	.word	0x20000010
 8001740:	20000040 	.word	0x20000040
 8001744:	20000080 	.word	0x20000080

08001748 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800174c:	f7ff ff80 	bl	8001650 <Audio_MAL_IRQHandler>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001758:	f7ff ff7a 	bl	8001650 <Audio_MAL_IRQHandler>
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}

08001760 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001764:	2102      	movs	r1, #2
 8001766:	480d      	ldr	r0, [pc, #52]	; (800179c <SPI3_IRQHandler+0x3c>)
 8001768:	f7ff fdb0 	bl	80012cc <SPI_I2S_GetFlagStatus>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d011      	beq.n	8001796 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <SPI3_IRQHandler+0x40>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d106      	bne.n	8001788 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800177a:	f000 fadb 	bl	8001d34 <EVAL_AUDIO_GetSampleCallBack>
 800177e:	4603      	mov	r3, r0
 8001780:	4619      	mov	r1, r3
 8001782:	2004      	movs	r0, #4
 8001784:	f7ff fb92 	bl	8000eac <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8001788:	f000 fad4 	bl	8001d34 <EVAL_AUDIO_GetSampleCallBack>
 800178c:	4603      	mov	r3, r0
 800178e:	4619      	mov	r1, r3
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <SPI3_IRQHandler+0x3c>)
 8001792:	f7ff fd8b 	bl	80012ac <SPI_I2S_SendData>
  }
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40003c00 	.word	0x40003c00
 80017a0:	20000014 	.word	0x20000014

080017a4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80017ae:	4909      	ldr	r1, [pc, #36]	; (80017d4 <NVIC_EnableIRQ+0x30>)
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	095b      	lsrs	r3, r3, #5
 80017b6:	79fa      	ldrb	r2, [r7, #7]
 80017b8:	f002 021f 	and.w	r2, r2, #31
 80017bc:	2001      	movs	r0, #1
 80017be:	fa00 f202 	lsl.w	r2, r0, r2
 80017c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000e100 	.word	0xe000e100

080017d8 <TIM5_IRQHandler>:
**
**  Abstract: main program
**
**===========================================================================
*/
void TIM5_IRQHandler(void) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	/* Check if interrupt has occured */
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
 80017dc:	2101      	movs	r1, #1
 80017de:	480d      	ldr	r0, [pc, #52]	; (8001814 <TIM5_IRQHandler+0x3c>)
 80017e0:	f7ff fe96 	bl	8001510 <TIM_GetITStatus>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d011      	beq.n	800180e <TIM5_IRQHandler+0x36>
	{
		/* Clear interrupt pending bit */
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 80017ea:	2101      	movs	r1, #1
 80017ec:	4809      	ldr	r0, [pc, #36]	; (8001814 <TIM5_IRQHandler+0x3c>)
 80017ee:	f7ff feb9 	bl	8001564 <TIM_ClearITPendingBit>
		 DAC->DHR12R1 = ADC1->DR;
 80017f2:	4a09      	ldr	r2, [pc, #36]	; (8001818 <TIM5_IRQHandler+0x40>)
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <TIM5_IRQHandler+0x44>)
 80017f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f8:	6093      	str	r3, [r2, #8]
		 DAC->DHR12R2 = ADC2->DR;
 80017fa:	4a07      	ldr	r2, [pc, #28]	; (8001818 <TIM5_IRQHandler+0x40>)
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <TIM5_IRQHandler+0x48>)
 80017fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001800:	6153      	str	r3, [r2, #20]
		 ADC_SoftwareStartConv(ADC1);
 8001802:	4806      	ldr	r0, [pc, #24]	; (800181c <TIM5_IRQHandler+0x44>)
 8001804:	f7ff fabe 	bl	8000d84 <ADC_SoftwareStartConv>

		 /* WHAT EVER YOU NEED TO DO IN THE INTERRUPT HANDLER GOES HERE */
		 STM_EVAL_LEDToggle(LED3);
 8001808:	2001      	movs	r0, #1
 800180a:	f7ff ff03 	bl	8001614 <STM_EVAL_LEDToggle>
	}
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40000c00 	.word	0x40000c00
 8001818:	40007400 	.word	0x40007400
 800181c:	40012000 	.word	0x40012000
 8001820:	40012100 	.word	0x40012100

08001824 <ADC_IRQHandler>:

void ADC_IRQHandler(void) {
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
	bufferPtr++;
 800182a:	4b54      	ldr	r3, [pc, #336]	; (800197c <ADC_IRQHandler+0x158>)
 800182c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001830:	b29b      	uxth	r3, r3
 8001832:	3301      	adds	r3, #1
 8001834:	b29b      	uxth	r3, r3
 8001836:	b21a      	sxth	r2, r3
 8001838:	4b50      	ldr	r3, [pc, #320]	; (800197c <ADC_IRQHandler+0x158>)
 800183a:	801a      	strh	r2, [r3, #0]
	bufferPtr &= 1023;		// Wrap around
 800183c:	4b4f      	ldr	r3, [pc, #316]	; (800197c <ADC_IRQHandler+0x158>)
 800183e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001842:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001846:	b21a      	sxth	r2, r3
 8001848:	4b4c      	ldr	r3, [pc, #304]	; (800197c <ADC_IRQHandler+0x158>)
 800184a:	801a      	strh	r2, [r3, #0]

	CircularBuffer1[bufferPtr] = ADC1->DR;
 800184c:	4b4b      	ldr	r3, [pc, #300]	; (800197c <ADC_IRQHandler+0x158>)
 800184e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001852:	461a      	mov	r2, r3
 8001854:	4b4a      	ldr	r3, [pc, #296]	; (8001980 <ADC_IRQHandler+0x15c>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001858:	b219      	sxth	r1, r3
 800185a:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <ADC_IRQHandler+0x160>)
 800185c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	CircularBuffer2[bufferPtr] = ADC2->DR;
 8001860:	4b46      	ldr	r3, [pc, #280]	; (800197c <ADC_IRQHandler+0x158>)
 8001862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001866:	461a      	mov	r2, r3
 8001868:	4b47      	ldr	r3, [pc, #284]	; (8001988 <ADC_IRQHandler+0x164>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	b219      	sxth	r1, r3
 800186e:	4b47      	ldr	r3, [pc, #284]	; (800198c <ADC_IRQHandler+0x168>)
 8001870:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	int conv = (float)CircularBuffer1[(bufferPtr - 100) & 1023] * h_m[0];
 8001874:	4b41      	ldr	r3, [pc, #260]	; (800197c <ADC_IRQHandler+0x158>)
 8001876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187a:	3b64      	subs	r3, #100	; 0x64
 800187c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001880:	4a40      	ldr	r2, [pc, #256]	; (8001984 <ADC_IRQHandler+0x160>)
 8001882:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001886:	ee07 3a90 	vmov	s15, r3
 800188a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800188e:	4b40      	ldr	r3, [pc, #256]	; (8001990 <ADC_IRQHandler+0x16c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800189e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a2:	ee17 3a90 	vmov	r3, s15
 80018a6:	607b      	str	r3, [r7, #4]
	short m;
	for (m = 1; m<64; m++){
 80018a8:	2301      	movs	r3, #1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	e03c      	b.n	8001928 <ADC_IRQHandler+0x104>
		conv += h_m[m] *(float)(CircularBuffer1[(bufferPtr - 100 + m) & 1023] + CircularBuffer1[(bufferPtr - 100 - m) & 1023]);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	ee07 3a90 	vmov	s15, r3
 80018b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018bc:	4a34      	ldr	r2, [pc, #208]	; (8001990 <ADC_IRQHandler+0x16c>)
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018ca:	4b2c      	ldr	r3, [pc, #176]	; (800197c <ADC_IRQHandler+0x158>)
 80018cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80018d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018d8:	4413      	add	r3, r2
 80018da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018de:	4a29      	ldr	r2, [pc, #164]	; (8001984 <ADC_IRQHandler+0x160>)
 80018e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4b25      	ldr	r3, [pc, #148]	; (800197c <ADC_IRQHandler+0x158>)
 80018e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ec:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80018f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018fa:	4a22      	ldr	r2, [pc, #136]	; (8001984 <ADC_IRQHandler+0x160>)
 80018fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001900:	440b      	add	r3, r1
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001916:	ee17 3a90 	vmov	r3, s15
 800191a:	607b      	str	r3, [r7, #4]
	CircularBuffer1[bufferPtr] = ADC1->DR;
	CircularBuffer2[bufferPtr] = ADC2->DR;

	int conv = (float)CircularBuffer1[(bufferPtr - 100) & 1023] * h_m[0];
	short m;
	for (m = 1; m<64; m++){
 800191c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001920:	b29b      	uxth	r3, r3
 8001922:	3301      	adds	r3, #1
 8001924:	b29b      	uxth	r3, r3
 8001926:	807b      	strh	r3, [r7, #2]
 8001928:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800192c:	2b3f      	cmp	r3, #63	; 0x3f
 800192e:	ddbe      	ble.n	80018ae <ADC_IRQHandler+0x8a>
		conv += h_m[m] *(float)(CircularBuffer1[(bufferPtr - 100 + m) & 1023] + CircularBuffer1[(bufferPtr - 100 - m) & 1023]);
	}
	DAC->DHR12R1 = CircularBuffer1[(bufferPtr - 100) & 1023]; // PA4
 8001930:	4a18      	ldr	r2, [pc, #96]	; (8001994 <ADC_IRQHandler+0x170>)
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <ADC_IRQHandler+0x158>)
 8001934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001938:	3b64      	subs	r3, #100	; 0x64
 800193a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800193e:	4911      	ldr	r1, [pc, #68]	; (8001984 <ADC_IRQHandler+0x160>)
 8001940:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001944:	6093      	str	r3, [r2, #8]
	DAC->DHR12R2 = conv >> 16;								  // PA5 -- Filtered
 8001946:	4a13      	ldr	r2, [pc, #76]	; (8001994 <ADC_IRQHandler+0x170>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	141b      	asrs	r3, r3, #16
 800194c:	6153      	str	r3, [r2, #20]
	bufferPtr++;
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <ADC_IRQHandler+0x158>)
 8001950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001954:	b29b      	uxth	r3, r3
 8001956:	3301      	adds	r3, #1
 8001958:	b29b      	uxth	r3, r3
 800195a:	b21a      	sxth	r2, r3
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <ADC_IRQHandler+0x158>)
 800195e:	801a      	strh	r2, [r3, #0]
	bufferPtr &= 1023;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <ADC_IRQHandler+0x158>)
 8001962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800196a:	b21a      	sxth	r2, r3
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <ADC_IRQHandler+0x158>)
 800196e:	801a      	strh	r2, [r3, #0]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	2000003c 	.word	0x2000003c
 8001980:	40012000 	.word	0x40012000
 8001984:	200018bc 	.word	0x200018bc
 8001988:	40012100 	.word	0x40012100
 800198c:	200000bc 	.word	0x200000bc
 8001990:	200008bc 	.word	0x200008bc
 8001994:	40007400 	.word	0x40007400

08001998 <main>:

int main(void)
{
 8001998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
	/*Prepare the filter coefficients */
	float h_m0 = 2.0 * 50.0 / 10000.0;
 80019a0:	4b71      	ldr	r3, [pc, #452]	; (8001b68 <main+0x1d0>)
 80019a2:	603b      	str	r3, [r7, #0]

	h_m[0] = (int)(h_m0 * 65536); 												// central weight: 2 x fc / fs
 80019a4:	edd7 7a00 	vldr	s15, [r7]
 80019a8:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001b6c <main+0x1d4>
 80019ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b4:	ee17 2a90 	vmov	r2, s15
 80019b8:	4b6d      	ldr	r3, [pc, #436]	; (8001b70 <main+0x1d8>)
 80019ba:	601a      	str	r2, [r3, #0]

	/* Find other weights */
	short m;
	for (m = 1; m < 64; m++){
 80019bc:	2301      	movs	r3, #1
 80019be:	80fb      	strh	r3, [r7, #6]
 80019c0:	e065      	b.n	8001a8e <main+0xf6>
		h_m[m] = (int)((h_m0 * 65536 * sin(pi * m * h_m0)) / (pi * m * h_m0));
 80019c2:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80019c6:	edd7 7a00 	vldr	s15, [r7]
 80019ca:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001b6c <main+0x1d4>
 80019ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d2:	ee17 0a90 	vmov	r0, s15
 80019d6:	f7fe fd5b 	bl	8000490 <__aeabi_f2d>
 80019da:	4605      	mov	r5, r0
 80019dc:	460e      	mov	r6, r1
 80019de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fd42 	bl	800046c <__aeabi_i2d>
 80019e8:	a35b      	add	r3, pc, #364	; (adr r3, 8001b58 <main+0x1c0>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	f7fe fda3 	bl	8000538 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4690      	mov	r8, r2
 80019f8:	4699      	mov	r9, r3
 80019fa:	6838      	ldr	r0, [r7, #0]
 80019fc:	f7fe fd48 	bl	8000490 <__aeabi_f2d>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4640      	mov	r0, r8
 8001a06:	4649      	mov	r1, r9
 8001a08:	f7fe fd96 	bl	8000538 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	ec43 2b17 	vmov	d7, r2, r3
 8001a14:	eeb0 0a47 	vmov.f32	s0, s14
 8001a18:	eef0 0a67 	vmov.f32	s1, s15
 8001a1c:	f000 fb14 	bl	8002048 <sin>
 8001a20:	ec53 2b10 	vmov	r2, r3, d0
 8001a24:	4628      	mov	r0, r5
 8001a26:	4631      	mov	r1, r6
 8001a28:	f7fe fd86 	bl	8000538 <__aeabi_dmul>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4615      	mov	r5, r2
 8001a32:	461e      	mov	r6, r3
 8001a34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd17 	bl	800046c <__aeabi_i2d>
 8001a3e:	a346      	add	r3, pc, #280	; (adr r3, 8001b58 <main+0x1c0>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fd78 	bl	8000538 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4690      	mov	r8, r2
 8001a4e:	4699      	mov	r9, r3
 8001a50:	6838      	ldr	r0, [r7, #0]
 8001a52:	f7fe fd1d 	bl	8000490 <__aeabi_f2d>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4640      	mov	r0, r8
 8001a5c:	4649      	mov	r1, r9
 8001a5e:	f7fe fd6b 	bl	8000538 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4628      	mov	r0, r5
 8001a68:	4631      	mov	r1, r6
 8001a6a:	f7fe fe8f 	bl	800078c <__aeabi_ddiv>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7fe fff9 	bl	8000a6c <__aeabi_d2iz>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <main+0x1d8>)
 8001a7e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

	h_m[0] = (int)(h_m0 * 65536); 												// central weight: 2 x fc / fs

	/* Find other weights */
	short m;
	for (m = 1; m < 64; m++){
 8001a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3301      	adds	r3, #1
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	80fb      	strh	r3, [r7, #6]
 8001a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a92:	2b3f      	cmp	r3, #63	; 0x3f
 8001a94:	dd95      	ble.n	80019c2 <main+0x2a>
		h_m[m] = (int)((h_m0 * 65536 * sin(pi * m * h_m0)) / (pi * m * h_m0));
	}

	/* Apply the windowing to improve the attinuation */
	for (m = 1; m < 64; m++){
 8001a96:	2301      	movs	r3, #1
 8001a98:	80fb      	strh	r3, [r7, #6]
 8001a9a:	e043      	b.n	8001b24 <main+0x18c>
		h_m[m] = (int)((float)h_m[m] * cos(pi / 2 * m / 63.0));
 8001a9c:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8001aa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa4:	4a32      	ldr	r2, [pc, #200]	; (8001b70 <main+0x1d8>)
 8001aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aaa:	ee07 3a90 	vmov	s15, r3
 8001aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab2:	ee17 0a90 	vmov	r0, s15
 8001ab6:	f7fe fceb 	bl	8000490 <__aeabi_f2d>
 8001aba:	4605      	mov	r5, r0
 8001abc:	460e      	mov	r6, r1
 8001abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fcd2 	bl	800046c <__aeabi_i2d>
 8001ac8:	a325      	add	r3, pc, #148	; (adr r3, 8001b60 <main+0x1c8>)
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	f7fe fd33 	bl	8000538 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <main+0x1dc>)
 8001ae0:	f7fe fe54 	bl	800078c <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	ec43 2b17 	vmov	d7, r2, r3
 8001aec:	eeb0 0a47 	vmov.f32	s0, s14
 8001af0:	eef0 0a67 	vmov.f32	s1, s15
 8001af4:	f000 fa64 	bl	8001fc0 <cos>
 8001af8:	ec53 2b10 	vmov	r2, r3, d0
 8001afc:	4628      	mov	r0, r5
 8001afe:	4631      	mov	r1, r6
 8001b00:	f7fe fd1a 	bl	8000538 <__aeabi_dmul>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7fe ffae 	bl	8000a6c <__aeabi_d2iz>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <main+0x1d8>)
 8001b14:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (m = 1; m < 64; m++){
		h_m[m] = (int)((h_m0 * 65536 * sin(pi * m * h_m0)) / (pi * m * h_m0));
	}

	/* Apply the windowing to improve the attinuation */
	for (m = 1; m < 64; m++){
 8001b18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	80fb      	strh	r3, [r7, #6]
 8001b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b28:	2b3f      	cmp	r3, #63	; 0x3f
 8001b2a:	ddb7      	ble.n	8001a9c <main+0x104>
		h_m[m] = (int)((float)h_m[m] * cos(pi / 2 * m / 63.0));
	}

	RCC_Configuration();
 8001b2c:	f000 f824 	bl	8001b78 <RCC_Configuration>

	GPIO_Configuration();
 8001b30:	f000 f88e 	bl	8001c50 <GPIO_Configuration>

	ADC_Configuration();
 8001b34:	f000 f8a2 	bl	8001c7c <ADC_Configuration>

	DAC_Configuration();
 8001b38:	f000 f86a 	bl	8001c10 <DAC_Configuration>

	TIM_Configuration(840);
 8001b3c:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001b40:	f000 f82e 	bl	8001ba0 <TIM_Configuration>

	/* Initialize LEDs */
	STM_EVAL_LEDInit(LED3);
 8001b44:	2001      	movs	r0, #1
 8001b46:	f7ff fd1f 	bl	8001588 <STM_EVAL_LEDInit>




	/* Turn on LEDs */
	STM_EVAL_LEDOn(LED3);
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f7ff fd4a 	bl	80015e4 <STM_EVAL_LEDOn>

	/* Infinite loop */
	while (1)
	{
	}
 8001b50:	e7fe      	b.n	8001b50 <main+0x1b8>
 8001b52:	bf00      	nop
 8001b54:	f3af 8000 	nop.w
 8001b58:	f01b866e 	.word	0xf01b866e
 8001b5c:	400921f9 	.word	0x400921f9
 8001b60:	f01b866e 	.word	0xf01b866e
 8001b64:	3ff921f9 	.word	0x3ff921f9
 8001b68:	3c23d70a 	.word	0x3c23d70a
 8001b6c:	47800000 	.word	0x47800000
 8001b70:	200008bc 	.word	0x200008bc
 8001b74:	404f8000 	.word	0x404f8000

08001b78 <RCC_Configuration>:
}

void RCC_Configuration(void){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	/* Initialize all the peripherals here. */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2, ENABLE);
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001b82:	f7ff fb73 	bl	800126c <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA, ENABLE);
 8001b86:	2101      	movs	r1, #1
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f7ff fb2f 	bl	80011ec <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC  | RCC_APB1Periph_TIM5 , ENABLE);
 8001b8e:	2101      	movs	r1, #1
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <RCC_Configuration+0x24>)
 8001b92:	f7ff fb4b 	bl	800122c <RCC_APB1PeriphClockCmd>
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000008 	.word	0x20000008

08001ba0 <TIM_Configuration>:
/* *
 *  @brief Initialize the timer.
 *  @args interval : 84000 = 1ms
 **/

void TIM_Configuration(int interval) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	TIM_OCInitTypeDef TIM_OCInitStruct;

	/* Put your timer initialisation here */

	/* Configure the timer*/
	TIM_TimeBaseInitStruct.TIM_Period = interval - 1;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	623b      	str	r3, [r7, #32]
	TIM_TimeBaseInitStruct.TIM_Prescaler = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	83bb      	strh	r3, [r7, #28]
	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	84bb      	strh	r3, [r7, #36]	; 0x24
	TIM_TimeBaseInitStruct.TIM_RepetitionCounter = TIM_CounterMode_Up;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	TIM_TimeBaseInitStruct.TIM_RepetitionCounter = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Initialize timer 3*/
	TIM_TimeBaseInit(TIM5, &TIM_TimeBaseInitStruct);
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4810      	ldr	r0, [pc, #64]	; (8001c0c <TIM_Configuration+0x6c>)
 8001bca:	f7ff fb9b 	bl	8001304 <TIM_TimeBaseInit>

	/* Initialise the compare capture structure */
	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 8001bce:	2360      	movs	r3, #96	; 0x60
 8001bd0:	813b      	strh	r3, [r7, #8]
	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	817b      	strh	r3, [r7, #10]
	TIM_OCInitStruct.TIM_OutputNState = TIM_OutputNState_Disable;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	81bb      	strh	r3, [r7, #12]
	TIM_OCInitStruct.TIM_Pulse = 1;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	613b      	str	r3, [r7, #16]
	TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 8001bde:	2300      	movs	r3, #0
 8001be0:	82bb      	strh	r3, [r7, #20]
	TIM_OCInitStruct.TIM_OCNPolarity = TIM_OCNPolarity_Low;
 8001be2:	2308      	movs	r3, #8
 8001be4:	82fb      	strh	r3, [r7, #22]
	TIM_OCInitStruct.TIM_OCIdleState = TIM_OCIdleState_Reset;
 8001be6:	2300      	movs	r3, #0
 8001be8:	833b      	strh	r3, [r7, #24]
	TIM_OCInitStruct.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 8001bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bee:	837b      	strh	r3, [r7, #26]
	TIM_OC1Init(TIM5, &TIM_OCInitStruct);
 8001bf0:	f107 0308 	add.w	r3, r7, #8
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <TIM_Configuration+0x6c>)
 8001bf8:	f7ff fc10 	bl	800141c <TIM_OC1Init>

	/* Start the count */
	TIM_Cmd(TIM5, ENABLE);
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4803      	ldr	r0, [pc, #12]	; (8001c0c <TIM_Configuration+0x6c>)
 8001c00:	f7ff fbec 	bl	80013dc <TIM_Cmd>
}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40000c00 	.word	0x40000c00

08001c10 <DAC_Configuration>:
/**
 * Initialize DAC for both chnnels
 */
void DAC_Configuration(void){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
	DAC_InitTypeDef DAC_InitStructure;

	DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
	DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
	DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
	DAC_Init(DAC_Channel_1, &DAC_InitStructure);
 8001c22:	463b      	mov	r3, r7
 8001c24:	4619      	mov	r1, r3
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff f8e6 	bl	8000df8 <DAC_Init>
	DAC_Init(DAC_Channel_2, &DAC_InitStructure);
 8001c2c:	463b      	mov	r3, r7
 8001c2e:	4619      	mov	r1, r3
 8001c30:	2010      	movs	r0, #16
 8001c32:	f7ff f8e1 	bl	8000df8 <DAC_Init>

	DAC_Cmd(DAC_Channel_1, ENABLE);
 8001c36:	2101      	movs	r1, #1
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f7ff f911 	bl	8000e60 <DAC_Cmd>
	DAC_Cmd(DAC_Channel_2, ENABLE);
 8001c3e:	2101      	movs	r1, #1
 8001c40:	2010      	movs	r0, #16
 8001c42:	f7ff f90d 	bl	8000e60 <DAC_Cmd>
}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop

08001c50 <GPIO_Configuration>:

/**
 * Initialize GPIO for pins to be used
 */
void GPIO_Configuration(void){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// We will be sampling Pin 1 and 2 of GPIOA
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AN;
 8001c56:	2303      	movs	r3, #3
 8001c58:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType 	= GPIO_OType_PP;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_5 | GPIO_Pin_4 | GPIO_Pin_2 | GPIO_Pin_1;
 8001c5e:	2336      	movs	r3, #54	; 0x36
 8001c60:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001c66:	463b      	mov	r3, r7
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4803      	ldr	r0, [pc, #12]	; (8001c78 <GPIO_Configuration+0x28>)
 8001c6c:	f7ff fa30 	bl	80010d0 <GPIO_Init>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40020000 	.word	0x40020000

08001c7c <ADC_Configuration>:

/**
 *  Configure hardware that is common to all three ADC
 */
void ADC_Configuration(void){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
	ADC_InitTypeDef 		ADC_InitStructure;
	ADC_CommonInitTypeDef 	ADC_InitCommonStructure;

	/* Fill the data structure common to all  ADCs*/
	ADC_InitCommonStructure.ADC_Mode 	  		= ADC_DualMode_RegSimult;
 8001c82:	2306      	movs	r3, #6
 8001c84:	603b      	str	r3, [r7, #0]
	ADC_InitCommonStructure.ADC_Prescaler 		= ADC_Prescaler_Div2;
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
	ADC_InitCommonStructure.ADC_DMAAccessMode 	= ADC_DMAAccessMode_Disabled;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]

	ADC_CommonInit(&ADC_InitCommonStructure);	// <---------- Initialize the hardware
 8001c8e:	463b      	mov	r3, r7
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe ff69 	bl	8000b68 <ADC_CommonInit>


	/* Fill the structure to initialize the two ADCs */
	ADC_InitStructure.ADC_Resolution 			= ADC_Resolution_12b;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_ScanConvMode 			= DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	753b      	strb	r3, [r7, #20]
	ADC_InitStructure.ADC_ContinuousConvMode	= DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	757b      	strb	r3, [r7, #21]
	ADC_InitStructure.ADC_ExternalTrigConvEdge	= ADC_ExternalTrigConvEdge_Rising;
 8001ca2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ca6:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_ExternalTrigConv		= ADC_ExternalTrigConv_T5_CC1;
 8001ca8:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8001cac:	61fb      	str	r3, [r7, #28]
	ADC_InitStructure.ADC_DataAlign				= ADC_DataAlign_Right;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
	ADC_InitStructure.ADC_NbrOfConversion		= 1;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	/* Initialize the two ADC with the same structure */
	ADC_Init(ADC1, &ADC_InitStructure);
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4815      	ldr	r0, [pc, #84]	; (8001d14 <ADC_Configuration+0x98>)
 8001cc0:	f7fe fefc 	bl	8000abc <ADC_Init>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1,1 ,ADC_SampleTime_3Cycles);
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	2101      	movs	r1, #1
 8001cca:	4812      	ldr	r0, [pc, #72]	; (8001d14 <ADC_Configuration+0x98>)
 8001ccc:	f7fe ff90 	bl	8000bf0 <ADC_RegularChannelConfig>

	ADC_Init(ADC2, &ADC_InitStructure);
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4810      	ldr	r0, [pc, #64]	; (8001d18 <ADC_Configuration+0x9c>)
 8001cd8:	f7fe fef0 	bl	8000abc <ADC_Init>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_2,1 ,ADC_SampleTime_3Cycles);
 8001cdc:	2300      	movs	r3, #0
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	480d      	ldr	r0, [pc, #52]	; (8001d18 <ADC_Configuration+0x9c>)
 8001ce4:	f7fe ff84 	bl	8000bf0 <ADC_RegularChannelConfig>

	ADC_Cmd(ADC1, ENABLE);
 8001ce8:	2101      	movs	r1, #1
 8001cea:	480a      	ldr	r0, [pc, #40]	; (8001d14 <ADC_Configuration+0x98>)
 8001cec:	f7fe ff64 	bl	8000bb8 <ADC_Cmd>
	ADC_Cmd(ADC2, ENABLE);
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	4809      	ldr	r0, [pc, #36]	; (8001d18 <ADC_Configuration+0x9c>)
 8001cf4:	f7fe ff60 	bl	8000bb8 <ADC_Cmd>

	NVIC_EnableIRQ(ADC_IRQn); 					// Enable IRQ for ADC in NVIC
 8001cf8:	2012      	movs	r0, #18
 8001cfa:	f7ff fd53 	bl	80017a4 <NVIC_EnableIRQ>
	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);		// Enable ADC IRQ generation
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f240 2105 	movw	r1, #517	; 0x205
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <ADC_Configuration+0x98>)
 8001d06:	f7ff f84d 	bl	8000da4 <ADC_ITConfig>
}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	; 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40012000 	.word	0x40012000
 8001d18:	40012100 	.word	0x40012100

08001d1c <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8001d26:	bf00      	nop
}
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop

08001d34 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8001d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop

08001d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d4e:	e003      	b.n	8001d58 <LoopCopyDataInit>

08001d50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d56:	3104      	adds	r1, #4

08001d58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d58:	480b      	ldr	r0, [pc, #44]	; (8001d88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d60:	d3f6      	bcc.n	8001d50 <CopyDataInit>
  ldr  r2, =_sbss
 8001d62:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d64:	e002      	b.n	8001d6c <LoopFillZerobss>

08001d66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d68:	f842 3b04 	str.w	r3, [r2], #4

08001d6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d70:	d3f9      	bcc.n	8001d66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d72:	f000 f84b 	bl	8001e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d76:	f000 f8fb 	bl	8001f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d7a:	f7ff fe0d 	bl	8001998 <main>
  bx  lr    
 8001d7e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d80:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001d84:	080032f8 	.word	0x080032f8
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d8c:	20000020 	.word	0x20000020
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001d90:	20000020 	.word	0x20000020
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d94:	200020bc 	.word	0x200020bc

08001d98 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d98:	e7fe      	b.n	8001d98 <CAN1_RX0_IRQHandler>
	...

08001d9c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop

08001dac <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001db0:	e7fe      	b.n	8001db0 <HardFault_Handler+0x4>
 8001db2:	bf00      	nop

08001db4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001db8:	e7fe      	b.n	8001db8 <MemManage_Handler+0x4>
 8001dba:	bf00      	nop

08001dbc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001dc0:	e7fe      	b.n	8001dc0 <BusFault_Handler+0x4>
 8001dc2:	bf00      	nop

08001dc4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001dc8:	e7fe      	b.n	8001dc8 <UsageFault_Handler+0x4>
 8001dca:	bf00      	nop

08001dcc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop

08001ddc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop

08001dec <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop

08001dfc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop

08001e0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e10:	4a16      	ldr	r2, [pc, #88]	; (8001e6c <SystemInit+0x60>)
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <SystemInit+0x60>)
 8001e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001e20:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <SystemInit+0x64>)
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <SystemInit+0x64>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <SystemInit+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001e32:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <SystemInit+0x64>)
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <SystemInit+0x64>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e40:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <SystemInit+0x64>)
 8001e44:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <SystemInit+0x68>)
 8001e46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e48:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <SystemInit+0x64>)
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <SystemInit+0x64>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <SystemInit+0x64>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001e5a:	f000 f80d 	bl	8001e78 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e5e:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <SystemInit+0x60>)
 8001e60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e64:	609a      	str	r2, [r3, #8]
#endif
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00
 8001e70:	40023800 	.word	0x40023800
 8001e74:	24003010 	.word	0x24003010

08001e78 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	2300      	movs	r3, #0
 8001e84:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001e86:	4a36      	ldr	r2, [pc, #216]	; (8001f60 <SetSysClock+0xe8>)
 8001e88:	4b35      	ldr	r3, [pc, #212]	; (8001f60 <SetSysClock+0xe8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001e92:	4b33      	ldr	r3, [pc, #204]	; (8001f60 <SetSysClock+0xe8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d103      	bne.n	8001eb0 <SetSysClock+0x38>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001eae:	d1f0      	bne.n	8001e92 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <SetSysClock+0xe8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	e001      	b.n	8001ec6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d142      	bne.n	8001f52 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001ecc:	4a24      	ldr	r2, [pc, #144]	; (8001f60 <SetSysClock+0xe8>)
 8001ece:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <SetSysClock+0xe8>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001ed8:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <SetSysClock+0xec>)
 8001eda:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <SetSysClock+0xec>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ee2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001ee4:	4a1e      	ldr	r2, [pc, #120]	; (8001f60 <SetSysClock+0xe8>)
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <SetSysClock+0xe8>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001eec:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <SetSysClock+0xe8>)
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <SetSysClock+0xe8>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001ef8:	4a19      	ldr	r2, [pc, #100]	; (8001f60 <SetSysClock+0xe8>)
 8001efa:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <SetSysClock+0xe8>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001f02:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001f04:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <SetSysClock+0xe8>)
 8001f06:	4a18      	ldr	r2, [pc, #96]	; (8001f68 <SetSysClock+0xf0>)
 8001f08:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001f0a:	4a15      	ldr	r2, [pc, #84]	; (8001f60 <SetSysClock+0xe8>)
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <SetSysClock+0xe8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f14:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001f16:	bf00      	nop
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <SetSysClock+0xe8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f9      	beq.n	8001f18 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <SetSysClock+0xf4>)
 8001f26:	f240 6205 	movw	r2, #1541	; 0x605
 8001f2a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <SetSysClock+0xe8>)
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <SetSysClock+0xe8>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f023 0303 	bic.w	r3, r3, #3
 8001f36:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001f38:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <SetSysClock+0xe8>)
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <SetSysClock+0xe8>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f043 0302 	orr.w	r3, r3, #2
 8001f42:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001f44:	bf00      	nop
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <SetSysClock+0xe8>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d1f9      	bne.n	8001f46 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40007000 	.word	0x40007000
 8001f68:	07405408 	.word	0x07405408
 8001f6c:	40023c00 	.word	0x40023c00

08001f70 <__libc_init_array>:
 8001f70:	b570      	push	{r4, r5, r6, lr}
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <__libc_init_array+0x3c>)
 8001f74:	4c0e      	ldr	r4, [pc, #56]	; (8001fb0 <__libc_init_array+0x40>)
 8001f76:	1ae4      	subs	r4, r4, r3
 8001f78:	10a4      	asrs	r4, r4, #2
 8001f7a:	2500      	movs	r5, #0
 8001f7c:	461e      	mov	r6, r3
 8001f7e:	42a5      	cmp	r5, r4
 8001f80:	d004      	beq.n	8001f8c <__libc_init_array+0x1c>
 8001f82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f86:	4798      	blx	r3
 8001f88:	3501      	adds	r5, #1
 8001f8a:	e7f8      	b.n	8001f7e <__libc_init_array+0xe>
 8001f8c:	f001 f8ac 	bl	80030e8 <_init>
 8001f90:	4c08      	ldr	r4, [pc, #32]	; (8001fb4 <__libc_init_array+0x44>)
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <__libc_init_array+0x48>)
 8001f94:	1ae4      	subs	r4, r4, r3
 8001f96:	10a4      	asrs	r4, r4, #2
 8001f98:	2500      	movs	r5, #0
 8001f9a:	461e      	mov	r6, r3
 8001f9c:	42a5      	cmp	r5, r4
 8001f9e:	d004      	beq.n	8001faa <__libc_init_array+0x3a>
 8001fa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fa4:	4798      	blx	r3
 8001fa6:	3501      	adds	r5, #1
 8001fa8:	e7f8      	b.n	8001f9c <__libc_init_array+0x2c>
 8001faa:	bd70      	pop	{r4, r5, r6, pc}
 8001fac:	080032f0 	.word	0x080032f0
 8001fb0:	080032f0 	.word	0x080032f0
 8001fb4:	080032f4 	.word	0x080032f4
 8001fb8:	080032f0 	.word	0x080032f0
 8001fbc:	00000000 	.word	0x00000000

08001fc0 <cos>:
 8001fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001fc2:	ec51 0b10 	vmov	r0, r1, d0
 8001fc6:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <cos+0x80>)
 8001fc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	dc02      	bgt.n	8001fd6 <cos+0x16>
 8001fd0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8002038 <cos+0x78>
 8001fd4:	e016      	b.n	8002004 <cos+0x44>
 8001fd6:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <cos+0x84>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	dd05      	ble.n	8001fe8 <cos+0x28>
 8001fdc:	ee10 2a10 	vmov	r2, s0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	f7fe f8f5 	bl	80001d0 <__aeabi_dsub>
 8001fe6:	e021      	b.n	800202c <cos+0x6c>
 8001fe8:	4668      	mov	r0, sp
 8001fea:	f000 f875 	bl	80020d8 <__ieee754_rem_pio2>
 8001fee:	f000 0003 	and.w	r0, r0, #3
 8001ff2:	2801      	cmp	r0, #1
 8001ff4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001ff8:	ed9d 0b00 	vldr	d0, [sp]
 8001ffc:	d005      	beq.n	800200a <cos+0x4a>
 8001ffe:	2802      	cmp	r0, #2
 8002000:	d006      	beq.n	8002010 <cos+0x50>
 8002002:	b970      	cbnz	r0, 8002022 <cos+0x62>
 8002004:	f000 fa68 	bl	80024d8 <__kernel_cos>
 8002008:	e00e      	b.n	8002028 <cos+0x68>
 800200a:	f000 fe9d 	bl	8002d48 <__kernel_sin>
 800200e:	e001      	b.n	8002014 <cos+0x54>
 8002010:	f000 fa62 	bl	80024d8 <__kernel_cos>
 8002014:	ec53 2b10 	vmov	r2, r3, d0
 8002018:	ee10 0a10 	vmov	r0, s0
 800201c:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002020:	e004      	b.n	800202c <cos+0x6c>
 8002022:	2001      	movs	r0, #1
 8002024:	f000 fe90 	bl	8002d48 <__kernel_sin>
 8002028:	ec51 0b10 	vmov	r0, r1, d0
 800202c:	ec41 0b10 	vmov	d0, r0, r1
 8002030:	b005      	add	sp, #20
 8002032:	f85d fb04 	ldr.w	pc, [sp], #4
 8002036:	bf00      	nop
	...
 8002040:	3fe921fb 	.word	0x3fe921fb
 8002044:	7fefffff 	.word	0x7fefffff

08002048 <sin>:
 8002048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800204a:	ec51 0b10 	vmov	r0, r1, d0
 800204e:	4a20      	ldr	r2, [pc, #128]	; (80020d0 <sin+0x88>)
 8002050:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002054:	4293      	cmp	r3, r2
 8002056:	dc03      	bgt.n	8002060 <sin+0x18>
 8002058:	2000      	movs	r0, #0
 800205a:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80020c8 <sin+0x80>
 800205e:	e017      	b.n	8002090 <sin+0x48>
 8002060:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <sin+0x8c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	dd05      	ble.n	8002072 <sin+0x2a>
 8002066:	ee10 2a10 	vmov	r2, s0
 800206a:	460b      	mov	r3, r1
 800206c:	f7fe f8b0 	bl	80001d0 <__aeabi_dsub>
 8002070:	e022      	b.n	80020b8 <sin+0x70>
 8002072:	4668      	mov	r0, sp
 8002074:	f000 f830 	bl	80020d8 <__ieee754_rem_pio2>
 8002078:	f000 0003 	and.w	r0, r0, #3
 800207c:	2801      	cmp	r0, #1
 800207e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002082:	ed9d 0b00 	vldr	d0, [sp]
 8002086:	d008      	beq.n	800209a <sin+0x52>
 8002088:	2802      	cmp	r0, #2
 800208a:	d009      	beq.n	80020a0 <sin+0x58>
 800208c:	b960      	cbnz	r0, 80020a8 <sin+0x60>
 800208e:	2001      	movs	r0, #1
 8002090:	f000 fe5a 	bl	8002d48 <__kernel_sin>
 8002094:	ec51 0b10 	vmov	r0, r1, d0
 8002098:	e00e      	b.n	80020b8 <sin+0x70>
 800209a:	f000 fa1d 	bl	80024d8 <__kernel_cos>
 800209e:	e7f9      	b.n	8002094 <sin+0x4c>
 80020a0:	2001      	movs	r0, #1
 80020a2:	f000 fe51 	bl	8002d48 <__kernel_sin>
 80020a6:	e001      	b.n	80020ac <sin+0x64>
 80020a8:	f000 fa16 	bl	80024d8 <__kernel_cos>
 80020ac:	ec53 2b10 	vmov	r2, r3, d0
 80020b0:	ee10 0a10 	vmov	r0, s0
 80020b4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80020b8:	ec41 0b10 	vmov	d0, r0, r1
 80020bc:	b005      	add	sp, #20
 80020be:	f85d fb04 	ldr.w	pc, [sp], #4
 80020c2:	bf00      	nop
 80020c4:	f3af 8000 	nop.w
	...
 80020d0:	3fe921fb 	.word	0x3fe921fb
 80020d4:	7fefffff 	.word	0x7fefffff

080020d8 <__ieee754_rem_pio2>:
 80020d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020dc:	ec55 4b10 	vmov	r4, r5, d0
 80020e0:	4bc7      	ldr	r3, [pc, #796]	; (8002400 <__ieee754_rem_pio2+0x328>)
 80020e2:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80020e6:	4598      	cmp	r8, r3
 80020e8:	b08d      	sub	sp, #52	; 0x34
 80020ea:	4682      	mov	sl, r0
 80020ec:	46ab      	mov	fp, r5
 80020ee:	dc06      	bgt.n	80020fe <__ieee754_rem_pio2+0x26>
 80020f0:	2200      	movs	r2, #0
 80020f2:	2300      	movs	r3, #0
 80020f4:	ed8a 0b00 	vstr	d0, [sl]
 80020f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80020fc:	e160      	b.n	80023c0 <__ieee754_rem_pio2+0x2e8>
 80020fe:	4bc1      	ldr	r3, [pc, #772]	; (8002404 <__ieee754_rem_pio2+0x32c>)
 8002100:	4598      	cmp	r8, r3
 8002102:	dc71      	bgt.n	80021e8 <__ieee754_rem_pio2+0x110>
 8002104:	2d00      	cmp	r5, #0
 8002106:	a3b0      	add	r3, pc, #704	; (adr r3, 80023c8 <__ieee754_rem_pio2+0x2f0>)
 8002108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210c:	ee10 0a10 	vmov	r0, s0
 8002110:	4629      	mov	r1, r5
 8002112:	4ebd      	ldr	r6, [pc, #756]	; (8002408 <__ieee754_rem_pio2+0x330>)
 8002114:	dd33      	ble.n	800217e <__ieee754_rem_pio2+0xa6>
 8002116:	f7fe f85b 	bl	80001d0 <__aeabi_dsub>
 800211a:	45b0      	cmp	r8, r6
 800211c:	4604      	mov	r4, r0
 800211e:	460d      	mov	r5, r1
 8002120:	d010      	beq.n	8002144 <__ieee754_rem_pio2+0x6c>
 8002122:	a3ab      	add	r3, pc, #684	; (adr r3, 80023d0 <__ieee754_rem_pio2+0x2f8>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe f852 	bl	80001d0 <__aeabi_dsub>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	e9ca 2300 	strd	r2, r3, [sl]
 8002134:	4620      	mov	r0, r4
 8002136:	4629      	mov	r1, r5
 8002138:	f7fe f84a 	bl	80001d0 <__aeabi_dsub>
 800213c:	a3a4      	add	r3, pc, #656	; (adr r3, 80023d0 <__ieee754_rem_pio2+0x2f8>)
 800213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002142:	e016      	b.n	8002172 <__ieee754_rem_pio2+0x9a>
 8002144:	a3a4      	add	r3, pc, #656	; (adr r3, 80023d8 <__ieee754_rem_pio2+0x300>)
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	f7fe f841 	bl	80001d0 <__aeabi_dsub>
 800214e:	a3a4      	add	r3, pc, #656	; (adr r3, 80023e0 <__ieee754_rem_pio2+0x308>)
 8002150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002154:	4604      	mov	r4, r0
 8002156:	460d      	mov	r5, r1
 8002158:	f7fe f83a 	bl	80001d0 <__aeabi_dsub>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	e9ca 2300 	strd	r2, r3, [sl]
 8002164:	4620      	mov	r0, r4
 8002166:	4629      	mov	r1, r5
 8002168:	f7fe f832 	bl	80001d0 <__aeabi_dsub>
 800216c:	a39c      	add	r3, pc, #624	; (adr r3, 80023e0 <__ieee754_rem_pio2+0x308>)
 800216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002172:	f7fe f82d 	bl	80001d0 <__aeabi_dsub>
 8002176:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800217a:	2001      	movs	r0, #1
 800217c:	e1a2      	b.n	80024c4 <__ieee754_rem_pio2+0x3ec>
 800217e:	f7fe f829 	bl	80001d4 <__adddf3>
 8002182:	45b0      	cmp	r8, r6
 8002184:	4604      	mov	r4, r0
 8002186:	460d      	mov	r5, r1
 8002188:	d010      	beq.n	80021ac <__ieee754_rem_pio2+0xd4>
 800218a:	a391      	add	r3, pc, #580	; (adr r3, 80023d0 <__ieee754_rem_pio2+0x2f8>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe f820 	bl	80001d4 <__adddf3>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	e9ca 2300 	strd	r2, r3, [sl]
 800219c:	4620      	mov	r0, r4
 800219e:	4629      	mov	r1, r5
 80021a0:	f7fe f816 	bl	80001d0 <__aeabi_dsub>
 80021a4:	a38a      	add	r3, pc, #552	; (adr r3, 80023d0 <__ieee754_rem_pio2+0x2f8>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	e016      	b.n	80021da <__ieee754_rem_pio2+0x102>
 80021ac:	a38a      	add	r3, pc, #552	; (adr r3, 80023d8 <__ieee754_rem_pio2+0x300>)
 80021ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b2:	f7fe f80f 	bl	80001d4 <__adddf3>
 80021b6:	a38a      	add	r3, pc, #552	; (adr r3, 80023e0 <__ieee754_rem_pio2+0x308>)
 80021b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021bc:	4604      	mov	r4, r0
 80021be:	460d      	mov	r5, r1
 80021c0:	f7fe f808 	bl	80001d4 <__adddf3>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	e9ca 2300 	strd	r2, r3, [sl]
 80021cc:	4620      	mov	r0, r4
 80021ce:	4629      	mov	r1, r5
 80021d0:	f7fd fffe 	bl	80001d0 <__aeabi_dsub>
 80021d4:	a382      	add	r3, pc, #520	; (adr r3, 80023e0 <__ieee754_rem_pio2+0x308>)
 80021d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021da:	f7fd fffb 	bl	80001d4 <__adddf3>
 80021de:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80021e2:	f04f 30ff 	mov.w	r0, #4294967295
 80021e6:	e16d      	b.n	80024c4 <__ieee754_rem_pio2+0x3ec>
 80021e8:	4b88      	ldr	r3, [pc, #544]	; (800240c <__ieee754_rem_pio2+0x334>)
 80021ea:	4598      	cmp	r8, r3
 80021ec:	f300 80da 	bgt.w	80023a4 <__ieee754_rem_pio2+0x2cc>
 80021f0:	f000 fe64 	bl	8002ebc <fabs>
 80021f4:	ec55 4b10 	vmov	r4, r5, d0
 80021f8:	ee10 0a10 	vmov	r0, s0
 80021fc:	a37a      	add	r3, pc, #488	; (adr r3, 80023e8 <__ieee754_rem_pio2+0x310>)
 80021fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002202:	4629      	mov	r1, r5
 8002204:	f7fe f998 	bl	8000538 <__aeabi_dmul>
 8002208:	2200      	movs	r2, #0
 800220a:	4b81      	ldr	r3, [pc, #516]	; (8002410 <__ieee754_rem_pio2+0x338>)
 800220c:	f7fd ffe2 	bl	80001d4 <__adddf3>
 8002210:	f7fe fc2c 	bl	8000a6c <__aeabi_d2iz>
 8002214:	4681      	mov	r9, r0
 8002216:	f7fe f929 	bl	800046c <__aeabi_i2d>
 800221a:	a36b      	add	r3, pc, #428	; (adr r3, 80023c8 <__ieee754_rem_pio2+0x2f0>)
 800221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002224:	f7fe f988 	bl	8000538 <__aeabi_dmul>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4620      	mov	r0, r4
 800222e:	4629      	mov	r1, r5
 8002230:	f7fd ffce 	bl	80001d0 <__aeabi_dsub>
 8002234:	a366      	add	r3, pc, #408	; (adr r3, 80023d0 <__ieee754_rem_pio2+0x2f8>)
 8002236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223a:	4604      	mov	r4, r0
 800223c:	460d      	mov	r5, r1
 800223e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002242:	f7fe f979 	bl	8000538 <__aeabi_dmul>
 8002246:	f1b9 0f1f 	cmp.w	r9, #31
 800224a:	4606      	mov	r6, r0
 800224c:	460f      	mov	r7, r1
 800224e:	dc06      	bgt.n	800225e <__ieee754_rem_pio2+0x186>
 8002250:	f109 32ff 	add.w	r2, r9, #4294967295
 8002254:	4b6f      	ldr	r3, [pc, #444]	; (8002414 <__ieee754_rem_pio2+0x33c>)
 8002256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225a:	4598      	cmp	r8, r3
 800225c:	d172      	bne.n	8002344 <__ieee754_rem_pio2+0x26c>
 800225e:	463b      	mov	r3, r7
 8002260:	4632      	mov	r2, r6
 8002262:	4620      	mov	r0, r4
 8002264:	4629      	mov	r1, r5
 8002266:	f7fd ffb3 	bl	80001d0 <__aeabi_dsub>
 800226a:	ea4f 5828 	mov.w	r8, r8, asr #20
 800226e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002272:	ebc3 0308 	rsb	r3, r3, r8
 8002276:	2b10      	cmp	r3, #16
 8002278:	e9ca 0100 	strd	r0, r1, [sl]
 800227c:	dd6d      	ble.n	800235a <__ieee754_rem_pio2+0x282>
 800227e:	a356      	add	r3, pc, #344	; (adr r3, 80023d8 <__ieee754_rem_pio2+0x300>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002288:	f7fe f956 	bl	8000538 <__aeabi_dmul>
 800228c:	4606      	mov	r6, r0
 800228e:	460f      	mov	r7, r1
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4620      	mov	r0, r4
 8002296:	4629      	mov	r1, r5
 8002298:	f7fd ff9a 	bl	80001d0 <__aeabi_dsub>
 800229c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4620      	mov	r0, r4
 80022a6:	4629      	mov	r1, r5
 80022a8:	f7fd ff92 	bl	80001d0 <__aeabi_dsub>
 80022ac:	4632      	mov	r2, r6
 80022ae:	463b      	mov	r3, r7
 80022b0:	f7fd ff8e 	bl	80001d0 <__aeabi_dsub>
 80022b4:	a34a      	add	r3, pc, #296	; (adr r3, 80023e0 <__ieee754_rem_pio2+0x308>)
 80022b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ba:	4604      	mov	r4, r0
 80022bc:	460d      	mov	r5, r1
 80022be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80022c2:	f7fe f939 	bl	8000538 <__aeabi_dmul>
 80022c6:	4622      	mov	r2, r4
 80022c8:	462b      	mov	r3, r5
 80022ca:	f7fd ff81 	bl	80001d0 <__aeabi_dsub>
 80022ce:	460b      	mov	r3, r1
 80022d0:	4602      	mov	r2, r0
 80022d2:	4606      	mov	r6, r0
 80022d4:	460f      	mov	r7, r1
 80022d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80022da:	f7fd ff79 	bl	80001d0 <__aeabi_dsub>
 80022de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80022e2:	ebc3 0808 	rsb	r8, r3, r8
 80022e6:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
 80022ea:	e9ca 0100 	strd	r0, r1, [sl]
 80022ee:	dd32      	ble.n	8002356 <__ieee754_rem_pio2+0x27e>
 80022f0:	a33f      	add	r3, pc, #252	; (adr r3, 80023f0 <__ieee754_rem_pio2+0x318>)
 80022f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80022fa:	f7fe f91d 	bl	8000538 <__aeabi_dmul>
 80022fe:	4606      	mov	r6, r0
 8002300:	460f      	mov	r7, r1
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800230a:	f7fd ff61 	bl	80001d0 <__aeabi_dsub>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4604      	mov	r4, r0
 8002314:	460d      	mov	r5, r1
 8002316:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800231a:	f7fd ff59 	bl	80001d0 <__aeabi_dsub>
 800231e:	4632      	mov	r2, r6
 8002320:	463b      	mov	r3, r7
 8002322:	f7fd ff55 	bl	80001d0 <__aeabi_dsub>
 8002326:	a334      	add	r3, pc, #208	; (adr r3, 80023f8 <__ieee754_rem_pio2+0x320>)
 8002328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232c:	4606      	mov	r6, r0
 800232e:	460f      	mov	r7, r1
 8002330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002334:	f7fe f900 	bl	8000538 <__aeabi_dmul>
 8002338:	4632      	mov	r2, r6
 800233a:	463b      	mov	r3, r7
 800233c:	f7fd ff48 	bl	80001d0 <__aeabi_dsub>
 8002340:	4606      	mov	r6, r0
 8002342:	460f      	mov	r7, r1
 8002344:	4632      	mov	r2, r6
 8002346:	463b      	mov	r3, r7
 8002348:	4620      	mov	r0, r4
 800234a:	4629      	mov	r1, r5
 800234c:	f7fd ff40 	bl	80001d0 <__aeabi_dsub>
 8002350:	e9ca 0100 	strd	r0, r1, [sl]
 8002354:	e001      	b.n	800235a <__ieee754_rem_pio2+0x282>
 8002356:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800235a:	ed9a 7b00 	vldr	d7, [sl]
 800235e:	4620      	mov	r0, r4
 8002360:	ec53 2b17 	vmov	r2, r3, d7
 8002364:	4629      	mov	r1, r5
 8002366:	ed8d 7b02 	vstr	d7, [sp, #8]
 800236a:	f7fd ff31 	bl	80001d0 <__aeabi_dsub>
 800236e:	4632      	mov	r2, r6
 8002370:	463b      	mov	r3, r7
 8002372:	f7fd ff2d 	bl	80001d0 <__aeabi_dsub>
 8002376:	f1bb 0f00 	cmp.w	fp, #0
 800237a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800237e:	f280 80a0 	bge.w	80024c2 <__ieee754_rem_pio2+0x3ea>
 8002382:	9b02      	ldr	r3, [sp, #8]
 8002384:	f8ca 3000 	str.w	r3, [sl]
 8002388:	9b03      	ldr	r3, [sp, #12]
 800238a:	f8ca 0008 	str.w	r0, [sl, #8]
 800238e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002392:	f8ca 3004 	str.w	r3, [sl, #4]
 8002396:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800239a:	f8ca 300c 	str.w	r3, [sl, #12]
 800239e:	f1c9 0000 	rsb	r0, r9, #0
 80023a2:	e08f      	b.n	80024c4 <__ieee754_rem_pio2+0x3ec>
 80023a4:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <__ieee754_rem_pio2+0x340>)
 80023a6:	4598      	cmp	r8, r3
 80023a8:	dd38      	ble.n	800241c <__ieee754_rem_pio2+0x344>
 80023aa:	ee10 2a10 	vmov	r2, s0
 80023ae:	462b      	mov	r3, r5
 80023b0:	4620      	mov	r0, r4
 80023b2:	4629      	mov	r1, r5
 80023b4:	f7fd ff0c 	bl	80001d0 <__aeabi_dsub>
 80023b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80023bc:	e9ca 0100 	strd	r0, r1, [sl]
 80023c0:	2000      	movs	r0, #0
 80023c2:	e07f      	b.n	80024c4 <__ieee754_rem_pio2+0x3ec>
 80023c4:	f3af 8000 	nop.w
 80023c8:	54400000 	.word	0x54400000
 80023cc:	3ff921fb 	.word	0x3ff921fb
 80023d0:	1a626331 	.word	0x1a626331
 80023d4:	3dd0b461 	.word	0x3dd0b461
 80023d8:	1a600000 	.word	0x1a600000
 80023dc:	3dd0b461 	.word	0x3dd0b461
 80023e0:	2e037073 	.word	0x2e037073
 80023e4:	3ba3198a 	.word	0x3ba3198a
 80023e8:	6dc9c883 	.word	0x6dc9c883
 80023ec:	3fe45f30 	.word	0x3fe45f30
 80023f0:	2e000000 	.word	0x2e000000
 80023f4:	3ba3198a 	.word	0x3ba3198a
 80023f8:	252049c1 	.word	0x252049c1
 80023fc:	397b839a 	.word	0x397b839a
 8002400:	3fe921fb 	.word	0x3fe921fb
 8002404:	4002d97b 	.word	0x4002d97b
 8002408:	3ff921fb 	.word	0x3ff921fb
 800240c:	413921fb 	.word	0x413921fb
 8002410:	3fe00000 	.word	0x3fe00000
 8002414:	08003118 	.word	0x08003118
 8002418:	7fefffff 	.word	0x7fefffff
 800241c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8002420:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8002424:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8002428:	4620      	mov	r0, r4
 800242a:	460d      	mov	r5, r1
 800242c:	f7fe fb1e 	bl	8000a6c <__aeabi_d2iz>
 8002430:	f7fe f81c 	bl	800046c <__aeabi_i2d>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4620      	mov	r0, r4
 800243a:	4629      	mov	r1, r5
 800243c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002440:	f7fd fec6 	bl	80001d0 <__aeabi_dsub>
 8002444:	2200      	movs	r2, #0
 8002446:	4b21      	ldr	r3, [pc, #132]	; (80024cc <__ieee754_rem_pio2+0x3f4>)
 8002448:	f7fe f876 	bl	8000538 <__aeabi_dmul>
 800244c:	460d      	mov	r5, r1
 800244e:	4604      	mov	r4, r0
 8002450:	f7fe fb0c 	bl	8000a6c <__aeabi_d2iz>
 8002454:	f7fe f80a 	bl	800046c <__aeabi_i2d>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4620      	mov	r0, r4
 800245e:	4629      	mov	r1, r5
 8002460:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002464:	f7fd feb4 	bl	80001d0 <__aeabi_dsub>
 8002468:	2200      	movs	r2, #0
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <__ieee754_rem_pio2+0x3f4>)
 800246c:	f7fe f864 	bl	8000538 <__aeabi_dmul>
 8002470:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002474:	ad0c      	add	r5, sp, #48	; 0x30
 8002476:	2403      	movs	r4, #3
 8002478:	2200      	movs	r2, #0
 800247a:	2300      	movs	r3, #0
 800247c:	e975 0102 	ldrd	r0, r1, [r5, #-8]!
 8002480:	1e67      	subs	r7, r4, #1
 8002482:	f7fe fac1 	bl	8000a08 <__aeabi_dcmpeq>
 8002486:	b108      	cbz	r0, 800248c <__ieee754_rem_pio2+0x3b4>
 8002488:	463c      	mov	r4, r7
 800248a:	e7f5      	b.n	8002478 <__ieee754_rem_pio2+0x3a0>
 800248c:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <__ieee754_rem_pio2+0x3f8>)
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	2302      	movs	r3, #2
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	4632      	mov	r2, r6
 8002496:	4623      	mov	r3, r4
 8002498:	4651      	mov	r1, sl
 800249a:	a806      	add	r0, sp, #24
 800249c:	f000 f904 	bl	80026a8 <__kernel_rem_pio2>
 80024a0:	f1bb 0f00 	cmp.w	fp, #0
 80024a4:	da0e      	bge.n	80024c4 <__ieee754_rem_pio2+0x3ec>
 80024a6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80024aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80024ae:	f8ca 3004 	str.w	r3, [sl, #4]
 80024b2:	f8da 300c 	ldr.w	r3, [sl, #12]
 80024b6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80024ba:	f8ca 300c 	str.w	r3, [sl, #12]
 80024be:	4240      	negs	r0, r0
 80024c0:	e000      	b.n	80024c4 <__ieee754_rem_pio2+0x3ec>
 80024c2:	4648      	mov	r0, r9
 80024c4:	b00d      	add	sp, #52	; 0x34
 80024c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024ca:	bf00      	nop
 80024cc:	41700000 	.word	0x41700000
 80024d0:	08003198 	.word	0x08003198
 80024d4:	00000000 	.word	0x00000000

080024d8 <__kernel_cos>:
 80024d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024dc:	ec59 8b10 	vmov	r8, r9, d0
 80024e0:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 80024e4:	b085      	sub	sp, #20
 80024e6:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80024ea:	ed8d 1b00 	vstr	d1, [sp]
 80024ee:	da07      	bge.n	8002500 <__kernel_cos+0x28>
 80024f0:	ee10 0a10 	vmov	r0, s0
 80024f4:	4649      	mov	r1, r9
 80024f6:	f7fe fab9 	bl	8000a6c <__aeabi_d2iz>
 80024fa:	2800      	cmp	r0, #0
 80024fc:	f000 80a6 	beq.w	800264c <__kernel_cos+0x174>
 8002500:	4642      	mov	r2, r8
 8002502:	464b      	mov	r3, r9
 8002504:	4640      	mov	r0, r8
 8002506:	4649      	mov	r1, r9
 8002508:	f7fe f816 	bl	8000538 <__aeabi_dmul>
 800250c:	a359      	add	r3, pc, #356	; (adr r3, 8002674 <__kernel_cos+0x19c>)
 800250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002512:	4604      	mov	r4, r0
 8002514:	460d      	mov	r5, r1
 8002516:	f7fe f80f 	bl	8000538 <__aeabi_dmul>
 800251a:	a358      	add	r3, pc, #352	; (adr r3, 800267c <__kernel_cos+0x1a4>)
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	f7fd fe58 	bl	80001d4 <__adddf3>
 8002524:	4622      	mov	r2, r4
 8002526:	462b      	mov	r3, r5
 8002528:	f7fe f806 	bl	8000538 <__aeabi_dmul>
 800252c:	a355      	add	r3, pc, #340	; (adr r3, 8002684 <__kernel_cos+0x1ac>)
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	f7fd fe4d 	bl	80001d0 <__aeabi_dsub>
 8002536:	4622      	mov	r2, r4
 8002538:	462b      	mov	r3, r5
 800253a:	f7fd fffd 	bl	8000538 <__aeabi_dmul>
 800253e:	a353      	add	r3, pc, #332	; (adr r3, 800268c <__kernel_cos+0x1b4>)
 8002540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002544:	f7fd fe46 	bl	80001d4 <__adddf3>
 8002548:	4622      	mov	r2, r4
 800254a:	462b      	mov	r3, r5
 800254c:	f7fd fff4 	bl	8000538 <__aeabi_dmul>
 8002550:	a350      	add	r3, pc, #320	; (adr r3, 8002694 <__kernel_cos+0x1bc>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	f7fd fe3b 	bl	80001d0 <__aeabi_dsub>
 800255a:	4622      	mov	r2, r4
 800255c:	462b      	mov	r3, r5
 800255e:	f7fd ffeb 	bl	8000538 <__aeabi_dmul>
 8002562:	a34e      	add	r3, pc, #312	; (adr r3, 800269c <__kernel_cos+0x1c4>)
 8002564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002568:	f7fd fe34 	bl	80001d4 <__adddf3>
 800256c:	462b      	mov	r3, r5
 800256e:	4622      	mov	r2, r4
 8002570:	f7fd ffe2 	bl	8000538 <__aeabi_dmul>
 8002574:	4b3a      	ldr	r3, [pc, #232]	; (8002660 <__kernel_cos+0x188>)
 8002576:	429f      	cmp	r7, r3
 8002578:	4682      	mov	sl, r0
 800257a:	468b      	mov	fp, r1
 800257c:	dc26      	bgt.n	80025cc <__kernel_cos+0xf4>
 800257e:	2200      	movs	r2, #0
 8002580:	4b38      	ldr	r3, [pc, #224]	; (8002664 <__kernel_cos+0x18c>)
 8002582:	4620      	mov	r0, r4
 8002584:	4629      	mov	r1, r5
 8002586:	f7fd ffd7 	bl	8000538 <__aeabi_dmul>
 800258a:	4652      	mov	r2, sl
 800258c:	4606      	mov	r6, r0
 800258e:	460f      	mov	r7, r1
 8002590:	465b      	mov	r3, fp
 8002592:	4620      	mov	r0, r4
 8002594:	4629      	mov	r1, r5
 8002596:	f7fd ffcf 	bl	8000538 <__aeabi_dmul>
 800259a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800259e:	4604      	mov	r4, r0
 80025a0:	460d      	mov	r5, r1
 80025a2:	4640      	mov	r0, r8
 80025a4:	4649      	mov	r1, r9
 80025a6:	f7fd ffc7 	bl	8000538 <__aeabi_dmul>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4620      	mov	r0, r4
 80025b0:	4629      	mov	r1, r5
 80025b2:	f7fd fe0d 	bl	80001d0 <__aeabi_dsub>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4630      	mov	r0, r6
 80025bc:	4639      	mov	r1, r7
 80025be:	f7fd fe07 	bl	80001d0 <__aeabi_dsub>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	2000      	movs	r0, #0
 80025c8:	4927      	ldr	r1, [pc, #156]	; (8002668 <__kernel_cos+0x190>)
 80025ca:	e03c      	b.n	8002646 <__kernel_cos+0x16e>
 80025cc:	4b27      	ldr	r3, [pc, #156]	; (800266c <__kernel_cos+0x194>)
 80025ce:	4926      	ldr	r1, [pc, #152]	; (8002668 <__kernel_cos+0x190>)
 80025d0:	429f      	cmp	r7, r3
 80025d2:	bfd7      	itett	le
 80025d4:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 80025d8:	4f25      	ldrgt	r7, [pc, #148]	; (8002670 <__kernel_cos+0x198>)
 80025da:	2200      	movle	r2, #0
 80025dc:	4616      	movle	r6, r2
 80025de:	bfd4      	ite	le
 80025e0:	461f      	movle	r7, r3
 80025e2:	2600      	movgt	r6, #0
 80025e4:	4632      	mov	r2, r6
 80025e6:	463b      	mov	r3, r7
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7fd fdf1 	bl	80001d0 <__aeabi_dsub>
 80025ee:	2200      	movs	r2, #0
 80025f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <__kernel_cos+0x18c>)
 80025f6:	4620      	mov	r0, r4
 80025f8:	4629      	mov	r1, r5
 80025fa:	f7fd ff9d 	bl	8000538 <__aeabi_dmul>
 80025fe:	4632      	mov	r2, r6
 8002600:	463b      	mov	r3, r7
 8002602:	f7fd fde5 	bl	80001d0 <__aeabi_dsub>
 8002606:	4652      	mov	r2, sl
 8002608:	4606      	mov	r6, r0
 800260a:	460f      	mov	r7, r1
 800260c:	465b      	mov	r3, fp
 800260e:	4620      	mov	r0, r4
 8002610:	4629      	mov	r1, r5
 8002612:	f7fd ff91 	bl	8000538 <__aeabi_dmul>
 8002616:	e9dd 2300 	ldrd	r2, r3, [sp]
 800261a:	4604      	mov	r4, r0
 800261c:	460d      	mov	r5, r1
 800261e:	4640      	mov	r0, r8
 8002620:	4649      	mov	r1, r9
 8002622:	f7fd ff89 	bl	8000538 <__aeabi_dmul>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4620      	mov	r0, r4
 800262c:	4629      	mov	r1, r5
 800262e:	f7fd fdcf 	bl	80001d0 <__aeabi_dsub>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4630      	mov	r0, r6
 8002638:	4639      	mov	r1, r7
 800263a:	f7fd fdc9 	bl	80001d0 <__aeabi_dsub>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002646:	f7fd fdc3 	bl	80001d0 <__aeabi_dsub>
 800264a:	e001      	b.n	8002650 <__kernel_cos+0x178>
 800264c:	4906      	ldr	r1, [pc, #24]	; (8002668 <__kernel_cos+0x190>)
 800264e:	2000      	movs	r0, #0
 8002650:	ec41 0b10 	vmov	d0, r0, r1
 8002654:	b005      	add	sp, #20
 8002656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800265a:	bf00      	nop
 800265c:	f3af 8000 	nop.w
 8002660:	3fd33332 	.word	0x3fd33332
 8002664:	3fe00000 	.word	0x3fe00000
 8002668:	3ff00000 	.word	0x3ff00000
 800266c:	3fe90000 	.word	0x3fe90000
 8002670:	3fd20000 	.word	0x3fd20000
 8002674:	be8838d4 	.word	0xbe8838d4
 8002678:	bda8fae9 	.word	0xbda8fae9
 800267c:	bdb4b1c4 	.word	0xbdb4b1c4
 8002680:	3e21ee9e 	.word	0x3e21ee9e
 8002684:	809c52ad 	.word	0x809c52ad
 8002688:	3e927e4f 	.word	0x3e927e4f
 800268c:	19cb1590 	.word	0x19cb1590
 8002690:	3efa01a0 	.word	0x3efa01a0
 8002694:	16c15177 	.word	0x16c15177
 8002698:	3f56c16c 	.word	0x3f56c16c
 800269c:	5555554c 	.word	0x5555554c
 80026a0:	3fa55555 	.word	0x3fa55555
 80026a4:	00000000 	.word	0x00000000

080026a8 <__kernel_rem_pio2>:
 80026a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026ac:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80026b0:	2418      	movs	r4, #24
 80026b2:	9306      	str	r3, [sp, #24]
 80026b4:	9101      	str	r1, [sp, #4]
 80026b6:	4bba      	ldr	r3, [pc, #744]	; (80029a0 <__kernel_rem_pio2+0x2f8>)
 80026b8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80026ba:	9009      	str	r0, [sp, #36]	; 0x24
 80026bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80026c0:	9302      	str	r3, [sp, #8]
 80026c2:	9b06      	ldr	r3, [sp, #24]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	9305      	str	r3, [sp, #20]
 80026c8:	1ed3      	subs	r3, r2, #3
 80026ca:	fb93 f4f4 	sdiv	r4, r3, r4
 80026ce:	f06f 0317 	mvn.w	r3, #23
 80026d2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80026d6:	fb04 3303 	mla	r3, r4, r3, r3
 80026da:	eb03 0802 	add.w	r8, r3, r2
 80026de:	9b02      	ldr	r3, [sp, #8]
 80026e0:	9a05      	ldr	r2, [sp, #20]
 80026e2:	eb03 0a02 	add.w	sl, r3, r2
 80026e6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80026e8:	1aa7      	subs	r7, r4, r2
 80026ea:	ae20      	add	r6, sp, #128	; 0x80
 80026ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80026f0:	2500      	movs	r5, #0
 80026f2:	4555      	cmp	r5, sl
 80026f4:	dc0c      	bgt.n	8002710 <__kernel_rem_pio2+0x68>
 80026f6:	42ef      	cmn	r7, r5
 80026f8:	d404      	bmi.n	8002704 <__kernel_rem_pio2+0x5c>
 80026fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80026fe:	f7fd feb5 	bl	800046c <__aeabi_i2d>
 8002702:	e001      	b.n	8002708 <__kernel_rem_pio2+0x60>
 8002704:	2000      	movs	r0, #0
 8002706:	2100      	movs	r1, #0
 8002708:	e8e6 0102 	strd	r0, r1, [r6], #8
 800270c:	3501      	adds	r5, #1
 800270e:	e7f0      	b.n	80026f2 <__kernel_rem_pio2+0x4a>
 8002710:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8002714:	2600      	movs	r6, #0
 8002716:	9b02      	ldr	r3, [sp, #8]
 8002718:	429e      	cmp	r6, r3
 800271a:	dc27      	bgt.n	800276c <__kernel_rem_pio2+0xc4>
 800271c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800271e:	9304      	str	r3, [sp, #16]
 8002720:	9b06      	ldr	r3, [sp, #24]
 8002722:	199d      	adds	r5, r3, r6
 8002724:	ab20      	add	r3, sp, #128	; 0x80
 8002726:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800272a:	9308      	str	r3, [sp, #32]
 800272c:	f04f 0900 	mov.w	r9, #0
 8002730:	f04f 0a00 	mov.w	sl, #0
 8002734:	2700      	movs	r7, #0
 8002736:	9b05      	ldr	r3, [sp, #20]
 8002738:	429f      	cmp	r7, r3
 800273a:	dc13      	bgt.n	8002764 <__kernel_rem_pio2+0xbc>
 800273c:	9908      	ldr	r1, [sp, #32]
 800273e:	9d04      	ldr	r5, [sp, #16]
 8002740:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8002744:	9108      	str	r1, [sp, #32]
 8002746:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800274a:	9504      	str	r5, [sp, #16]
 800274c:	f7fd fef4 	bl	8000538 <__aeabi_dmul>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4648      	mov	r0, r9
 8002756:	4651      	mov	r1, sl
 8002758:	f7fd fd3c 	bl	80001d4 <__adddf3>
 800275c:	3701      	adds	r7, #1
 800275e:	4681      	mov	r9, r0
 8002760:	468a      	mov	sl, r1
 8002762:	e7e8      	b.n	8002736 <__kernel_rem_pio2+0x8e>
 8002764:	e8ab 0600 	stmia.w	fp!, {r9, sl}
 8002768:	3601      	adds	r6, #1
 800276a:	e7d4      	b.n	8002716 <__kernel_rem_pio2+0x6e>
 800276c:	9b02      	ldr	r3, [sp, #8]
 800276e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002772:	aa0c      	add	r2, sp, #48	; 0x30
 8002774:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002778:	930a      	str	r3, [sp, #40]	; 0x28
 800277a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800277c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002780:	930b      	str	r3, [sp, #44]	; 0x2c
 8002782:	ab98      	add	r3, sp, #608	; 0x260
 8002784:	f10b 5a00 	add.w	sl, fp, #536870912	; 0x20000000
 8002788:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800278c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002790:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8002794:	aa98      	add	r2, sp, #608	; 0x260
 8002796:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800279a:	eb02 0903 	add.w	r9, r2, r3
 800279e:	9308      	str	r3, [sp, #32]
 80027a0:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 80027a4:	f04f 0a00 	mov.w	sl, #0
 80027a8:	ebca 030b 	rsb	r3, sl, fp
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	dd25      	ble.n	80027fc <__kernel_rem_pio2+0x154>
 80027b0:	2200      	movs	r2, #0
 80027b2:	4b7c      	ldr	r3, [pc, #496]	; (80029a4 <__kernel_rem_pio2+0x2fc>)
 80027b4:	4630      	mov	r0, r6
 80027b6:	4639      	mov	r1, r7
 80027b8:	f7fd febe 	bl	8000538 <__aeabi_dmul>
 80027bc:	f7fe f956 	bl	8000a6c <__aeabi_d2iz>
 80027c0:	f7fd fe54 	bl	800046c <__aeabi_i2d>
 80027c4:	2200      	movs	r2, #0
 80027c6:	4b78      	ldr	r3, [pc, #480]	; (80029a8 <__kernel_rem_pio2+0x300>)
 80027c8:	4604      	mov	r4, r0
 80027ca:	460d      	mov	r5, r1
 80027cc:	f7fd feb4 	bl	8000538 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4630      	mov	r0, r6
 80027d6:	4639      	mov	r1, r7
 80027d8:	f7fd fcfa 	bl	80001d0 <__aeabi_dsub>
 80027dc:	f7fe f946 	bl	8000a6c <__aeabi_d2iz>
 80027e0:	ab0c      	add	r3, sp, #48	; 0x30
 80027e2:	4629      	mov	r1, r5
 80027e4:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 80027e8:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 80027ec:	4620      	mov	r0, r4
 80027ee:	f7fd fcf1 	bl	80001d4 <__adddf3>
 80027f2:	f10a 0a01 	add.w	sl, sl, #1
 80027f6:	4606      	mov	r6, r0
 80027f8:	460f      	mov	r7, r1
 80027fa:	e7d5      	b.n	80027a8 <__kernel_rem_pio2+0x100>
 80027fc:	ec47 6b10 	vmov	d0, r6, r7
 8002800:	4640      	mov	r0, r8
 8002802:	f000 fbe9 	bl	8002fd8 <scalbn>
 8002806:	ec55 4b10 	vmov	r4, r5, d0
 800280a:	2200      	movs	r2, #0
 800280c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002810:	ee10 0a10 	vmov	r0, s0
 8002814:	4629      	mov	r1, r5
 8002816:	f7fd fe8f 	bl	8000538 <__aeabi_dmul>
 800281a:	ec41 0b10 	vmov	d0, r0, r1
 800281e:	f000 fb57 	bl	8002ed0 <floor>
 8002822:	2200      	movs	r2, #0
 8002824:	ec51 0b10 	vmov	r0, r1, d0
 8002828:	4b60      	ldr	r3, [pc, #384]	; (80029ac <__kernel_rem_pio2+0x304>)
 800282a:	f7fd fe85 	bl	8000538 <__aeabi_dmul>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4620      	mov	r0, r4
 8002834:	4629      	mov	r1, r5
 8002836:	f7fd fccb 	bl	80001d0 <__aeabi_dsub>
 800283a:	460d      	mov	r5, r1
 800283c:	4604      	mov	r4, r0
 800283e:	f7fe f915 	bl	8000a6c <__aeabi_d2iz>
 8002842:	9004      	str	r0, [sp, #16]
 8002844:	f7fd fe12 	bl	800046c <__aeabi_i2d>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4620      	mov	r0, r4
 800284e:	4629      	mov	r1, r5
 8002850:	f7fd fcbe 	bl	80001d0 <__aeabi_dsub>
 8002854:	f1b8 0f00 	cmp.w	r8, #0
 8002858:	4606      	mov	r6, r0
 800285a:	460f      	mov	r7, r1
 800285c:	dd15      	ble.n	800288a <__kernel_rem_pio2+0x1e2>
 800285e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8002862:	ab0c      	add	r3, sp, #48	; 0x30
 8002864:	f1c8 0018 	rsb	r0, r8, #24
 8002868:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800286c:	9c04      	ldr	r4, [sp, #16]
 800286e:	fa42 f300 	asr.w	r3, r2, r0
 8002872:	441c      	add	r4, r3
 8002874:	4083      	lsls	r3, r0
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	aa0c      	add	r2, sp, #48	; 0x30
 800287a:	f1c8 0017 	rsb	r0, r8, #23
 800287e:	9404      	str	r4, [sp, #16]
 8002880:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002884:	fa43 fa00 	asr.w	sl, r3, r0
 8002888:	e00f      	b.n	80028aa <__kernel_rem_pio2+0x202>
 800288a:	d107      	bne.n	800289c <__kernel_rem_pio2+0x1f4>
 800288c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002890:	aa0c      	add	r2, sp, #48	; 0x30
 8002892:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002896:	ea4f 5ae0 	mov.w	sl, r0, asr #23
 800289a:	e006      	b.n	80028aa <__kernel_rem_pio2+0x202>
 800289c:	2200      	movs	r2, #0
 800289e:	4b44      	ldr	r3, [pc, #272]	; (80029b0 <__kernel_rem_pio2+0x308>)
 80028a0:	f7fe f8d0 	bl	8000a44 <__aeabi_dcmpge>
 80028a4:	b928      	cbnz	r0, 80028b2 <__kernel_rem_pio2+0x20a>
 80028a6:	4682      	mov	sl, r0
 80028a8:	e052      	b.n	8002950 <__kernel_rem_pio2+0x2a8>
 80028aa:	f1ba 0f00 	cmp.w	sl, #0
 80028ae:	dc02      	bgt.n	80028b6 <__kernel_rem_pio2+0x20e>
 80028b0:	e04e      	b.n	8002950 <__kernel_rem_pio2+0x2a8>
 80028b2:	f04f 0a02 	mov.w	sl, #2
 80028b6:	9b04      	ldr	r3, [sp, #16]
 80028b8:	2200      	movs	r2, #0
 80028ba:	3301      	adds	r3, #1
 80028bc:	9304      	str	r3, [sp, #16]
 80028be:	4614      	mov	r4, r2
 80028c0:	4593      	cmp	fp, r2
 80028c2:	dd11      	ble.n	80028e8 <__kernel_rem_pio2+0x240>
 80028c4:	ab0c      	add	r3, sp, #48	; 0x30
 80028c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ca:	b91c      	cbnz	r4, 80028d4 <__kernel_rem_pio2+0x22c>
 80028cc:	b153      	cbz	r3, 80028e4 <__kernel_rem_pio2+0x23c>
 80028ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80028d2:	e003      	b.n	80028dc <__kernel_rem_pio2+0x234>
 80028d4:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 80028d8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80028dc:	a90c      	add	r1, sp, #48	; 0x30
 80028de:	2401      	movs	r4, #1
 80028e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80028e4:	3201      	adds	r2, #1
 80028e6:	e7eb      	b.n	80028c0 <__kernel_rem_pio2+0x218>
 80028e8:	f1b8 0f00 	cmp.w	r8, #0
 80028ec:	dd17      	ble.n	800291e <__kernel_rem_pio2+0x276>
 80028ee:	f1b8 0f01 	cmp.w	r8, #1
 80028f2:	d00a      	beq.n	800290a <__kernel_rem_pio2+0x262>
 80028f4:	f1b8 0f02 	cmp.w	r8, #2
 80028f8:	d111      	bne.n	800291e <__kernel_rem_pio2+0x276>
 80028fa:	f10b 32ff 	add.w	r2, fp, #4294967295
 80028fe:	ab0c      	add	r3, sp, #48	; 0x30
 8002900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002904:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002908:	e006      	b.n	8002918 <__kernel_rem_pio2+0x270>
 800290a:	f10b 32ff 	add.w	r2, fp, #4294967295
 800290e:	ab0c      	add	r3, sp, #48	; 0x30
 8002910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002914:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002918:	a90c      	add	r1, sp, #48	; 0x30
 800291a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800291e:	f1ba 0f02 	cmp.w	sl, #2
 8002922:	d115      	bne.n	8002950 <__kernel_rem_pio2+0x2a8>
 8002924:	4632      	mov	r2, r6
 8002926:	463b      	mov	r3, r7
 8002928:	2000      	movs	r0, #0
 800292a:	4922      	ldr	r1, [pc, #136]	; (80029b4 <__kernel_rem_pio2+0x30c>)
 800292c:	f7fd fc50 	bl	80001d0 <__aeabi_dsub>
 8002930:	4606      	mov	r6, r0
 8002932:	460f      	mov	r7, r1
 8002934:	b164      	cbz	r4, 8002950 <__kernel_rem_pio2+0x2a8>
 8002936:	4640      	mov	r0, r8
 8002938:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002998 <__kernel_rem_pio2+0x2f0>
 800293c:	f000 fb4c 	bl	8002fd8 <scalbn>
 8002940:	4630      	mov	r0, r6
 8002942:	4639      	mov	r1, r7
 8002944:	ec53 2b10 	vmov	r2, r3, d0
 8002948:	f7fd fc42 	bl	80001d0 <__aeabi_dsub>
 800294c:	4606      	mov	r6, r0
 800294e:	460f      	mov	r7, r1
 8002950:	2200      	movs	r2, #0
 8002952:	2300      	movs	r3, #0
 8002954:	4630      	mov	r0, r6
 8002956:	4639      	mov	r1, r7
 8002958:	f7fe f856 	bl	8000a08 <__aeabi_dcmpeq>
 800295c:	2800      	cmp	r0, #0
 800295e:	d074      	beq.n	8002a4a <__kernel_rem_pio2+0x3a2>
 8002960:	f10b 31ff 	add.w	r1, fp, #4294967295
 8002964:	460b      	mov	r3, r1
 8002966:	2200      	movs	r2, #0
 8002968:	9802      	ldr	r0, [sp, #8]
 800296a:	4283      	cmp	r3, r0
 800296c:	db05      	blt.n	800297a <__kernel_rem_pio2+0x2d2>
 800296e:	a80c      	add	r0, sp, #48	; 0x30
 8002970:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8002974:	3b01      	subs	r3, #1
 8002976:	4302      	orrs	r2, r0
 8002978:	e7f6      	b.n	8002968 <__kernel_rem_pio2+0x2c0>
 800297a:	2a00      	cmp	r2, #0
 800297c:	d158      	bne.n	8002a30 <__kernel_rem_pio2+0x388>
 800297e:	2301      	movs	r3, #1
 8002980:	f06f 0103 	mvn.w	r1, #3
 8002984:	fb01 f203 	mul.w	r2, r1, r3
 8002988:	980a      	ldr	r0, [sp, #40]	; 0x28
 800298a:	5882      	ldr	r2, [r0, r2]
 800298c:	b9a2      	cbnz	r2, 80029b8 <__kernel_rem_pio2+0x310>
 800298e:	3301      	adds	r3, #1
 8002990:	e7f8      	b.n	8002984 <__kernel_rem_pio2+0x2dc>
 8002992:	bf00      	nop
 8002994:	f3af 8000 	nop.w
 8002998:	00000000 	.word	0x00000000
 800299c:	3ff00000 	.word	0x3ff00000
 80029a0:	080032a0 	.word	0x080032a0
 80029a4:	3e700000 	.word	0x3e700000
 80029a8:	41700000 	.word	0x41700000
 80029ac:	40200000 	.word	0x40200000
 80029b0:	3fe00000 	.word	0x3fe00000
 80029b4:	3ff00000 	.word	0x3ff00000
 80029b8:	9a08      	ldr	r2, [sp, #32]
 80029ba:	a998      	add	r1, sp, #608	; 0x260
 80029bc:	440a      	add	r2, r1
 80029be:	3a98      	subs	r2, #152	; 0x98
 80029c0:	9204      	str	r2, [sp, #16]
 80029c2:	9a06      	ldr	r2, [sp, #24]
 80029c4:	445b      	add	r3, fp
 80029c6:	eb02 050b 	add.w	r5, r2, fp
 80029ca:	aa20      	add	r2, sp, #128	; 0x80
 80029cc:	f10b 0601 	add.w	r6, fp, #1
 80029d0:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80029d4:	9308      	str	r3, [sp, #32]
 80029d6:	9b08      	ldr	r3, [sp, #32]
 80029d8:	429e      	cmp	r6, r3
 80029da:	dc27      	bgt.n	8002a2c <__kernel_rem_pio2+0x384>
 80029dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80029de:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80029e2:	f7fd fd43 	bl	800046c <__aeabi_i2d>
 80029e6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80029ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029ec:	46a9      	mov	r9, r5
 80029ee:	461c      	mov	r4, r3
 80029f0:	2700      	movs	r7, #0
 80029f2:	f04f 0a00 	mov.w	sl, #0
 80029f6:	f04f 0b00 	mov.w	fp, #0
 80029fa:	9b05      	ldr	r3, [sp, #20]
 80029fc:	429f      	cmp	r7, r3
 80029fe:	dc0f      	bgt.n	8002a20 <__kernel_rem_pio2+0x378>
 8002a00:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 8002a04:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8002a08:	f7fd fd96 	bl	8000538 <__aeabi_dmul>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4650      	mov	r0, sl
 8002a12:	4659      	mov	r1, fp
 8002a14:	f7fd fbde 	bl	80001d4 <__adddf3>
 8002a18:	3701      	adds	r7, #1
 8002a1a:	4682      	mov	sl, r0
 8002a1c:	468b      	mov	fp, r1
 8002a1e:	e7ec      	b.n	80029fa <__kernel_rem_pio2+0x352>
 8002a20:	9b04      	ldr	r3, [sp, #16]
 8002a22:	e9e3 ab02 	strd	sl, fp, [r3, #8]!
 8002a26:	3601      	adds	r6, #1
 8002a28:	9304      	str	r3, [sp, #16]
 8002a2a:	e7d4      	b.n	80029d6 <__kernel_rem_pio2+0x32e>
 8002a2c:	469b      	mov	fp, r3
 8002a2e:	e6a8      	b.n	8002782 <__kernel_rem_pio2+0xda>
 8002a30:	f1a8 0818 	sub.w	r8, r8, #24
 8002a34:	468b      	mov	fp, r1
 8002a36:	ab0c      	add	r3, sp, #48	; 0x30
 8002a38:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d13c      	bne.n	8002aba <__kernel_rem_pio2+0x412>
 8002a40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002a44:	f1a8 0818 	sub.w	r8, r8, #24
 8002a48:	e7f5      	b.n	8002a36 <__kernel_rem_pio2+0x38e>
 8002a4a:	f1c8 0000 	rsb	r0, r8, #0
 8002a4e:	ec47 6b10 	vmov	d0, r6, r7
 8002a52:	f000 fac1 	bl	8002fd8 <scalbn>
 8002a56:	ec55 4b10 	vmov	r4, r5, d0
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	4bb6      	ldr	r3, [pc, #728]	; (8002d38 <__kernel_rem_pio2+0x690>)
 8002a5e:	ee10 0a10 	vmov	r0, s0
 8002a62:	4629      	mov	r1, r5
 8002a64:	f7fd ffee 	bl	8000a44 <__aeabi_dcmpge>
 8002a68:	b300      	cbz	r0, 8002aac <__kernel_rem_pio2+0x404>
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	4bb3      	ldr	r3, [pc, #716]	; (8002d3c <__kernel_rem_pio2+0x694>)
 8002a6e:	4620      	mov	r0, r4
 8002a70:	4629      	mov	r1, r5
 8002a72:	f7fd fd61 	bl	8000538 <__aeabi_dmul>
 8002a76:	f7fd fff9 	bl	8000a6c <__aeabi_d2iz>
 8002a7a:	4606      	mov	r6, r0
 8002a7c:	f7fd fcf6 	bl	800046c <__aeabi_i2d>
 8002a80:	2200      	movs	r2, #0
 8002a82:	4bad      	ldr	r3, [pc, #692]	; (8002d38 <__kernel_rem_pio2+0x690>)
 8002a84:	f7fd fd58 	bl	8000538 <__aeabi_dmul>
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f7fd fb9e 	bl	80001d0 <__aeabi_dsub>
 8002a94:	f7fd ffea 	bl	8000a6c <__aeabi_d2iz>
 8002a98:	ab0c      	add	r3, sp, #48	; 0x30
 8002a9a:	f108 0818 	add.w	r8, r8, #24
 8002a9e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8002aa2:	f10b 0b01 	add.w	fp, fp, #1
 8002aa6:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8002aaa:	e006      	b.n	8002aba <__kernel_rem_pio2+0x412>
 8002aac:	4620      	mov	r0, r4
 8002aae:	4629      	mov	r1, r5
 8002ab0:	f7fd ffdc 	bl	8000a6c <__aeabi_d2iz>
 8002ab4:	ab0c      	add	r3, sp, #48	; 0x30
 8002ab6:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8002aba:	4640      	mov	r0, r8
 8002abc:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 8002d28 <__kernel_rem_pio2+0x680>
 8002ac0:	f000 fa8a 	bl	8002fd8 <scalbn>
 8002ac4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ac8:	9305      	str	r3, [sp, #20]
 8002aca:	9a05      	ldr	r2, [sp, #20]
 8002acc:	ab98      	add	r3, sp, #608	; 0x260
 8002ace:	189f      	adds	r7, r3, r2
 8002ad0:	ec55 4b10 	vmov	r4, r5, d0
 8002ad4:	3f98      	subs	r7, #152	; 0x98
 8002ad6:	465e      	mov	r6, fp
 8002ad8:	2e00      	cmp	r6, #0
 8002ada:	db14      	blt.n	8002b06 <__kernel_rem_pio2+0x45e>
 8002adc:	ab0c      	add	r3, sp, #48	; 0x30
 8002ade:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8002ae2:	f7fd fcc3 	bl	800046c <__aeabi_i2d>
 8002ae6:	4622      	mov	r2, r4
 8002ae8:	462b      	mov	r3, r5
 8002aea:	f7fd fd25 	bl	8000538 <__aeabi_dmul>
 8002aee:	2200      	movs	r2, #0
 8002af0:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8002af4:	4b91      	ldr	r3, [pc, #580]	; (8002d3c <__kernel_rem_pio2+0x694>)
 8002af6:	4620      	mov	r0, r4
 8002af8:	4629      	mov	r1, r5
 8002afa:	f7fd fd1d 	bl	8000538 <__aeabi_dmul>
 8002afe:	3e01      	subs	r6, #1
 8002b00:	4604      	mov	r4, r0
 8002b02:	460d      	mov	r5, r1
 8002b04:	e7e8      	b.n	8002ad8 <__kernel_rem_pio2+0x430>
 8002b06:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 8002b0a:	2400      	movs	r4, #0
 8002b0c:	4645      	mov	r5, r8
 8002b0e:	ebbb 0704 	subs.w	r7, fp, r4
 8002b12:	d424      	bmi.n	8002b5e <__kernel_rem_pio2+0x4b6>
 8002b14:	ed9f 7b86 	vldr	d7, [pc, #536]	; 8002d30 <__kernel_rem_pio2+0x688>
 8002b18:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002b1c:	ab70      	add	r3, sp, #448	; 0x1c0
 8002b1e:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8002d40 <__kernel_rem_pio2+0x698>
 8002b22:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8002b26:	2600      	movs	r6, #0
 8002b28:	9b02      	ldr	r3, [sp, #8]
 8002b2a:	429e      	cmp	r6, r3
 8002b2c:	dc11      	bgt.n	8002b52 <__kernel_rem_pio2+0x4aa>
 8002b2e:	42a6      	cmp	r6, r4
 8002b30:	dc0f      	bgt.n	8002b52 <__kernel_rem_pio2+0x4aa>
 8002b32:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 8002b36:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8002b3a:	f7fd fcfd 	bl	8000538 <__aeabi_dmul>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b46:	f7fd fb45 	bl	80001d4 <__adddf3>
 8002b4a:	3601      	adds	r6, #1
 8002b4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002b50:	e7ea      	b.n	8002b28 <__kernel_rem_pio2+0x480>
 8002b52:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002b56:	3401      	adds	r4, #1
 8002b58:	eca8 7b02 	vstmia	r8!, {d7}
 8002b5c:	e7d7      	b.n	8002b0e <__kernel_rem_pio2+0x466>
 8002b5e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	f200 80d8 	bhi.w	8002d16 <__kernel_rem_pio2+0x66e>
 8002b66:	e8df f003 	tbb	[pc, r3]
 8002b6a:	0810      	.short	0x0810
 8002b6c:	0208      	.short	0x0208
 8002b6e:	9a05      	ldr	r2, [sp, #20]
 8002b70:	ab48      	add	r3, sp, #288	; 0x120
 8002b72:	189c      	adds	r4, r3, r2
 8002b74:	46a0      	mov	r8, r4
 8002b76:	46d9      	mov	r9, fp
 8002b78:	e056      	b.n	8002c28 <__kernel_rem_pio2+0x580>
 8002b7a:	9c05      	ldr	r4, [sp, #20]
 8002b7c:	ab48      	add	r3, sp, #288	; 0x120
 8002b7e:	3408      	adds	r4, #8
 8002b80:	441c      	add	r4, r3
 8002b82:	465d      	mov	r5, fp
 8002b84:	2000      	movs	r0, #0
 8002b86:	2100      	movs	r1, #0
 8002b88:	e01d      	b.n	8002bc6 <__kernel_rem_pio2+0x51e>
 8002b8a:	9b05      	ldr	r3, [sp, #20]
 8002b8c:	aa98      	add	r2, sp, #608	; 0x260
 8002b8e:	4413      	add	r3, r2
 8002b90:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 8002b94:	2000      	movs	r0, #0
 8002b96:	2100      	movs	r1, #0
 8002b98:	f1bb 0f00 	cmp.w	fp, #0
 8002b9c:	db06      	blt.n	8002bac <__kernel_rem_pio2+0x504>
 8002b9e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8002ba2:	f7fd fb17 	bl	80001d4 <__adddf3>
 8002ba6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002baa:	e7f5      	b.n	8002b98 <__kernel_rem_pio2+0x4f0>
 8002bac:	f1ba 0f00 	cmp.w	sl, #0
 8002bb0:	d003      	beq.n	8002bba <__kernel_rem_pio2+0x512>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002bb8:	e001      	b.n	8002bbe <__kernel_rem_pio2+0x516>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	9901      	ldr	r1, [sp, #4]
 8002bc0:	e9c1 2300 	strd	r2, r3, [r1]
 8002bc4:	e0a7      	b.n	8002d16 <__kernel_rem_pio2+0x66e>
 8002bc6:	2d00      	cmp	r5, #0
 8002bc8:	db05      	blt.n	8002bd6 <__kernel_rem_pio2+0x52e>
 8002bca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8002bce:	f7fd fb01 	bl	80001d4 <__adddf3>
 8002bd2:	3d01      	subs	r5, #1
 8002bd4:	e7f7      	b.n	8002bc6 <__kernel_rem_pio2+0x51e>
 8002bd6:	f1ba 0f00 	cmp.w	sl, #0
 8002bda:	d003      	beq.n	8002be4 <__kernel_rem_pio2+0x53c>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002be2:	e001      	b.n	8002be8 <__kernel_rem_pio2+0x540>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	9c01      	ldr	r4, [sp, #4]
 8002bea:	e9c4 2300 	strd	r2, r3, [r4]
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8002bf6:	f7fd faeb 	bl	80001d0 <__aeabi_dsub>
 8002bfa:	ad4a      	add	r5, sp, #296	; 0x128
 8002bfc:	2401      	movs	r4, #1
 8002bfe:	45a3      	cmp	fp, r4
 8002c00:	db05      	blt.n	8002c0e <__kernel_rem_pio2+0x566>
 8002c02:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8002c06:	f7fd fae5 	bl	80001d4 <__adddf3>
 8002c0a:	3401      	adds	r4, #1
 8002c0c:	e7f7      	b.n	8002bfe <__kernel_rem_pio2+0x556>
 8002c0e:	f1ba 0f00 	cmp.w	sl, #0
 8002c12:	d003      	beq.n	8002c1c <__kernel_rem_pio2+0x574>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002c1a:	e001      	b.n	8002c20 <__kernel_rem_pio2+0x578>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	9901      	ldr	r1, [sp, #4]
 8002c22:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002c26:	e076      	b.n	8002d16 <__kernel_rem_pio2+0x66e>
 8002c28:	f1b9 0f00 	cmp.w	r9, #0
 8002c2c:	dd20      	ble.n	8002c70 <__kernel_rem_pio2+0x5c8>
 8002c2e:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
 8002c32:	ed98 7b02 	vldr	d7, [r8, #8]
 8002c36:	4630      	mov	r0, r6
 8002c38:	ec53 2b17 	vmov	r2, r3, d7
 8002c3c:	4639      	mov	r1, r7
 8002c3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002c42:	f7fd fac7 	bl	80001d4 <__adddf3>
 8002c46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4630      	mov	r0, r6
 8002c50:	4639      	mov	r1, r7
 8002c52:	f7fd fabd 	bl	80001d0 <__aeabi_dsub>
 8002c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002c5a:	f7fd fabb 	bl	80001d4 <__adddf3>
 8002c5e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002c62:	f109 39ff 	add.w	r9, r9, #4294967295
 8002c66:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8002c6a:	ed88 7b00 	vstr	d7, [r8]
 8002c6e:	e7db      	b.n	8002c28 <__kernel_rem_pio2+0x580>
 8002c70:	465e      	mov	r6, fp
 8002c72:	2e01      	cmp	r6, #1
 8002c74:	dd1f      	ble.n	8002cb6 <__kernel_rem_pio2+0x60e>
 8002c76:	e974 8902 	ldrd	r8, r9, [r4, #-8]!
 8002c7a:	ed94 7b02 	vldr	d7, [r4, #8]
 8002c7e:	4640      	mov	r0, r8
 8002c80:	ec53 2b17 	vmov	r2, r3, d7
 8002c84:	4649      	mov	r1, r9
 8002c86:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002c8a:	f7fd faa3 	bl	80001d4 <__adddf3>
 8002c8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4640      	mov	r0, r8
 8002c98:	4649      	mov	r1, r9
 8002c9a:	f7fd fa99 	bl	80001d0 <__aeabi_dsub>
 8002c9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ca2:	f7fd fa97 	bl	80001d4 <__adddf3>
 8002ca6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002caa:	3e01      	subs	r6, #1
 8002cac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002cb0:	ed84 7b00 	vstr	d7, [r4]
 8002cb4:	e7dd      	b.n	8002c72 <__kernel_rem_pio2+0x5ca>
 8002cb6:	9c05      	ldr	r4, [sp, #20]
 8002cb8:	ab48      	add	r3, sp, #288	; 0x120
 8002cba:	3408      	adds	r4, #8
 8002cbc:	441c      	add	r4, r3
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	f1bb 0f01 	cmp.w	fp, #1
 8002cc6:	dd06      	ble.n	8002cd6 <__kernel_rem_pio2+0x62e>
 8002cc8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8002ccc:	f7fd fa82 	bl	80001d4 <__adddf3>
 8002cd0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002cd4:	e7f5      	b.n	8002cc2 <__kernel_rem_pio2+0x61a>
 8002cd6:	f1ba 0f00 	cmp.w	sl, #0
 8002cda:	d10b      	bne.n	8002cf4 <__kernel_rem_pio2+0x64c>
 8002cdc:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8002ce0:	9c01      	ldr	r4, [sp, #4]
 8002ce2:	e9c4 2300 	strd	r2, r3, [r4]
 8002ce6:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8002cea:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8002cee:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8002cf2:	e010      	b.n	8002d16 <__kernel_rem_pio2+0x66e>
 8002cf4:	9a01      	ldr	r2, [sp, #4]
 8002cf6:	682b      	ldr	r3, [r5, #0]
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	686b      	ldr	r3, [r5, #4]
 8002cfc:	6110      	str	r0, [r2, #16]
 8002cfe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002d02:	6053      	str	r3, [r2, #4]
 8002d04:	68ab      	ldr	r3, [r5, #8]
 8002d06:	6093      	str	r3, [r2, #8]
 8002d08:	68eb      	ldr	r3, [r5, #12]
 8002d0a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002d0e:	60d3      	str	r3, [r2, #12]
 8002d10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002d14:	6153      	str	r3, [r2, #20]
 8002d16:	9b04      	ldr	r3, [sp, #16]
 8002d18:	f003 0007 	and.w	r0, r3, #7
 8002d1c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8002d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d24:	f3af 8000 	nop.w
 8002d28:	00000000 	.word	0x00000000
 8002d2c:	3ff00000 	.word	0x3ff00000
	...
 8002d38:	41700000 	.word	0x41700000
 8002d3c:	3e700000 	.word	0x3e700000
 8002d40:	080032b0 	.word	0x080032b0
 8002d44:	00000000 	.word	0x00000000

08002d48 <__kernel_sin>:
 8002d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d4c:	ec55 4b10 	vmov	r4, r5, d0
 8002d50:	b085      	sub	sp, #20
 8002d52:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8002d56:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8002d5a:	ed8d 1b00 	vstr	d1, [sp]
 8002d5e:	9002      	str	r0, [sp, #8]
 8002d60:	da07      	bge.n	8002d72 <__kernel_sin+0x2a>
 8002d62:	ee10 0a10 	vmov	r0, s0
 8002d66:	4629      	mov	r1, r5
 8002d68:	f7fd fe80 	bl	8000a6c <__aeabi_d2iz>
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	f000 8081 	beq.w	8002e74 <__kernel_sin+0x12c>
 8002d72:	4622      	mov	r2, r4
 8002d74:	462b      	mov	r3, r5
 8002d76:	4620      	mov	r0, r4
 8002d78:	4629      	mov	r1, r5
 8002d7a:	f7fd fbdd 	bl	8000538 <__aeabi_dmul>
 8002d7e:	4682      	mov	sl, r0
 8002d80:	468b      	mov	fp, r1
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4620      	mov	r0, r4
 8002d88:	4629      	mov	r1, r5
 8002d8a:	f7fd fbd5 	bl	8000538 <__aeabi_dmul>
 8002d8e:	a341      	add	r3, pc, #260	; (adr r3, 8002e94 <__kernel_sin+0x14c>)
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	4680      	mov	r8, r0
 8002d96:	4689      	mov	r9, r1
 8002d98:	4650      	mov	r0, sl
 8002d9a:	4659      	mov	r1, fp
 8002d9c:	f7fd fbcc 	bl	8000538 <__aeabi_dmul>
 8002da0:	a33e      	add	r3, pc, #248	; (adr r3, 8002e9c <__kernel_sin+0x154>)
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	f7fd fa13 	bl	80001d0 <__aeabi_dsub>
 8002daa:	4652      	mov	r2, sl
 8002dac:	465b      	mov	r3, fp
 8002dae:	f7fd fbc3 	bl	8000538 <__aeabi_dmul>
 8002db2:	a33c      	add	r3, pc, #240	; (adr r3, 8002ea4 <__kernel_sin+0x15c>)
 8002db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db8:	f7fd fa0c 	bl	80001d4 <__adddf3>
 8002dbc:	4652      	mov	r2, sl
 8002dbe:	465b      	mov	r3, fp
 8002dc0:	f7fd fbba 	bl	8000538 <__aeabi_dmul>
 8002dc4:	a339      	add	r3, pc, #228	; (adr r3, 8002eac <__kernel_sin+0x164>)
 8002dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dca:	f7fd fa01 	bl	80001d0 <__aeabi_dsub>
 8002dce:	4652      	mov	r2, sl
 8002dd0:	465b      	mov	r3, fp
 8002dd2:	f7fd fbb1 	bl	8000538 <__aeabi_dmul>
 8002dd6:	a337      	add	r3, pc, #220	; (adr r3, 8002eb4 <__kernel_sin+0x16c>)
 8002dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ddc:	f7fd f9fa 	bl	80001d4 <__adddf3>
 8002de0:	9b02      	ldr	r3, [sp, #8]
 8002de2:	4606      	mov	r6, r0
 8002de4:	460f      	mov	r7, r1
 8002de6:	b99b      	cbnz	r3, 8002e10 <__kernel_sin+0xc8>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4650      	mov	r0, sl
 8002dee:	4659      	mov	r1, fp
 8002df0:	f7fd fba2 	bl	8000538 <__aeabi_dmul>
 8002df4:	a324      	add	r3, pc, #144	; (adr r3, 8002e88 <__kernel_sin+0x140>)
 8002df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfa:	f7fd f9e9 	bl	80001d0 <__aeabi_dsub>
 8002dfe:	4642      	mov	r2, r8
 8002e00:	464b      	mov	r3, r9
 8002e02:	f7fd fb99 	bl	8000538 <__aeabi_dmul>
 8002e06:	4622      	mov	r2, r4
 8002e08:	462b      	mov	r3, r5
 8002e0a:	f7fd f9e3 	bl	80001d4 <__adddf3>
 8002e0e:	e033      	b.n	8002e78 <__kernel_sin+0x130>
 8002e10:	2200      	movs	r2, #0
 8002e12:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <__kernel_sin+0x148>)
 8002e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e18:	f7fd fb8e 	bl	8000538 <__aeabi_dmul>
 8002e1c:	4632      	mov	r2, r6
 8002e1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e22:	463b      	mov	r3, r7
 8002e24:	4640      	mov	r0, r8
 8002e26:	4649      	mov	r1, r9
 8002e28:	f7fd fb86 	bl	8000538 <__aeabi_dmul>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e34:	f7fd f9cc 	bl	80001d0 <__aeabi_dsub>
 8002e38:	4652      	mov	r2, sl
 8002e3a:	465b      	mov	r3, fp
 8002e3c:	f7fd fb7c 	bl	8000538 <__aeabi_dmul>
 8002e40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002e44:	f7fd f9c4 	bl	80001d0 <__aeabi_dsub>
 8002e48:	a30f      	add	r3, pc, #60	; (adr r3, 8002e88 <__kernel_sin+0x140>)
 8002e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4e:	4606      	mov	r6, r0
 8002e50:	460f      	mov	r7, r1
 8002e52:	4640      	mov	r0, r8
 8002e54:	4649      	mov	r1, r9
 8002e56:	f7fd fb6f 	bl	8000538 <__aeabi_dmul>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4630      	mov	r0, r6
 8002e60:	4639      	mov	r1, r7
 8002e62:	f7fd f9b7 	bl	80001d4 <__adddf3>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	f7fd f9af 	bl	80001d0 <__aeabi_dsub>
 8002e72:	e001      	b.n	8002e78 <__kernel_sin+0x130>
 8002e74:	4620      	mov	r0, r4
 8002e76:	4629      	mov	r1, r5
 8002e78:	ec41 0b10 	vmov	d0, r0, r1
 8002e7c:	b005      	add	sp, #20
 8002e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e82:	bf00      	nop
 8002e84:	f3af 8000 	nop.w
 8002e88:	55555549 	.word	0x55555549
 8002e8c:	3fc55555 	.word	0x3fc55555
 8002e90:	3fe00000 	.word	0x3fe00000
 8002e94:	5acfd57c 	.word	0x5acfd57c
 8002e98:	3de5d93a 	.word	0x3de5d93a
 8002e9c:	8a2b9ceb 	.word	0x8a2b9ceb
 8002ea0:	3e5ae5e6 	.word	0x3e5ae5e6
 8002ea4:	57b1fe7d 	.word	0x57b1fe7d
 8002ea8:	3ec71de3 	.word	0x3ec71de3
 8002eac:	19c161d5 	.word	0x19c161d5
 8002eb0:	3f2a01a0 	.word	0x3f2a01a0
 8002eb4:	1110f8a6 	.word	0x1110f8a6
 8002eb8:	3f811111 	.word	0x3f811111

08002ebc <fabs>:
 8002ebc:	ec53 2b10 	vmov	r2, r3, d0
 8002ec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ec4:	ec43 2b10 	vmov	d0, r2, r3
 8002ec8:	4770      	bx	lr
 8002eca:	0000      	movs	r0, r0
 8002ecc:	0000      	movs	r0, r0
	...

08002ed0 <floor>:
 8002ed0:	ec51 0b10 	vmov	r0, r1, d0
 8002ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8002edc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8002ee0:	2e13      	cmp	r6, #19
 8002ee2:	ee10 8a10 	vmov	r8, s0
 8002ee6:	460c      	mov	r4, r1
 8002ee8:	ee10 5a10 	vmov	r5, s0
 8002eec:	dc33      	bgt.n	8002f56 <floor+0x86>
 8002eee:	2e00      	cmp	r6, #0
 8002ef0:	da16      	bge.n	8002f20 <floor+0x50>
 8002ef2:	a335      	add	r3, pc, #212	; (adr r3, 8002fc8 <floor+0xf8>)
 8002ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef8:	f7fd f96c 	bl	80001d4 <__adddf3>
 8002efc:	2200      	movs	r2, #0
 8002efe:	2300      	movs	r3, #0
 8002f00:	f7fd fdaa 	bl	8000a58 <__aeabi_dcmpgt>
 8002f04:	2800      	cmp	r0, #0
 8002f06:	d057      	beq.n	8002fb8 <floor+0xe8>
 8002f08:	2c00      	cmp	r4, #0
 8002f0a:	da53      	bge.n	8002fb4 <floor+0xe4>
 8002f0c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8002f10:	ea53 0308 	orrs.w	r3, r3, r8
 8002f14:	4b2e      	ldr	r3, [pc, #184]	; (8002fd0 <floor+0x100>)
 8002f16:	f04f 0500 	mov.w	r5, #0
 8002f1a:	bf18      	it	ne
 8002f1c:	461c      	movne	r4, r3
 8002f1e:	e04b      	b.n	8002fb8 <floor+0xe8>
 8002f20:	4f2c      	ldr	r7, [pc, #176]	; (8002fd4 <floor+0x104>)
 8002f22:	4137      	asrs	r7, r6
 8002f24:	ea01 0307 	and.w	r3, r1, r7
 8002f28:	4303      	orrs	r3, r0
 8002f2a:	d047      	beq.n	8002fbc <floor+0xec>
 8002f2c:	a326      	add	r3, pc, #152	; (adr r3, 8002fc8 <floor+0xf8>)
 8002f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f32:	f7fd f94f 	bl	80001d4 <__adddf3>
 8002f36:	2200      	movs	r2, #0
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f7fd fd8d 	bl	8000a58 <__aeabi_dcmpgt>
 8002f3e:	b3d8      	cbz	r0, 8002fb8 <floor+0xe8>
 8002f40:	2c00      	cmp	r4, #0
 8002f42:	bfbe      	ittt	lt
 8002f44:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8002f48:	fa43 f606 	asrlt.w	r6, r3, r6
 8002f4c:	19a4      	addlt	r4, r4, r6
 8002f4e:	ea24 0407 	bic.w	r4, r4, r7
 8002f52:	2500      	movs	r5, #0
 8002f54:	e030      	b.n	8002fb8 <floor+0xe8>
 8002f56:	2e33      	cmp	r6, #51	; 0x33
 8002f58:	dd08      	ble.n	8002f6c <floor+0x9c>
 8002f5a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8002f5e:	d12d      	bne.n	8002fbc <floor+0xec>
 8002f60:	ee10 2a10 	vmov	r2, s0
 8002f64:	460b      	mov	r3, r1
 8002f66:	f7fd f935 	bl	80001d4 <__adddf3>
 8002f6a:	e027      	b.n	8002fbc <floor+0xec>
 8002f6c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
 8002f74:	fa23 f707 	lsr.w	r7, r3, r7
 8002f78:	4238      	tst	r0, r7
 8002f7a:	d01f      	beq.n	8002fbc <floor+0xec>
 8002f7c:	a312      	add	r3, pc, #72	; (adr r3, 8002fc8 <floor+0xf8>)
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	f7fd f927 	bl	80001d4 <__adddf3>
 8002f86:	2200      	movs	r2, #0
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f7fd fd65 	bl	8000a58 <__aeabi_dcmpgt>
 8002f8e:	b198      	cbz	r0, 8002fb8 <floor+0xe8>
 8002f90:	2c00      	cmp	r4, #0
 8002f92:	da0c      	bge.n	8002fae <floor+0xde>
 8002f94:	2e14      	cmp	r6, #20
 8002f96:	d101      	bne.n	8002f9c <floor+0xcc>
 8002f98:	3401      	adds	r4, #1
 8002f9a:	e008      	b.n	8002fae <floor+0xde>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8002fa2:	fa03 f606 	lsl.w	r6, r3, r6
 8002fa6:	4435      	add	r5, r6
 8002fa8:	45a8      	cmp	r8, r5
 8002faa:	bf88      	it	hi
 8002fac:	18e4      	addhi	r4, r4, r3
 8002fae:	ea25 0507 	bic.w	r5, r5, r7
 8002fb2:	e001      	b.n	8002fb8 <floor+0xe8>
 8002fb4:	2500      	movs	r5, #0
 8002fb6:	462c      	mov	r4, r5
 8002fb8:	4621      	mov	r1, r4
 8002fba:	4628      	mov	r0, r5
 8002fbc:	ec41 0b10 	vmov	d0, r0, r1
 8002fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fc4:	f3af 8000 	nop.w
 8002fc8:	8800759c 	.word	0x8800759c
 8002fcc:	7e37e43c 	.word	0x7e37e43c
 8002fd0:	bff00000 	.word	0xbff00000
 8002fd4:	000fffff 	.word	0x000fffff

08002fd8 <scalbn>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	ec55 4b10 	vmov	r4, r5, d0
 8002fde:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8002fe2:	4606      	mov	r6, r0
 8002fe4:	462b      	mov	r3, r5
 8002fe6:	b9a2      	cbnz	r2, 8003012 <scalbn+0x3a>
 8002fe8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8002fec:	4323      	orrs	r3, r4
 8002fee:	d059      	beq.n	80030a4 <scalbn+0xcc>
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	4b33      	ldr	r3, [pc, #204]	; (80030c0 <scalbn+0xe8>)
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	ee10 0a10 	vmov	r0, s0
 8002ffa:	f7fd fa9d 	bl	8000538 <__aeabi_dmul>
 8002ffe:	4a31      	ldr	r2, [pc, #196]	; (80030c4 <scalbn+0xec>)
 8003000:	4296      	cmp	r6, r2
 8003002:	4604      	mov	r4, r0
 8003004:	460d      	mov	r5, r1
 8003006:	460b      	mov	r3, r1
 8003008:	da0f      	bge.n	800302a <scalbn+0x52>
 800300a:	a329      	add	r3, pc, #164	; (adr r3, 80030b0 <scalbn+0xd8>)
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	e045      	b.n	800309e <scalbn+0xc6>
 8003012:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003016:	428a      	cmp	r2, r1
 8003018:	d10a      	bne.n	8003030 <scalbn+0x58>
 800301a:	ee10 2a10 	vmov	r2, s0
 800301e:	462b      	mov	r3, r5
 8003020:	4620      	mov	r0, r4
 8003022:	4629      	mov	r1, r5
 8003024:	f7fd f8d6 	bl	80001d4 <__adddf3>
 8003028:	e03e      	b.n	80030a8 <scalbn+0xd0>
 800302a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800302e:	3a36      	subs	r2, #54	; 0x36
 8003030:	4432      	add	r2, r6
 8003032:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003036:	428a      	cmp	r2, r1
 8003038:	dd02      	ble.n	8003040 <scalbn+0x68>
 800303a:	ec45 4b11 	vmov	d1, r4, r5
 800303e:	e011      	b.n	8003064 <scalbn+0x8c>
 8003040:	2a00      	cmp	r2, #0
 8003042:	dd06      	ble.n	8003052 <scalbn+0x7a>
 8003044:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003048:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800304c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003050:	e028      	b.n	80030a4 <scalbn+0xcc>
 8003052:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003056:	da17      	bge.n	8003088 <scalbn+0xb0>
 8003058:	f24c 3350 	movw	r3, #50000	; 0xc350
 800305c:	429e      	cmp	r6, r3
 800305e:	ec45 4b11 	vmov	d1, r4, r5
 8003062:	dd07      	ble.n	8003074 <scalbn+0x9c>
 8003064:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80030b8 <scalbn+0xe0>
 8003068:	f000 f830 	bl	80030cc <copysign>
 800306c:	a312      	add	r3, pc, #72	; (adr r3, 80030b8 <scalbn+0xe0>)
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	e006      	b.n	8003082 <scalbn+0xaa>
 8003074:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80030b0 <scalbn+0xd8>
 8003078:	f000 f828 	bl	80030cc <copysign>
 800307c:	a30c      	add	r3, pc, #48	; (adr r3, 80030b0 <scalbn+0xd8>)
 800307e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003082:	ec51 0b10 	vmov	r0, r1, d0
 8003086:	e00a      	b.n	800309e <scalbn+0xc6>
 8003088:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800308c:	3236      	adds	r2, #54	; 0x36
 800308e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003092:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <scalbn+0xf0>)
 8003098:	4620      	mov	r0, r4
 800309a:	4629      	mov	r1, r5
 800309c:	2200      	movs	r2, #0
 800309e:	f7fd fa4b 	bl	8000538 <__aeabi_dmul>
 80030a2:	e001      	b.n	80030a8 <scalbn+0xd0>
 80030a4:	4620      	mov	r0, r4
 80030a6:	4629      	mov	r1, r5
 80030a8:	ec41 0b10 	vmov	d0, r0, r1
 80030ac:	bd70      	pop	{r4, r5, r6, pc}
 80030ae:	bf00      	nop
 80030b0:	c2f8f359 	.word	0xc2f8f359
 80030b4:	01a56e1f 	.word	0x01a56e1f
 80030b8:	8800759c 	.word	0x8800759c
 80030bc:	7e37e43c 	.word	0x7e37e43c
 80030c0:	43500000 	.word	0x43500000
 80030c4:	ffff3cb0 	.word	0xffff3cb0
 80030c8:	3c900000 	.word	0x3c900000

080030cc <copysign>:
 80030cc:	ec53 2b10 	vmov	r2, r3, d0
 80030d0:	ee11 0a90 	vmov	r0, s3
 80030d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80030d8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80030dc:	ea41 0300 	orr.w	r3, r1, r0
 80030e0:	ec43 2b10 	vmov	d0, r2, r3
 80030e4:	4770      	bx	lr
	...

080030e8 <_init>:
 80030e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ea:	bf00      	nop
 80030ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ee:	bc08      	pop	{r3}
 80030f0:	469e      	mov	lr, r3
 80030f2:	4770      	bx	lr

080030f4 <_fini>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	bf00      	nop
 80030f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fa:	bc08      	pop	{r3}
 80030fc:	469e      	mov	lr, r3
 80030fe:	4770      	bx	lr
