
ES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003030  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  080031b8  080031b8  000131b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800339c  0800339c  0001339c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000030  20000000  080033a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020030  2**0
                  CONTENTS
  7 .bss          000002a0  20000030  20000030  00020030  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200002d0  200002d0  00020030  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008496  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000013c1  00000000  00000000  000284f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b20  00000000  00000000  000298b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a48  00000000  00000000  0002a3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003763  00000000  00000000  0002ae20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000364f  00000000  00000000  0002e583  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00031bd2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003194  00000000  00000000  00031c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00034de4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080031a0 	.word	0x080031a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	080031a0 	.word	0x080031a0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <NVIC_PriorityGroupConfig+0x24>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	60d3      	str	r3, [r2, #12]
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	73fb      	strb	r3, [r7, #15]
 8000b30:	2300      	movs	r3, #0
 8000b32:	73bb      	strb	r3, [r7, #14]
 8000b34:	230f      	movs	r3, #15
 8000b36:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	78db      	ldrb	r3, [r3, #3]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d038      	beq.n	8000bb2 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <NVIC_Init+0xbc>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b4a:	0a1b      	lsrs	r3, r3, #8
 8000b4c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	f1c3 0304 	rsb	r3, r3, #4
 8000b54:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000b56:	7b7a      	ldrb	r2, [r7, #13]
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	fa42 f303 	asr.w	r3, r2, r3
 8000b5e:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	785b      	ldrb	r3, [r3, #1]
 8000b64:	461a      	mov	r2, r3
 8000b66:	7bbb      	ldrb	r3, [r7, #14]
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	789a      	ldrb	r2, [r3, #2]
 8000b72:	7b7b      	ldrb	r3, [r7, #13]
 8000b74:	4013      	ands	r3, r2
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	011b      	lsls	r3, r3, #4
 8000b82:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000b84:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <NVIC_Init+0xc0>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	7bfa      	ldrb	r2, [r7, #15]
 8000b8e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b92:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <NVIC_Init+0xc0>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	095b      	lsrs	r3, r3, #5
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	f003 031f 	and.w	r3, r3, #31
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000bb0:	e00f      	b.n	8000bd2 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bb2:	490c      	ldr	r1, [pc, #48]	; (8000be4 <NVIC_Init+0xc0>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	095b      	lsrs	r3, r3, #5
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	f003 031f 	and.w	r3, r3, #31
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bca:	f100 0320 	add.w	r3, r0, #32
 8000bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <DAC_Init+0x64>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000c00:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000c20:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000c26:	4313      	orrs	r3, r2
 8000c28:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <DAC_Init+0x64>)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6013      	str	r3, [r2, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40007400 	.word	0x40007400

08000c50 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c5c:	78fb      	ldrb	r3, [r7, #3]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d009      	beq.n	8000c76 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <DAC_Cmd+0x48>)
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <DAC_Cmd+0x48>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	2001      	movs	r0, #1
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	fa00 f303 	lsl.w	r3, r0, r3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8000c74:	e009      	b.n	8000c8a <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000c76:	4908      	ldr	r1, [pc, #32]	; (8000c98 <DAC_Cmd+0x48>)
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <DAC_Cmd+0x48>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	fa00 f303 	lsl.w	r3, r0, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	4013      	ands	r3, r2
 8000c88:	600b      	str	r3, [r1, #0]
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40007400 	.word	0x40007400

08000c9c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <DAC_SetChannel1Data+0x34>)
 8000cae:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3308      	adds	r3, #8
 8000cb8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	887b      	ldrh	r3, [r7, #2]
 8000cc0:	6013      	str	r3, [r2, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40007400 	.word	0x40007400

08000cd4 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d00a      	beq.n	8000cfc <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8000ce6:	490e      	ldr	r1, [pc, #56]	; (8000d20 <DAC_DMACmd+0x4c>)
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <DAC_DMACmd+0x4c>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	fa00 f303 	lsl.w	r3, r0, r3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 8000cfa:	e00a      	b.n	8000d12 <DAC_DMACmd+0x3e>
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8000cfc:	4908      	ldr	r1, [pc, #32]	; (8000d20 <DAC_DMACmd+0x4c>)
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <DAC_DMACmd+0x4c>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	fa00 f303 	lsl.w	r3, r0, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	4013      	ands	r3, r2
 8000d10:	600b      	str	r3, [r1, #0]
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40007400 	.word	0x40007400

08000d24 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <DMA_Init+0xac>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000d4e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000d5a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000d66:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000d72:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d78:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f023 0307 	bic.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60da      	str	r2, [r3, #12]
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	f01c803f 	.word	0xf01c803f

08000dd4 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d006      	beq.n	8000e64 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f043 0201 	orr.w	r2, r3, #1
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000e62:	e005      	b.n	8000e70 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f023 0201 	bic.w	r2, r3, #1
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	601a      	str	r2, [r3, #0]
  }
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e001      	b.n	8000e9e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a15      	ldr	r2, [pc, #84]	; (8000f18 <DMA_GetFlagStatus+0x6c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d802      	bhi.n	8000ecc <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <DMA_GetFlagStatus+0x70>)
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	e001      	b.n	8000ed0 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <DMA_GetFlagStatus+0x74>)
 8000ece:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	e002      	b.n	8000ee8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000eee:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000ef2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000efe:	2301      	movs	r3, #1
 8000f00:	75fb      	strb	r3, [r7, #23]
 8000f02:	e001      	b.n	8000f08 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	371c      	adds	r7, #28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	4002640f 	.word	0x4002640f
 8000f1c:	40026000 	.word	0x40026000
 8000f20:	40026400 	.word	0x40026400

08000f24 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a10      	ldr	r2, [pc, #64]	; (8000f74 <DMA_ClearFlag+0x50>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d802      	bhi.n	8000f3c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <DMA_ClearFlag+0x54>)
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	e001      	b.n	8000f40 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <DMA_ClearFlag+0x58>)
 8000f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d007      	beq.n	8000f5a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000f50:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000f58:	e006      	b.n	8000f68 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000f60:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	6093      	str	r3, [r2, #8]
  }    
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	4002640f 	.word	0x4002640f
 8000f78:	40026000 	.word	0x40026000
 8000f7c:	40026400 	.word	0x40026400

08000f80 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	e076      	b.n	800108a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d165      	bne.n	8001084 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2103      	movs	r1, #3
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	401a      	ands	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	791b      	ldrb	r3, [r3, #4]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	791b      	ldrb	r3, [r3, #4]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d003      	beq.n	8000ff6 <GPIO_Init+0x76>
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	791b      	ldrb	r3, [r3, #4]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d12e      	bne.n	8001054 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2103      	movs	r1, #3
 8001000:	fa01 f303 	lsl.w	r3, r1, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	401a      	ands	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	795b      	ldrb	r3, [r3, #5]
 8001014:	4619      	mov	r1, r3
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	b29b      	uxth	r3, r3
 800102c:	2101      	movs	r1, #1
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	401a      	ands	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	799b      	ldrb	r3, [r3, #6]
 8001042:	4619      	mov	r1, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	b29b      	uxth	r3, r3
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	b29b      	uxth	r3, r3
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	b29b      	uxth	r3, r3
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2103      	movs	r1, #3
 8001060:	fa01 f303 	lsl.w	r3, r1, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	401a      	ands	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	79db      	ldrb	r3, [r3, #7]
 8001074:	4619      	mov	r1, r3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d985      	bls.n	8000f9c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001090:	bf00      	nop
 8001092:	371c      	adds	r7, #28
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]
 80010a8:	4613      	mov	r3, r2
 80010aa:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010b4:	787a      	ldrb	r2, [r7, #1]
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	08db      	lsrs	r3, r3, #3
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	08db      	lsrs	r3, r3, #3
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	210f      	movs	r1, #15
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	ea02 0103 	and.w	r1, r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f100 0208 	add.w	r2, r0, #8
 80010f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	08db      	lsrs	r3, r3, #3
 8001114:	b29b      	uxth	r3, r3
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3208      	adds	r2, #8
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	2302      	movs	r3, #2
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	2302      	movs	r3, #2
 800114e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001150:	4b48      	ldr	r3, [pc, #288]	; (8001274 <RCC_GetClocksFreq+0x144>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 030c 	and.w	r3, r3, #12
 8001158:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	2b04      	cmp	r3, #4
 800115e:	d007      	beq.n	8001170 <RCC_GetClocksFreq+0x40>
 8001160:	2b08      	cmp	r3, #8
 8001162:	d009      	beq.n	8001178 <RCC_GetClocksFreq+0x48>
 8001164:	2b00      	cmp	r3, #0
 8001166:	d13f      	bne.n	80011e8 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a43      	ldr	r2, [pc, #268]	; (8001278 <RCC_GetClocksFreq+0x148>)
 800116c:	601a      	str	r2, [r3, #0]
      break;
 800116e:	e03f      	b.n	80011f0 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a42      	ldr	r2, [pc, #264]	; (800127c <RCC_GetClocksFreq+0x14c>)
 8001174:	601a      	str	r2, [r3, #0]
      break;
 8001176:	e03b      	b.n	80011f0 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001178:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <RCC_GetClocksFreq+0x144>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001180:	0d9b      	lsrs	r3, r3, #22
 8001182:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001184:	4b3b      	ldr	r3, [pc, #236]	; (8001274 <RCC_GetClocksFreq+0x144>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800118c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00d      	beq.n	80011b0 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001194:	4a39      	ldr	r2, [pc, #228]	; (800127c <RCC_GetClocksFreq+0x14c>)
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	fbb2 f2f3 	udiv	r2, r2, r3
 800119c:	4b35      	ldr	r3, [pc, #212]	; (8001274 <RCC_GetClocksFreq+0x144>)
 800119e:	6859      	ldr	r1, [r3, #4]
 80011a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80011a4:	400b      	ands	r3, r1
 80011a6:	099b      	lsrs	r3, r3, #6
 80011a8:	fb03 f302 	mul.w	r3, r3, r2
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	e00c      	b.n	80011ca <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80011b0:	4a31      	ldr	r2, [pc, #196]	; (8001278 <RCC_GetClocksFreq+0x148>)
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80011b8:	4b2e      	ldr	r3, [pc, #184]	; (8001274 <RCC_GetClocksFreq+0x144>)
 80011ba:	6859      	ldr	r1, [r3, #4]
 80011bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80011c0:	400b      	ands	r3, r1
 80011c2:	099b      	lsrs	r3, r3, #6
 80011c4:	fb03 f302 	mul.w	r3, r3, r2
 80011c8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <RCC_GetClocksFreq+0x144>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d2:	0c1b      	lsrs	r3, r3, #16
 80011d4:	3301      	adds	r3, #1
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80011da:	69fa      	ldr	r2, [r7, #28]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	fbb2 f2f3 	udiv	r2, r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	601a      	str	r2, [r3, #0]
      break;
 80011e6:	e003      	b.n	80011f0 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a23      	ldr	r2, [pc, #140]	; (8001278 <RCC_GetClocksFreq+0x148>)
 80011ec:	601a      	str	r2, [r3, #0]
      break;
 80011ee:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <RCC_GetClocksFreq+0x144>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011f8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001200:	4a1f      	ldr	r2, [pc, #124]	; (8001280 <RCC_GetClocksFreq+0x150>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4413      	add	r3, r2
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	40da      	lsrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <RCC_GetClocksFreq+0x144>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001220:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	0a9b      	lsrs	r3, r3, #10
 8001226:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001228:	4a15      	ldr	r2, [pc, #84]	; (8001280 <RCC_GetClocksFreq+0x150>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4413      	add	r3, r2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	40da      	lsrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <RCC_GetClocksFreq+0x144>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001248:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	0b5b      	lsrs	r3, r3, #13
 800124e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001250:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <RCC_GetClocksFreq+0x150>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4413      	add	r3, r2
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	40da      	lsrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	60da      	str	r2, [r3, #12]
}
 8001268:	bf00      	nop
 800126a:	3724      	adds	r7, #36	; 0x24
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	40023800 	.word	0x40023800
 8001278:	00f42400 	.word	0x00f42400
 800127c:	007a1200 	.word	0x007a1200
 8001280:	20000000 	.word	0x20000000

08001284 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d006      	beq.n	80012a4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001296:	490a      	ldr	r1, [pc, #40]	; (80012c0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <RCC_AHB1PeriphClockCmd+0x3c>)
 800129a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4313      	orrs	r3, r2
 80012a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80012a2:	e006      	b.n	80012b2 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80012a4:	4906      	ldr	r1, [pc, #24]	; (80012c0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80012a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	4013      	ands	r3, r2
 80012b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800

080012c4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80012d6:	490a      	ldr	r1, [pc, #40]	; (8001300 <RCC_APB1PeriphClockCmd+0x3c>)
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <RCC_APB1PeriphClockCmd+0x3c>)
 80012da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4313      	orrs	r3, r2
 80012e0:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80012e2:	e006      	b.n	80012f2 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80012e4:	4906      	ldr	r1, [pc, #24]	; (8001300 <RCC_APB1PeriphClockCmd+0x3c>)
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <RCC_APB1PeriphClockCmd+0x3c>)
 80012e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4013      	ands	r3, r2
 80012f0:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800

08001304 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d006      	beq.n	8001324 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001316:	490a      	ldr	r1, [pc, #40]	; (8001340 <RCC_APB2PeriphClockCmd+0x3c>)
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <RCC_APB2PeriphClockCmd+0x3c>)
 800131a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4313      	orrs	r3, r2
 8001320:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001322:	e006      	b.n	8001332 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001324:	4906      	ldr	r1, [pc, #24]	; (8001340 <RCC_APB2PeriphClockCmd+0x3c>)
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <RCC_APB2PeriphClockCmd+0x3c>)
 8001328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	43db      	mvns	r3, r3
 800132e:	4013      	ands	r3, r2
 8001330:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800

08001344 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	819a      	strh	r2, [r3, #12]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop

08001364 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	891b      	ldrh	r3, [r3, #8]
 8001378:	b29a      	uxth	r2, r3
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	4013      	ands	r3, r2
 800137e:	b29b      	uxth	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001384:	2301      	movs	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	e001      	b.n	800138e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a29      	ldr	r2, [pc, #164]	; (8001458 <TIM_TimeBaseInit+0xbc>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d013      	beq.n	80013e0 <TIM_TimeBaseInit+0x44>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a28      	ldr	r2, [pc, #160]	; (800145c <TIM_TimeBaseInit+0xc0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d00f      	beq.n	80013e0 <TIM_TimeBaseInit+0x44>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c6:	d00b      	beq.n	80013e0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a25      	ldr	r2, [pc, #148]	; (8001460 <TIM_TimeBaseInit+0xc4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d007      	beq.n	80013e0 <TIM_TimeBaseInit+0x44>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a24      	ldr	r2, [pc, #144]	; (8001464 <TIM_TimeBaseInit+0xc8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d003      	beq.n	80013e0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a23      	ldr	r2, [pc, #140]	; (8001468 <TIM_TimeBaseInit+0xcc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d108      	bne.n	80013f2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80013e0:	89fb      	ldrh	r3, [r7, #14]
 80013e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013e6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	885a      	ldrh	r2, [r3, #2]
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a1d      	ldr	r2, [pc, #116]	; (800146c <TIM_TimeBaseInit+0xd0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00c      	beq.n	8001414 <TIM_TimeBaseInit+0x78>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a1c      	ldr	r2, [pc, #112]	; (8001470 <TIM_TimeBaseInit+0xd4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d008      	beq.n	8001414 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001402:	89fb      	ldrh	r3, [r7, #14]
 8001404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001408:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	891a      	ldrh	r2, [r3, #8]
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	4313      	orrs	r3, r2
 8001412:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	89fa      	ldrh	r2, [r7, #14]
 8001418:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	881a      	ldrh	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <TIM_TimeBaseInit+0xbc>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d003      	beq.n	800143a <TIM_TimeBaseInit+0x9e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a09      	ldr	r2, [pc, #36]	; (800145c <TIM_TimeBaseInit+0xc0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d104      	bne.n	8001444 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	7a9b      	ldrb	r3, [r3, #10]
 800143e:	b29a      	uxth	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	829a      	strh	r2, [r3, #20]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40010000 	.word	0x40010000
 800145c:	40010400 	.word	0x40010400
 8001460:	40000400 	.word	0x40000400
 8001464:	40000800 	.word	0x40000800
 8001468:	40000c00 	.word	0x40000c00
 800146c:	40001000 	.word	0x40001000
 8001470:	40001400 	.word	0x40001400

08001474 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d008      	beq.n	8001498 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	b29a      	uxth	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001496:	e007      	b.n	80014a8 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	801a      	strh	r2, [r3, #0]
  }
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	81bb      	strh	r3, [r7, #12]
 80014c8:	2300      	movs	r3, #0
 80014ca:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	8a1b      	ldrh	r3, [r3, #16]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	4013      	ands	r3, r2
 80014d6:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	899b      	ldrh	r3, [r3, #12]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	4013      	ands	r3, r2
 80014e2:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80014e4:	89bb      	ldrh	r3, [r7, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <TIM_GetITStatus+0x42>
 80014ea:	897b      	ldrh	r3, [r7, #10]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80014f0:	2301      	movs	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e001      	b.n	80014fa <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	43db      	mvns	r3, r3
 8001518:	b29a      	uxth	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	821a      	strh	r2, [r3, #16]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop

0800152c <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	889b      	ldrh	r3, [r3, #4]
 800153c:	b29b      	uxth	r3, r3
 800153e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001542:	b29a      	uxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	889b      	ldrh	r3, [r3, #4]
 800154c:	b29a      	uxth	r2, r3
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	4313      	orrs	r3, r2
 8001552:	b29a      	uxth	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	809a      	strh	r2, [r3, #4]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	8a1b      	ldrh	r3, [r3, #16]
 8001582:	b29b      	uxth	r3, r3
 8001584:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800158c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	88db      	ldrh	r3, [r3, #6]
 8001592:	461a      	mov	r2, r3
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	4313      	orrs	r3, r2
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	b29a      	uxth	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	899b      	ldrh	r3, [r3, #12]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80015b0:	f023 030c 	bic.w	r3, r3, #12
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	889a      	ldrh	r2, [r3, #4]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	891b      	ldrh	r3, [r3, #8]
 80015be:	4313      	orrs	r3, r2
 80015c0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80015c6:	4313      	orrs	r3, r2
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	4313      	orrs	r3, r2
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	8a9b      	ldrh	r3, [r3, #20]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	899b      	ldrh	r3, [r3, #12]
 80015ee:	461a      	mov	r2, r3
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	4313      	orrs	r3, r2
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fd94 	bl	8001130 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a30      	ldr	r2, [pc, #192]	; (80016cc <USART_Init+0x168>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d003      	beq.n	8001618 <USART_Init+0xb4>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a2f      	ldr	r2, [pc, #188]	; (80016d0 <USART_Init+0x16c>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d102      	bne.n	800161e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	623b      	str	r3, [r7, #32]
 800161c:	e001      	b.n	8001622 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	899b      	ldrh	r3, [r3, #12]
 8001626:	b29b      	uxth	r3, r3
 8001628:	b21b      	sxth	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	da0c      	bge.n	8001648 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800162e:	6a3a      	ldr	r2, [r7, #32]
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	009a      	lsls	r2, r3, #2
 8001638:	441a      	add	r2, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fbb2 f3f3 	udiv	r3, r2, r3
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	e00b      	b.n	8001660 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001648:	6a3a      	ldr	r2, [r7, #32]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	009a      	lsls	r2, r3, #2
 8001652:	441a      	add	r2, r3
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <USART_Init+0x170>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	095b      	lsrs	r3, r3, #5
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	2264      	movs	r2, #100	; 0x64
 8001674:	fb02 f303 	mul.w	r3, r2, r3
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	899b      	ldrh	r3, [r3, #12]
 8001682:	b29b      	uxth	r3, r3
 8001684:	b21b      	sxth	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	da0c      	bge.n	80016a4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	3332      	adds	r3, #50	; 0x32
 8001690:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <USART_Init+0x170>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169e:	4313      	orrs	r3, r2
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
 80016a2:	e00b      	b.n	80016bc <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	3332      	adds	r3, #50	; 0x32
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <USART_Init+0x170>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	095b      	lsrs	r3, r3, #5
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b8:	4313      	orrs	r3, r2
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	b29a      	uxth	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	811a      	strh	r2, [r3, #8]
}
 80016c4:	bf00      	nop
 80016c6:	3728      	adds	r7, #40	; 0x28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40011000 	.word	0x40011000
 80016d0:	40011400 	.word	0x40011400
 80016d4:	51eb851f 	.word	0x51eb851f

080016d8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d008      	beq.n	80016fc <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	899b      	ldrh	r3, [r3, #12]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80016fa:	e007      	b.n	800170c <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	899b      	ldrh	r3, [r3, #12]
 8001700:	b29b      	uxth	r3, r3
 8001702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001706:	b29a      	uxth	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	819a      	strh	r2, [r3, #12]
  }
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00a      	beq.n	8001740 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	899b      	ldrh	r3, [r3, #12]
 800172e:	b29b      	uxth	r3, r3
 8001730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001738:	b29a      	uxth	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
 800173e:	e007      	b.n	8001750 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	899b      	ldrh	r3, [r3, #12]
 8001744:	b29b      	uxth	r3, r3
 8001746:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800174a:	b29a      	uxth	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	819a      	strh	r2, [r3, #12]
  }
}  
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
 8001768:	4613      	mov	r3, r2
 800176a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	095b      	lsrs	r3, r3, #5
 8001786:	b2db      	uxtb	r3, r3
 8001788:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	f003 031f 	and.w	r3, r3, #31
 8001790:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001792:	2201      	movs	r2, #1
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d103      	bne.n	80017aa <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	330c      	adds	r3, #12
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e009      	b.n	80017be <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d103      	bne.n	80017b8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	3310      	adds	r3, #16
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	e002      	b.n	80017be <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3314      	adds	r3, #20
 80017bc:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80017be:	787b      	ldrb	r3, [r7, #1]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	6811      	ldr	r1, [r2, #0]
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80017d0:	e006      	b.n	80017e0 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	6811      	ldr	r1, [r2, #0]
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	43d2      	mvns	r2, r2
 80017dc:	400a      	ands	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
  }
}
 80017e0:	bf00      	nop
 80017e2:	371c      	adds	r7, #28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	095b      	lsrs	r3, r3, #5
 800180e:	b2db      	uxtb	r3, r3
 8001810:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800181a:	2201      	movs	r2, #1
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	899b      	ldrh	r3, [r3, #12]
 800182e:	b29b      	uxth	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	4013      	ands	r3, r2
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	e011      	b.n	800185e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d107      	bne.n	8001850 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	8a1b      	ldrh	r3, [r3, #16]
 8001844:	b29b      	uxth	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	4013      	ands	r3, r2
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	e006      	b.n	800185e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	8a9b      	ldrh	r3, [r3, #20]
 8001854:	b29b      	uxth	r3, r3
 8001856:	461a      	mov	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	4013      	ands	r3, r2
 800185c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800185e:	887b      	ldrh	r3, [r7, #2]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	b29b      	uxth	r3, r3
 8001864:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001866:	2201      	movs	r2, #1
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	b29b      	uxth	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4013      	ands	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <USART_GetITStatus+0xa4>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800188a:	2301      	movs	r3, #1
 800188c:	74fb      	strb	r3, [r7, #19]
 800188e:	e001      	b.n	8001894 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001894:	7cfb      	ldrb	r3, [r7, #19]
}
 8001896:	4618      	mov	r0, r3
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop

080018a4 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80018b0:	2300      	movs	r3, #0
 80018b2:	81fb      	strh	r3, [r7, #14]
 80018b4:	2300      	movs	r3, #0
 80018b6:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 80018b8:	887b      	ldrh	r3, [r7, #2]
 80018ba:	0a1b      	lsrs	r3, r3, #8
 80018bc:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	2201      	movs	r2, #1
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80018c8:	89bb      	ldrh	r3, [r7, #12]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	801a      	strh	r2, [r3, #0]
}
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop

080018e0 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4a09      	ldr	r2, [pc, #36]	; (8001914 <STM_EVAL_LEDToggle+0x34>)
 80018ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f2:	79fa      	ldrb	r2, [r7, #7]
 80018f4:	4907      	ldr	r1, [pc, #28]	; (8001914 <STM_EVAL_LEDToggle+0x34>)
 80018f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80018fa:	6952      	ldr	r2, [r2, #20]
 80018fc:	79f9      	ldrb	r1, [r7, #7]
 80018fe:	4806      	ldr	r0, [pc, #24]	; (8001918 <STM_EVAL_LEDToggle+0x38>)
 8001900:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8001904:	404a      	eors	r2, r1
 8001906:	615a      	str	r2, [r3, #20]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	20000010 	.word	0x20000010
 8001918:	080031b8 	.word	0x080031b8

0800191c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8001920:	4b37      	ldr	r3, [pc, #220]	; (8001a00 <Audio_MAL_IRQHandler+0xe4>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <Audio_MAL_IRQHandler+0xe8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	4610      	mov	r0, r2
 800192c:	f7ff fabe 	bl	8000eac <DMA_GetFlagStatus>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d062      	beq.n	80019fc <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8001936:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <Audio_MAL_IRQHandler+0xec>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d04a      	beq.n	80019d4 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800193e:	bf00      	nop
 8001940:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <Audio_MAL_IRQHandler+0xe4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fa99 	bl	8000e7c <DMA_GetCmdStatus>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f7      	bne.n	8001940 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8001950:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <Audio_MAL_IRQHandler+0xe4>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <Audio_MAL_IRQHandler+0xe8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	4610      	mov	r0, r2
 800195c:	f7ff fae2 	bl	8000f24 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8001960:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <Audio_MAL_IRQHandler+0xf0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <Audio_MAL_IRQHandler+0xf4>)
 8001968:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800196a:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <Audio_MAL_IRQHandler+0xec>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001972:	4293      	cmp	r3, r2
 8001974:	bf28      	it	cs
 8001976:	4613      	movcs	r3, r2
 8001978:	4a25      	ldr	r2, [pc, #148]	; (8001a10 <Audio_MAL_IRQHandler+0xf4>)
 800197a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <Audio_MAL_IRQHandler+0xe4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4923      	ldr	r1, [pc, #140]	; (8001a10 <Audio_MAL_IRQHandler+0xf4>)
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f9ce 	bl	8000d24 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <Audio_MAL_IRQHandler+0xe4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2101      	movs	r1, #1
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fa58 	bl	8000e44 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <Audio_MAL_IRQHandler+0xf0>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <Audio_MAL_IRQHandler+0xec>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019a0:	428b      	cmp	r3, r1
 80019a2:	bf28      	it	cs
 80019a4:	460b      	movcs	r3, r1
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	4a18      	ldr	r2, [pc, #96]	; (8001a0c <Audio_MAL_IRQHandler+0xf0>)
 80019ac:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <Audio_MAL_IRQHandler+0xec>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <Audio_MAL_IRQHandler+0xec>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019ba:	428b      	cmp	r3, r1
 80019bc:	bf28      	it	cs
 80019be:	460b      	movcs	r3, r1
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <Audio_MAL_IRQHandler+0xec>)
 80019c4:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <Audio_MAL_IRQHandler+0xe4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2101      	movs	r1, #1
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fa39 	bl	8000e44 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80019d2:	e013      	b.n	80019fc <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <Audio_MAL_IRQHandler+0xe4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fa32 	bl	8000e44 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <Audio_MAL_IRQHandler+0xe4>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <Audio_MAL_IRQHandler+0xe8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4610      	mov	r0, r2
 80019ec:	f7ff fa9a 	bl	8000f24 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <Audio_MAL_IRQHandler+0xf0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fa30 	bl	8001e5c <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000028 	.word	0x20000028
 8001a04:	2000002c 	.word	0x2000002c
 8001a08:	20000020 	.word	0x20000020
 8001a0c:	2000004c 	.word	0x2000004c
 8001a10:	2000008c 	.word	0x2000008c

08001a14 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001a18:	f7ff ff80 	bl	800191c <Audio_MAL_IRQHandler>
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001a24:	f7ff ff7a 	bl	800191c <Audio_MAL_IRQHandler>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001a30:	2102      	movs	r1, #2
 8001a32:	480d      	ldr	r0, [pc, #52]	; (8001a68 <SPI3_IRQHandler+0x3c>)
 8001a34:	f7ff fc96 	bl	8001364 <SPI_I2S_GetFlagStatus>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d011      	beq.n	8001a62 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <SPI3_IRQHandler+0x40>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d106      	bne.n	8001a54 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8001a46:	f000 fa15 	bl	8001e74 <EVAL_AUDIO_GetSampleCallBack>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	2004      	movs	r0, #4
 8001a50:	f7ff f924 	bl	8000c9c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8001a54:	f000 fa0e 	bl	8001e74 <EVAL_AUDIO_GetSampleCallBack>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <SPI3_IRQHandler+0x3c>)
 8001a5e:	f7ff fc71 	bl	8001344 <SPI_I2S_SendData>
  }
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40003c00 	.word	0x40003c00
 8001a6c:	20000024 	.word	0x20000024

08001a70 <TIM2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
 8001a74:	2101      	movs	r1, #1
 8001a76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a7a:	f7ff fd1b 	bl	80014b4 <TIM_GetITStatus>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d004      	beq.n	8001a8e <TIM2_IRQHandler+0x1e>
  {
    TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8001a84:	2101      	movs	r1, #1
 8001a86:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a8a:	f7ff fd3d 	bl	8001508 <TIM_ClearITPendingBit>
    //Do stuff here
  }
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	0000      	movs	r0, r0
	...

08001a98 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
	uint32_t timerFreq;
	uint16_t timerPeriod;
	uint16_t n;

	/* Create wave table for sinewave */
	for (n = 0; n<DACBUFFERSIZE; n++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	81fb      	strh	r3, [r7, #14]
 8001aa2:	e03a      	b.n	8001b1a <main+0x82>
	{
		DACBuffer1[n] = (uint16_t)((4095+1)/2.0)*( sin( M_TWOPI*n/DACBUFFERSIZE) + 1.0 );
 8001aa4:	89fc      	ldrh	r4, [r7, #14]
 8001aa6:	89fb      	ldrh	r3, [r7, #14]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fcdf 	bl	800046c <__aeabi_i2d>
 8001aae:	a32f      	add	r3, pc, #188	; (adr r3, 8001b6c <main+0xd4>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	f7fe fd40 	bl	8000538 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <main+0xc0>)
 8001ac6:	f7fe fe61 	bl	800078c <__aeabi_ddiv>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	ec43 2b17 	vmov	d7, r2, r3
 8001ad2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ad6:	eef0 0a67 	vmov.f32	s1, s15
 8001ada:	f000 fb11 	bl	8002100 <sin>
 8001ade:	ec51 0b10 	vmov	r0, r1, d0
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <main+0xc4>)
 8001ae8:	f7fe fb74 	bl	80001d4 <__adddf3>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <main+0xc8>)
 8001afa:	f7fe fd1d 	bl	8000538 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7fe ffd9 	bl	8000abc <__aeabi_d2uiz>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <main+0xcc>)
 8001b10:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	uint32_t timerFreq;
	uint16_t timerPeriod;
	uint16_t n;

	/* Create wave table for sinewave */
	for (n = 0; n<DACBUFFERSIZE; n++)
 8001b14:	89fb      	ldrh	r3, [r7, #14]
 8001b16:	3301      	adds	r3, #1
 8001b18:	81fb      	strh	r3, [r7, #14]
 8001b1a:	89fb      	ldrh	r3, [r7, #14]
 8001b1c:	2bff      	cmp	r3, #255	; 0xff
 8001b1e:	d9c1      	bls.n	8001aa4 <main+0xc>
	{
		DACBuffer1[n] = (uint16_t)((4095+1)/2.0)*( sin( M_TWOPI*n/DACBUFFERSIZE) + 1.0 );
	}

	/* Calculate frequency of timer */
	fTimer = WAVEFREQ * DACBUFFERSIZE;
 8001b20:	f44f 337a 	mov.w	r3, #256000	; 0x3e800
 8001b24:	60bb      	str	r3, [r7, #8]

	/* Calculate Tick Rate */
	timerFreq = TIMER_CLOCK / TIMER6_PRESCALER; /* Timer tick is in Hz */
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <main+0xd0>)
 8001b28:	607b      	str	r3, [r7, #4]

	/* Calculate period of Timer */
	timerPeriod = (uint16_t)( timerFreq / fTimer );
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	807b      	strh	r3, [r7, #2]

	/* System Clocks Configuration */
	RCC_Configuration();
 8001b34:	f000 f81e 	bl	8001b74 <RCC_Configuration>

	/* NVIC configuration */
	NVIC_Configuration();
 8001b38:	f000 f832 	bl	8001ba0 <NVIC_Configuration>

	/* Configure the GPIO ports */
	GPIO_Configuration();
 8001b3c:	f000 f8de 	bl	8001cfc <GPIO_Configuration>

	/* Configure the USART6 MIDI receiver */
	USARTx_Configuration();
 8001b40:	f000 f846 	bl	8001bd0 <USARTx_Configuration>

	/* Timer Configuration */
	TIM_Configuration(timerPeriod);
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f948 	bl	8001ddc <TIM_Configuration>

	/* DAC Configuration */
	DAC_Configuration();
 8001b4c:	f000 f96a 	bl	8001e24 <DAC_Configuration>

	/* DMA Config --> Takes in a pointer to the waveform buffer */
	DMA_Configuration ( DACBuffer1 );
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <main+0xcc>)
 8001b52:	f000 f903 	bl	8001d5c <DMA_Configuration>
	/* Infinite loop */
	while (1)
	{
	  /* Do stuff here... */

	}
 8001b56:	e7fe      	b.n	8001b56 <main+0xbe>
 8001b58:	40700000 	.word	0x40700000
 8001b5c:	3ff00000 	.word	0x3ff00000
 8001b60:	40a00000 	.word	0x40a00000
 8001b64:	200000d0 	.word	0x200000d0
 8001b68:	0280de80 	.word	0x0280de80
 8001b6c:	54442d18 	.word	0x54442d18
 8001b70:	401921fb 	.word	0x401921fb

08001b74 <RCC_Configuration>:
  * @brief  Configures the different system clocks.
  * @param  None
  * @retval : None
  */
void RCC_Configuration(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	/* Initialize all the peripherals here. */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6 | RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2, ENABLE);
 8001b78:	2101      	movs	r1, #1
 8001b7a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b7e:	f7ff fbc1 	bl	8001304 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_APB1Periph_DAC  | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOA, ENABLE);
 8001b82:	2101      	movs	r1, #1
 8001b84:	4804      	ldr	r0, [pc, #16]	; (8001b98 <RCC_Configuration+0x24>)
 8001b86:	f7ff fb7d 	bl	8001284 <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd( RCC_APB1Periph_DAC | RCC_APB1Periph_TIM6 , ENABLE);
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	4803      	ldr	r0, [pc, #12]	; (8001b9c <RCC_Configuration+0x28>)
 8001b8e:	f7ff fb99 	bl	80012c4 <RCC_APB1PeriphClockCmd>
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20200005 	.word	0x20200005
 8001b9c:	20000010 	.word	0x20000010

08001ba0 <NVIC_Configuration>:
  * @brief  Configures the nested vectored interrupt controller.
  * @param  None
  * @retval : None
  */
void NVIC_Configuration(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Configure the Priority Group to 2 bits */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8001ba6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001baa:	f7fe ffa7 	bl	8000afc <NVIC_PriorityGroupConfig>

	/* Enable the USARTx Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
 8001bae:	2347      	movs	r3, #71	; 0x47
 8001bb0:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe ffaf 	bl	8000b24 <NVIC_Init>

}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop

08001bd0 <USARTx_Configuration>:
 *       - No parity																			 *
 *       - Hardware flow control disabled (RTS and CTS signals)									 *
 *       - Receive and transmit enabled															 *
 *************************************************************************************************/

void USARTx_Configuration(void) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0

	USART_InitTypeDef USART_InitStructure;

	/* Enable the USART OverSampling by 8 */
	USART_OverSampling8Cmd(USART6, ENABLE);
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	4811      	ldr	r0, [pc, #68]	; (8001c20 <USARTx_Configuration+0x50>)
 8001bda:	f7ff fd9d 	bl	8001718 <USART_OverSampling8Cmd>

	// USART6 configuration
	USART_InitStructure.USART_BaudRate = 31250;
 8001bde:	f647 2312 	movw	r3, #31250	; 0x7a12
 8001be2:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001be4:	2300      	movs	r3, #0
 8001be6:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001be8:	2300      	movs	r3, #0
 8001bea:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	80fb      	strh	r3, [r7, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001bf4:	230c      	movs	r3, #12
 8001bf6:	817b      	strh	r3, [r7, #10]

	USART_Init(USART6, &USART_InitStructure);
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4808      	ldr	r0, [pc, #32]	; (8001c20 <USARTx_Configuration+0x50>)
 8001bfe:	f7ff fcb1 	bl	8001564 <USART_Init>

	//Enables USART 6 and receiver
	USART_Cmd(USART6, ENABLE);
 8001c02:	2101      	movs	r1, #1
 8001c04:	4806      	ldr	r0, [pc, #24]	; (8001c20 <USARTx_Configuration+0x50>)
 8001c06:	f7ff fd67 	bl	80016d8 <USART_Cmd>

	//Enable RXNE interrupt
	USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f240 5125 	movw	r1, #1317	; 0x525
 8001c10:	4803      	ldr	r0, [pc, #12]	; (8001c20 <USARTx_Configuration+0x50>)
 8001c12:	f7ff fda3 	bl	800175c <USART_ITConfig>
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40011400 	.word	0x40011400

08001c24 <USART6_IRQHandler>:
void USART6_IRQHandler() {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
	if (USART_GetITStatus(USART6, USART_IT_RXNE) != RESET)
 8001c2a:	f240 5125 	movw	r1, #1317	; 0x525
 8001c2e:	482f      	ldr	r0, [pc, #188]	; (8001cec <USART6_IRQHandler+0xc8>)
 8001c30:	f7ff fddc 	bl	80017ec <USART_GetITStatus>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d053      	beq.n	8001ce2 <USART6_IRQHandler+0xbe>
	{
		USART_ClearITPendingBit(USART6, USART_IT_RXNE);
 8001c3a:	f240 5125 	movw	r1, #1317	; 0x525
 8001c3e:	482b      	ldr	r0, [pc, #172]	; (8001cec <USART6_IRQHandler+0xc8>)
 8001c40:	f7ff fe30 	bl	80018a4 <USART_ClearITPendingBit>
		//Do stuff here
		if (USART6->DR/16 == 0x9) {
 8001c44:	4b29      	ldr	r3, [pc, #164]	; (8001cec <USART6_IRQHandler+0xc8>)
 8001c46:	889b      	ldrh	r3, [r3, #4]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b90      	subs	r3, #144	; 0x90
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2b0f      	cmp	r3, #15
 8001c50:	d806      	bhi.n	8001c60 <USART6_IRQHandler+0x3c>
				//If it has just received a new status byte
				MIDI_BYTEx = 1;
 8001c52:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <USART6_IRQHandler+0xcc>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
				MIDI_NOTE_ON = 1;
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <USART6_IRQHandler+0xd0>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	e010      	b.n	8001c82 <USART6_IRQHandler+0x5e>
			}
			else {
				//If not receiving a status byte and byte_no > 3, assume running_status byte(s)
				//If some other status byte
				if ((USART6->DR >> 7) == 1){
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <USART6_IRQHandler+0xc8>)
 8001c62:	889b      	ldrh	r3, [r3, #4]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	09db      	lsrs	r3, r3, #7
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d102      	bne.n	8001c74 <USART6_IRQHandler+0x50>
					MIDI_NOTE_ON = 0;
 8001c6e:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <USART6_IRQHandler+0xd0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
				}

				if (MIDI_BYTEx > 3){
 8001c74:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <USART6_IRQHandler+0xcc>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d902      	bls.n	8001c82 <USART6_IRQHandler+0x5e>
					MIDI_BYTEx = 2;			//Running status
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <USART6_IRQHandler+0xcc>)
 8001c7e:	2202      	movs	r2, #2
 8001c80:	701a      	strb	r2, [r3, #0]
				}
			}

			//Read in byte
			Midi_Bytes[MIDI_BYTEx-1] = USART6->DR;
 8001c82:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <USART6_IRQHandler+0xcc>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	4a18      	ldr	r2, [pc, #96]	; (8001cec <USART6_IRQHandler+0xc8>)
 8001c8a:	8892      	ldrh	r2, [r2, #4]
 8001c8c:	b292      	uxth	r2, r2
 8001c8e:	b2d1      	uxtb	r1, r2
 8001c90:	4a19      	ldr	r2, [pc, #100]	; (8001cf8 <USART6_IRQHandler+0xd4>)
 8001c92:	54d1      	strb	r1, [r2, r3]

			if (MIDI_BYTEx == 3 && MIDI_NOTE_ON == 1 && Midi_Bytes[2] != 0) {
 8001c94:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <USART6_IRQHandler+0xcc>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d11c      	bne.n	8001cd6 <USART6_IRQHandler+0xb2>
 8001c9c:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <USART6_IRQHandler+0xd0>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d118      	bne.n	8001cd6 <USART6_IRQHandler+0xb2>
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <USART6_IRQHandler+0xd4>)
 8001ca6:	789b      	ldrb	r3, [r3, #2]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d014      	beq.n	8001cd6 <USART6_IRQHandler+0xb2>
				//If the current command is NOTE ON
				if (Midi_Bytes[0]/16 == 0x9) {
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <USART6_IRQHandler+0xd4>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	3370      	adds	r3, #112	; 0x70
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b0f      	cmp	r3, #15
 8001cb6:	d80e      	bhi.n	8001cd6 <USART6_IRQHandler+0xb2>
					//Finish reading block
					// calculate the new ARR
					char data1 =  Midi_Bytes[0];
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <USART6_IRQHandler+0xd4>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	71fb      	strb	r3, [r7, #7]
					data1 =  Midi_Bytes[1];
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <USART6_IRQHandler+0xd4>)
 8001cc0:	785b      	ldrb	r3, [r3, #1]
 8001cc2:	71fb      	strb	r3, [r7, #7]
					data1 =  Midi_Bytes[2];
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <USART6_IRQHandler+0xd4>)
 8001cc6:	789b      	ldrb	r3, [r3, #2]
 8001cc8:	71fb      	strb	r3, [r7, #7]
					data1 =  Midi_Bytes[0];
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <USART6_IRQHandler+0xd4>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]

					STM_EVAL_LEDToggle(LED3);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f7ff fe05 	bl	80018e0 <STM_EVAL_LEDToggle>

				}
			}
			MIDI_BYTEx++;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <USART6_IRQHandler+0xcc>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <USART6_IRQHandler+0xcc>)
 8001ce0:	701a      	strb	r2, [r3, #0]

	}
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40011400 	.word	0x40011400
 8001cf0:	200000cc 	.word	0x200000cc
 8001cf4:	200000cb 	.word	0x200000cb
 8001cf8:	200000c8 	.word	0x200000c8

08001cfc <GPIO_Configuration>:
  * @brief  Configures the different GPIO ports.
  * @param  None
  * @retval : None
  */
void GPIO_Configuration(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Pack the struct */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8001d02:	2310      	movs	r3, #16
 8001d04:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001d06:	2302      	movs	r3, #2
 8001d08:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	71fb      	strb	r3, [r7, #7]

	/* Call Init function */
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001d12:	463b      	mov	r3, r7
 8001d14:	4619      	mov	r1, r3
 8001d16:	480f      	ldr	r0, [pc, #60]	; (8001d54 <GPIO_Configuration+0x58>)
 8001d18:	f7ff f932 	bl	8000f80 <GPIO_Init>

	/* Configure USART6 Tx and Rx as alternate function push-pull for MIDI Receiver*/
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_100MHz;
 8001d20:	2303      	movs	r3, #3
 8001d22:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_UP;
 8001d24:	2301      	movs	r3, #1
 8001d26:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin   	= USARTx_TX_PIN | USARTx_RX_PIN;
 8001d28:	23c0      	movs	r3, #192	; 0xc0
 8001d2a:	603b      	str	r3, [r7, #0]

	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4809      	ldr	r0, [pc, #36]	; (8001d58 <GPIO_Configuration+0x5c>)
 8001d32:	f7ff f925 	bl	8000f80 <GPIO_Init>

	// Alternate function PC 6-7 to USART_6
	GPIO_PinAFConfig(GPIOC, USARTx_TX_SOURCE, USARTx_TX_AF);
 8001d36:	2208      	movs	r2, #8
 8001d38:	2106      	movs	r1, #6
 8001d3a:	4807      	ldr	r0, [pc, #28]	; (8001d58 <GPIO_Configuration+0x5c>)
 8001d3c:	f7ff f9ae 	bl	800109c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, USARTx_RX_SOURCE, USARTx_RX_AF);
 8001d40:	2208      	movs	r2, #8
 8001d42:	2107      	movs	r1, #7
 8001d44:	4804      	ldr	r0, [pc, #16]	; (8001d58 <GPIO_Configuration+0x5c>)
 8001d46:	f7ff f9a9 	bl	800109c <GPIO_PinAFConfig>

}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40020000 	.word	0x40020000
 8001d58:	40020800 	.word	0x40020800

08001d5c <DMA_Configuration>:
  * @brief  Configures the DMA.
  * @param  None
  * @retval : None
  */
void DMA_Configuration( uint16_t* wavBuffer )
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b092      	sub	sp, #72	; 0x48
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	DMA_InitTypeDef DMA_InitStructure;

	//Initialize the structure to default values
	DMA_StructInit(&DMA_InitStructure);
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff f833 	bl	8000dd4 <DMA_StructInit>

	DMA_InitStructure.DMA_Channel = DMA_Channel_7;
 8001d6e:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8001d72:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(DAC_BASE + 0x08);  //DAC channel1 12-bit right-aligned data holding register (ref manual pg. 264)
 8001d74:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <DMA_Configuration+0x78>)
 8001d76:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)wavBuffer;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8001d7c:	2340      	movs	r3, #64	; 0x40
 8001d7e:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_BufferSize = DACBUFFERSIZE;
 8001d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d84:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001d86:	2300      	movs	r3, #0
 8001d88:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8001d90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8001d96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8001d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001da0:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8001da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8001da8:	2300      	movs	r3, #0
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8001dac:	2303      	movs	r3, #3
 8001dae:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001db0:	2300      	movs	r3, #0
 8001db2:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001db4:	2300      	movs	r3, #0
 8001db6:	647b      	str	r3, [r7, #68]	; 0x44

	/* Call Init function */
	DMA_Init(DMA1_Stream5, &DMA_InitStructure);
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4806      	ldr	r0, [pc, #24]	; (8001dd8 <DMA_Configuration+0x7c>)
 8001dc0:	f7fe ffb0 	bl	8000d24 <DMA_Init>

	/* Enable DMA */
	DMA_Cmd(DMA1_Stream5, ENABLE);
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <DMA_Configuration+0x7c>)
 8001dc8:	f7ff f83c 	bl	8000e44 <DMA_Cmd>

}
 8001dcc:	bf00      	nop
 8001dce:	3748      	adds	r7, #72	; 0x48
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40007408 	.word	0x40007408
 8001dd8:	40026088 	.word	0x40026088

08001ddc <TIM_Configuration>:
  * @brief  Configures the Timers.
  * @param  wavePeriod (period of timer), preScaler (prescaler for timer)
  * @retval : None
  */
void TIM_Configuration(uint16_t wavPeriod)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStruct;

	/* pack Timer struct */
	TIM_TimeBaseStruct.TIM_Period = wavPeriod-1;
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	613b      	str	r3, [r7, #16]
	TIM_TimeBaseStruct.TIM_Prescaler = TIMER6_PRESCALER -1;
 8001dec:	2301      	movs	r3, #1
 8001dee:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8001df0:	2300      	movs	r3, #0
 8001df2:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8001df4:	2300      	movs	r3, #0
 8001df6:	81fb      	strh	r3, [r7, #14]
	TIM_TimeBaseStruct.TIM_RepetitionCounter = 0x0000;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	75bb      	strb	r3, [r7, #22]

	/* Call init function */
	TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStruct);
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	4619      	mov	r1, r3
 8001e02:	4807      	ldr	r0, [pc, #28]	; (8001e20 <TIM_Configuration+0x44>)
 8001e04:	f7ff faca 	bl	800139c <TIM_TimeBaseInit>

	/* Select Timer to trigger DAC */
	TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);
 8001e08:	2120      	movs	r1, #32
 8001e0a:	4805      	ldr	r0, [pc, #20]	; (8001e20 <TIM_Configuration+0x44>)
 8001e0c:	f7ff fb8e 	bl	800152c <TIM_SelectOutputTrigger>

	/* TIM6 enable counter */
	TIM_Cmd(TIM6, ENABLE);
 8001e10:	2101      	movs	r1, #1
 8001e12:	4803      	ldr	r0, [pc, #12]	; (8001e20 <TIM_Configuration+0x44>)
 8001e14:	f7ff fb2e 	bl	8001474 <TIM_Cmd>

}
 8001e18:	bf00      	nop
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40001000 	.word	0x40001000

08001e24 <DAC_Configuration>:
  * @brief  Configures the DAC
  * @param  None
  * @retval : None
  */
void DAC_Configuration(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
	DAC_InitTypeDef DAC_InitStruct;

	/* Initialize the DAC_Trigger member */
	DAC_InitStruct.DAC_Trigger = DAC_Trigger_T6_TRGO;
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	603b      	str	r3, [r7, #0]
	/* Initialize the DAC_WaveGeneration member */
	DAC_InitStruct.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
	/* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
	DAC_InitStruct.DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
	/* Initialize the DAC_OutputBuffer member */
	DAC_InitStruct.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]

	/* Init DAC */
	DAC_Init(DAC_Channel_1, &DAC_InitStruct);
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7fe fed2 	bl	8000be8 <DAC_Init>

	/* Enable DMA request */
	DAC_DMACmd(DAC_Channel_1, ENABLE);
 8001e44:	2101      	movs	r1, #1
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7fe ff44 	bl	8000cd4 <DAC_DMACmd>

	/* Enable DAC Channel1: Once the DAC channel1 is enabled, PA.04 is automatically connected to the DAC converter. */
	DAC_Cmd(DAC_Channel_1, ENABLE);
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7fe fefe 	bl	8000c50 <DAC_Cmd>

}
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8001e66:	bf00      	nop
}
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop

08001e74 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8001e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop

08001e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e8e:	e003      	b.n	8001e98 <LoopCopyDataInit>

08001e90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e96:	3104      	adds	r1, #4

08001e98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e98:	480b      	ldr	r0, [pc, #44]	; (8001ec8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ea0:	d3f6      	bcc.n	8001e90 <CopyDataInit>
  ldr  r2, =_sbss
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ea4:	e002      	b.n	8001eac <LoopFillZerobss>

08001ea6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ea6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ea8:	f842 3b04 	str.w	r3, [r2], #4

08001eac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001eae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001eb0:	d3f9      	bcc.n	8001ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eb2:	f000 f84b 	bl	8001f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f000 f8fb 	bl	80020b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eba:	f7ff fded 	bl	8001a98 <main>
  bx  lr    
 8001ebe:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ec0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001ec4:	080033a0 	.word	0x080033a0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ecc:	20000030 	.word	0x20000030
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001ed0:	20000030 	.word	0x20000030
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ed4:	200002d0 	.word	0x200002d0

08001ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC_IRQHandler>
	...

08001edc <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop

08001eec <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001ef0:	e7fe      	b.n	8001ef0 <HardFault_Handler+0x4>
 8001ef2:	bf00      	nop

08001ef4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001ef8:	e7fe      	b.n	8001ef8 <MemManage_Handler+0x4>
 8001efa:	bf00      	nop

08001efc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001f00:	e7fe      	b.n	8001f00 <BusFault_Handler+0x4>
 8001f02:	bf00      	nop

08001f04 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001f08:	e7fe      	b.n	8001f08 <UsageFault_Handler+0x4>
 8001f0a:	bf00      	nop

08001f0c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop

08001f1c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop

08001f2c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop

08001f3c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop

08001f4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f50:	4a16      	ldr	r2, [pc, #88]	; (8001fac <SystemInit+0x60>)
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <SystemInit+0x60>)
 8001f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f60:	4a13      	ldr	r2, [pc, #76]	; (8001fb0 <SystemInit+0x64>)
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <SystemInit+0x64>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <SystemInit+0x64>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f72:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <SystemInit+0x64>)
 8001f74:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <SystemInit+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <SystemInit+0x64>)
 8001f84:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <SystemInit+0x68>)
 8001f86:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f88:	4a09      	ldr	r2, [pc, #36]	; (8001fb0 <SystemInit+0x64>)
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <SystemInit+0x64>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <SystemInit+0x64>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001f9a:	f000 f80d 	bl	8001fb8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f9e:	4b03      	ldr	r3, [pc, #12]	; (8001fac <SystemInit+0x60>)
 8001fa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fa4:	609a      	str	r2, [r3, #8]
#endif
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	e000ed00 	.word	0xe000ed00
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	24003010 	.word	0x24003010

08001fb8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001fc6:	4a36      	ldr	r2, [pc, #216]	; (80020a0 <SetSysClock+0xe8>)
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <SetSysClock+0xe8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001fd2:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <SetSysClock+0xe8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d103      	bne.n	8001ff0 <SetSysClock+0x38>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001fee:	d1f0      	bne.n	8001fd2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <SetSysClock+0xe8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	e001      	b.n	8002006 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002002:	2300      	movs	r3, #0
 8002004:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d142      	bne.n	8002092 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800200c:	4a24      	ldr	r2, [pc, #144]	; (80020a0 <SetSysClock+0xe8>)
 800200e:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <SetSysClock+0xe8>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002016:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8002018:	4a22      	ldr	r2, [pc, #136]	; (80020a4 <SetSysClock+0xec>)
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <SetSysClock+0xec>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002022:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002024:	4a1e      	ldr	r2, [pc, #120]	; (80020a0 <SetSysClock+0xe8>)
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <SetSysClock+0xe8>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800202c:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <SetSysClock+0xe8>)
 800202e:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <SetSysClock+0xe8>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002036:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002038:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <SetSysClock+0xe8>)
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <SetSysClock+0xe8>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002042:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <SetSysClock+0xe8>)
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <SetSysClock+0xf0>)
 8002048:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800204a:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <SetSysClock+0xe8>)
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <SetSysClock+0xe8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002054:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002056:	bf00      	nop
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <SetSysClock+0xe8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f9      	beq.n	8002058 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <SetSysClock+0xf4>)
 8002066:	f240 6205 	movw	r2, #1541	; 0x605
 800206a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800206c:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <SetSysClock+0xe8>)
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <SetSysClock+0xe8>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f023 0303 	bic.w	r3, r3, #3
 8002076:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002078:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <SetSysClock+0xe8>)
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <SetSysClock+0xe8>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f043 0302 	orr.w	r3, r3, #2
 8002082:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002084:	bf00      	nop
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <SetSysClock+0xe8>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b08      	cmp	r3, #8
 8002090:	d1f9      	bne.n	8002086 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40007000 	.word	0x40007000
 80020a8:	07405408 	.word	0x07405408
 80020ac:	40023c00 	.word	0x40023c00

080020b0 <__libc_init_array>:
 80020b0:	b570      	push	{r4, r5, r6, lr}
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <__libc_init_array+0x3c>)
 80020b4:	4c0e      	ldr	r4, [pc, #56]	; (80020f0 <__libc_init_array+0x40>)
 80020b6:	1ae4      	subs	r4, r4, r3
 80020b8:	10a4      	asrs	r4, r4, #2
 80020ba:	2500      	movs	r5, #0
 80020bc:	461e      	mov	r6, r3
 80020be:	42a5      	cmp	r5, r4
 80020c0:	d004      	beq.n	80020cc <__libc_init_array+0x1c>
 80020c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020c6:	4798      	blx	r3
 80020c8:	3501      	adds	r5, #1
 80020ca:	e7f8      	b.n	80020be <__libc_init_array+0xe>
 80020cc:	f001 f868 	bl	80031a0 <_init>
 80020d0:	4c08      	ldr	r4, [pc, #32]	; (80020f4 <__libc_init_array+0x44>)
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <__libc_init_array+0x48>)
 80020d4:	1ae4      	subs	r4, r4, r3
 80020d6:	10a4      	asrs	r4, r4, #2
 80020d8:	2500      	movs	r5, #0
 80020da:	461e      	mov	r6, r3
 80020dc:	42a5      	cmp	r5, r4
 80020de:	d004      	beq.n	80020ea <__libc_init_array+0x3a>
 80020e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020e4:	4798      	blx	r3
 80020e6:	3501      	adds	r5, #1
 80020e8:	e7f8      	b.n	80020dc <__libc_init_array+0x2c>
 80020ea:	bd70      	pop	{r4, r5, r6, pc}
 80020ec:	08003398 	.word	0x08003398
 80020f0:	08003398 	.word	0x08003398
 80020f4:	0800339c 	.word	0x0800339c
 80020f8:	08003398 	.word	0x08003398
 80020fc:	00000000 	.word	0x00000000

08002100 <sin>:
 8002100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002102:	ec51 0b10 	vmov	r0, r1, d0
 8002106:	4a20      	ldr	r2, [pc, #128]	; (8002188 <sin+0x88>)
 8002108:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800210c:	4293      	cmp	r3, r2
 800210e:	dc03      	bgt.n	8002118 <sin+0x18>
 8002110:	2000      	movs	r0, #0
 8002112:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8002180 <sin+0x80>
 8002116:	e017      	b.n	8002148 <sin+0x48>
 8002118:	4a1c      	ldr	r2, [pc, #112]	; (800218c <sin+0x8c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	dd05      	ble.n	800212a <sin+0x2a>
 800211e:	ee10 2a10 	vmov	r2, s0
 8002122:	460b      	mov	r3, r1
 8002124:	f7fe f854 	bl	80001d0 <__aeabi_dsub>
 8002128:	e022      	b.n	8002170 <sin+0x70>
 800212a:	4668      	mov	r0, sp
 800212c:	f000 f830 	bl	8002190 <__ieee754_rem_pio2>
 8002130:	f000 0003 	and.w	r0, r0, #3
 8002134:	2801      	cmp	r0, #1
 8002136:	ed9d 1b02 	vldr	d1, [sp, #8]
 800213a:	ed9d 0b00 	vldr	d0, [sp]
 800213e:	d008      	beq.n	8002152 <sin+0x52>
 8002140:	2802      	cmp	r0, #2
 8002142:	d009      	beq.n	8002158 <sin+0x58>
 8002144:	b960      	cbnz	r0, 8002160 <sin+0x60>
 8002146:	2001      	movs	r0, #1
 8002148:	f000 fe5a 	bl	8002e00 <__kernel_sin>
 800214c:	ec51 0b10 	vmov	r0, r1, d0
 8002150:	e00e      	b.n	8002170 <sin+0x70>
 8002152:	f000 fa1d 	bl	8002590 <__kernel_cos>
 8002156:	e7f9      	b.n	800214c <sin+0x4c>
 8002158:	2001      	movs	r0, #1
 800215a:	f000 fe51 	bl	8002e00 <__kernel_sin>
 800215e:	e001      	b.n	8002164 <sin+0x64>
 8002160:	f000 fa16 	bl	8002590 <__kernel_cos>
 8002164:	ec53 2b10 	vmov	r2, r3, d0
 8002168:	ee10 0a10 	vmov	r0, s0
 800216c:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002170:	ec41 0b10 	vmov	d0, r0, r1
 8002174:	b005      	add	sp, #20
 8002176:	f85d fb04 	ldr.w	pc, [sp], #4
 800217a:	bf00      	nop
 800217c:	f3af 8000 	nop.w
	...
 8002188:	3fe921fb 	.word	0x3fe921fb
 800218c:	7fefffff 	.word	0x7fefffff

08002190 <__ieee754_rem_pio2>:
 8002190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002194:	ec55 4b10 	vmov	r4, r5, d0
 8002198:	4bc7      	ldr	r3, [pc, #796]	; (80024b8 <__ieee754_rem_pio2+0x328>)
 800219a:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800219e:	4598      	cmp	r8, r3
 80021a0:	b08d      	sub	sp, #52	; 0x34
 80021a2:	4682      	mov	sl, r0
 80021a4:	46ab      	mov	fp, r5
 80021a6:	dc06      	bgt.n	80021b6 <__ieee754_rem_pio2+0x26>
 80021a8:	2200      	movs	r2, #0
 80021aa:	2300      	movs	r3, #0
 80021ac:	ed8a 0b00 	vstr	d0, [sl]
 80021b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80021b4:	e160      	b.n	8002478 <__ieee754_rem_pio2+0x2e8>
 80021b6:	4bc1      	ldr	r3, [pc, #772]	; (80024bc <__ieee754_rem_pio2+0x32c>)
 80021b8:	4598      	cmp	r8, r3
 80021ba:	dc71      	bgt.n	80022a0 <__ieee754_rem_pio2+0x110>
 80021bc:	2d00      	cmp	r5, #0
 80021be:	a3b0      	add	r3, pc, #704	; (adr r3, 8002480 <__ieee754_rem_pio2+0x2f0>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	ee10 0a10 	vmov	r0, s0
 80021c8:	4629      	mov	r1, r5
 80021ca:	4ebd      	ldr	r6, [pc, #756]	; (80024c0 <__ieee754_rem_pio2+0x330>)
 80021cc:	dd33      	ble.n	8002236 <__ieee754_rem_pio2+0xa6>
 80021ce:	f7fd ffff 	bl	80001d0 <__aeabi_dsub>
 80021d2:	45b0      	cmp	r8, r6
 80021d4:	4604      	mov	r4, r0
 80021d6:	460d      	mov	r5, r1
 80021d8:	d010      	beq.n	80021fc <__ieee754_rem_pio2+0x6c>
 80021da:	a3ab      	add	r3, pc, #684	; (adr r3, 8002488 <__ieee754_rem_pio2+0x2f8>)
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	f7fd fff6 	bl	80001d0 <__aeabi_dsub>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	e9ca 2300 	strd	r2, r3, [sl]
 80021ec:	4620      	mov	r0, r4
 80021ee:	4629      	mov	r1, r5
 80021f0:	f7fd ffee 	bl	80001d0 <__aeabi_dsub>
 80021f4:	a3a4      	add	r3, pc, #656	; (adr r3, 8002488 <__ieee754_rem_pio2+0x2f8>)
 80021f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fa:	e016      	b.n	800222a <__ieee754_rem_pio2+0x9a>
 80021fc:	a3a4      	add	r3, pc, #656	; (adr r3, 8002490 <__ieee754_rem_pio2+0x300>)
 80021fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002202:	f7fd ffe5 	bl	80001d0 <__aeabi_dsub>
 8002206:	a3a4      	add	r3, pc, #656	; (adr r3, 8002498 <__ieee754_rem_pio2+0x308>)
 8002208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220c:	4604      	mov	r4, r0
 800220e:	460d      	mov	r5, r1
 8002210:	f7fd ffde 	bl	80001d0 <__aeabi_dsub>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	e9ca 2300 	strd	r2, r3, [sl]
 800221c:	4620      	mov	r0, r4
 800221e:	4629      	mov	r1, r5
 8002220:	f7fd ffd6 	bl	80001d0 <__aeabi_dsub>
 8002224:	a39c      	add	r3, pc, #624	; (adr r3, 8002498 <__ieee754_rem_pio2+0x308>)
 8002226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222a:	f7fd ffd1 	bl	80001d0 <__aeabi_dsub>
 800222e:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002232:	2001      	movs	r0, #1
 8002234:	e1a2      	b.n	800257c <__ieee754_rem_pio2+0x3ec>
 8002236:	f7fd ffcd 	bl	80001d4 <__adddf3>
 800223a:	45b0      	cmp	r8, r6
 800223c:	4604      	mov	r4, r0
 800223e:	460d      	mov	r5, r1
 8002240:	d010      	beq.n	8002264 <__ieee754_rem_pio2+0xd4>
 8002242:	a391      	add	r3, pc, #580	; (adr r3, 8002488 <__ieee754_rem_pio2+0x2f8>)
 8002244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002248:	f7fd ffc4 	bl	80001d4 <__adddf3>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	e9ca 2300 	strd	r2, r3, [sl]
 8002254:	4620      	mov	r0, r4
 8002256:	4629      	mov	r1, r5
 8002258:	f7fd ffba 	bl	80001d0 <__aeabi_dsub>
 800225c:	a38a      	add	r3, pc, #552	; (adr r3, 8002488 <__ieee754_rem_pio2+0x2f8>)
 800225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002262:	e016      	b.n	8002292 <__ieee754_rem_pio2+0x102>
 8002264:	a38a      	add	r3, pc, #552	; (adr r3, 8002490 <__ieee754_rem_pio2+0x300>)
 8002266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226a:	f7fd ffb3 	bl	80001d4 <__adddf3>
 800226e:	a38a      	add	r3, pc, #552	; (adr r3, 8002498 <__ieee754_rem_pio2+0x308>)
 8002270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002274:	4604      	mov	r4, r0
 8002276:	460d      	mov	r5, r1
 8002278:	f7fd ffac 	bl	80001d4 <__adddf3>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	e9ca 2300 	strd	r2, r3, [sl]
 8002284:	4620      	mov	r0, r4
 8002286:	4629      	mov	r1, r5
 8002288:	f7fd ffa2 	bl	80001d0 <__aeabi_dsub>
 800228c:	a382      	add	r3, pc, #520	; (adr r3, 8002498 <__ieee754_rem_pio2+0x308>)
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	f7fd ff9f 	bl	80001d4 <__adddf3>
 8002296:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800229a:	f04f 30ff 	mov.w	r0, #4294967295
 800229e:	e16d      	b.n	800257c <__ieee754_rem_pio2+0x3ec>
 80022a0:	4b88      	ldr	r3, [pc, #544]	; (80024c4 <__ieee754_rem_pio2+0x334>)
 80022a2:	4598      	cmp	r8, r3
 80022a4:	f300 80da 	bgt.w	800245c <__ieee754_rem_pio2+0x2cc>
 80022a8:	f000 fe64 	bl	8002f74 <fabs>
 80022ac:	ec55 4b10 	vmov	r4, r5, d0
 80022b0:	ee10 0a10 	vmov	r0, s0
 80022b4:	a37a      	add	r3, pc, #488	; (adr r3, 80024a0 <__ieee754_rem_pio2+0x310>)
 80022b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ba:	4629      	mov	r1, r5
 80022bc:	f7fe f93c 	bl	8000538 <__aeabi_dmul>
 80022c0:	2200      	movs	r2, #0
 80022c2:	4b81      	ldr	r3, [pc, #516]	; (80024c8 <__ieee754_rem_pio2+0x338>)
 80022c4:	f7fd ff86 	bl	80001d4 <__adddf3>
 80022c8:	f7fe fbd0 	bl	8000a6c <__aeabi_d2iz>
 80022cc:	4681      	mov	r9, r0
 80022ce:	f7fe f8cd 	bl	800046c <__aeabi_i2d>
 80022d2:	a36b      	add	r3, pc, #428	; (adr r3, 8002480 <__ieee754_rem_pio2+0x2f0>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80022dc:	f7fe f92c 	bl	8000538 <__aeabi_dmul>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4620      	mov	r0, r4
 80022e6:	4629      	mov	r1, r5
 80022e8:	f7fd ff72 	bl	80001d0 <__aeabi_dsub>
 80022ec:	a366      	add	r3, pc, #408	; (adr r3, 8002488 <__ieee754_rem_pio2+0x2f8>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	4604      	mov	r4, r0
 80022f4:	460d      	mov	r5, r1
 80022f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80022fa:	f7fe f91d 	bl	8000538 <__aeabi_dmul>
 80022fe:	f1b9 0f1f 	cmp.w	r9, #31
 8002302:	4606      	mov	r6, r0
 8002304:	460f      	mov	r7, r1
 8002306:	dc06      	bgt.n	8002316 <__ieee754_rem_pio2+0x186>
 8002308:	f109 32ff 	add.w	r2, r9, #4294967295
 800230c:	4b6f      	ldr	r3, [pc, #444]	; (80024cc <__ieee754_rem_pio2+0x33c>)
 800230e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002312:	4598      	cmp	r8, r3
 8002314:	d172      	bne.n	80023fc <__ieee754_rem_pio2+0x26c>
 8002316:	463b      	mov	r3, r7
 8002318:	4632      	mov	r2, r6
 800231a:	4620      	mov	r0, r4
 800231c:	4629      	mov	r1, r5
 800231e:	f7fd ff57 	bl	80001d0 <__aeabi_dsub>
 8002322:	ea4f 5828 	mov.w	r8, r8, asr #20
 8002326:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800232a:	ebc3 0308 	rsb	r3, r3, r8
 800232e:	2b10      	cmp	r3, #16
 8002330:	e9ca 0100 	strd	r0, r1, [sl]
 8002334:	dd6d      	ble.n	8002412 <__ieee754_rem_pio2+0x282>
 8002336:	a356      	add	r3, pc, #344	; (adr r3, 8002490 <__ieee754_rem_pio2+0x300>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002340:	f7fe f8fa 	bl	8000538 <__aeabi_dmul>
 8002344:	4606      	mov	r6, r0
 8002346:	460f      	mov	r7, r1
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fd ff3e 	bl	80001d0 <__aeabi_dsub>
 8002354:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4620      	mov	r0, r4
 800235e:	4629      	mov	r1, r5
 8002360:	f7fd ff36 	bl	80001d0 <__aeabi_dsub>
 8002364:	4632      	mov	r2, r6
 8002366:	463b      	mov	r3, r7
 8002368:	f7fd ff32 	bl	80001d0 <__aeabi_dsub>
 800236c:	a34a      	add	r3, pc, #296	; (adr r3, 8002498 <__ieee754_rem_pio2+0x308>)
 800236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002372:	4604      	mov	r4, r0
 8002374:	460d      	mov	r5, r1
 8002376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800237a:	f7fe f8dd 	bl	8000538 <__aeabi_dmul>
 800237e:	4622      	mov	r2, r4
 8002380:	462b      	mov	r3, r5
 8002382:	f7fd ff25 	bl	80001d0 <__aeabi_dsub>
 8002386:	460b      	mov	r3, r1
 8002388:	4602      	mov	r2, r0
 800238a:	4606      	mov	r6, r0
 800238c:	460f      	mov	r7, r1
 800238e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002392:	f7fd ff1d 	bl	80001d0 <__aeabi_dsub>
 8002396:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800239a:	ebc3 0808 	rsb	r8, r3, r8
 800239e:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
 80023a2:	e9ca 0100 	strd	r0, r1, [sl]
 80023a6:	dd32      	ble.n	800240e <__ieee754_rem_pio2+0x27e>
 80023a8:	a33f      	add	r3, pc, #252	; (adr r3, 80024a8 <__ieee754_rem_pio2+0x318>)
 80023aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80023b2:	f7fe f8c1 	bl	8000538 <__aeabi_dmul>
 80023b6:	4606      	mov	r6, r0
 80023b8:	460f      	mov	r7, r1
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80023c2:	f7fd ff05 	bl	80001d0 <__aeabi_dsub>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4604      	mov	r4, r0
 80023cc:	460d      	mov	r5, r1
 80023ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80023d2:	f7fd fefd 	bl	80001d0 <__aeabi_dsub>
 80023d6:	4632      	mov	r2, r6
 80023d8:	463b      	mov	r3, r7
 80023da:	f7fd fef9 	bl	80001d0 <__aeabi_dsub>
 80023de:	a334      	add	r3, pc, #208	; (adr r3, 80024b0 <__ieee754_rem_pio2+0x320>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	4606      	mov	r6, r0
 80023e6:	460f      	mov	r7, r1
 80023e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80023ec:	f7fe f8a4 	bl	8000538 <__aeabi_dmul>
 80023f0:	4632      	mov	r2, r6
 80023f2:	463b      	mov	r3, r7
 80023f4:	f7fd feec 	bl	80001d0 <__aeabi_dsub>
 80023f8:	4606      	mov	r6, r0
 80023fa:	460f      	mov	r7, r1
 80023fc:	4632      	mov	r2, r6
 80023fe:	463b      	mov	r3, r7
 8002400:	4620      	mov	r0, r4
 8002402:	4629      	mov	r1, r5
 8002404:	f7fd fee4 	bl	80001d0 <__aeabi_dsub>
 8002408:	e9ca 0100 	strd	r0, r1, [sl]
 800240c:	e001      	b.n	8002412 <__ieee754_rem_pio2+0x282>
 800240e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8002412:	ed9a 7b00 	vldr	d7, [sl]
 8002416:	4620      	mov	r0, r4
 8002418:	ec53 2b17 	vmov	r2, r3, d7
 800241c:	4629      	mov	r1, r5
 800241e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002422:	f7fd fed5 	bl	80001d0 <__aeabi_dsub>
 8002426:	4632      	mov	r2, r6
 8002428:	463b      	mov	r3, r7
 800242a:	f7fd fed1 	bl	80001d0 <__aeabi_dsub>
 800242e:	f1bb 0f00 	cmp.w	fp, #0
 8002432:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002436:	f280 80a0 	bge.w	800257a <__ieee754_rem_pio2+0x3ea>
 800243a:	9b02      	ldr	r3, [sp, #8]
 800243c:	f8ca 3000 	str.w	r3, [sl]
 8002440:	9b03      	ldr	r3, [sp, #12]
 8002442:	f8ca 0008 	str.w	r0, [sl, #8]
 8002446:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800244a:	f8ca 3004 	str.w	r3, [sl, #4]
 800244e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002452:	f8ca 300c 	str.w	r3, [sl, #12]
 8002456:	f1c9 0000 	rsb	r0, r9, #0
 800245a:	e08f      	b.n	800257c <__ieee754_rem_pio2+0x3ec>
 800245c:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <__ieee754_rem_pio2+0x340>)
 800245e:	4598      	cmp	r8, r3
 8002460:	dd38      	ble.n	80024d4 <__ieee754_rem_pio2+0x344>
 8002462:	ee10 2a10 	vmov	r2, s0
 8002466:	462b      	mov	r3, r5
 8002468:	4620      	mov	r0, r4
 800246a:	4629      	mov	r1, r5
 800246c:	f7fd feb0 	bl	80001d0 <__aeabi_dsub>
 8002470:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002474:	e9ca 0100 	strd	r0, r1, [sl]
 8002478:	2000      	movs	r0, #0
 800247a:	e07f      	b.n	800257c <__ieee754_rem_pio2+0x3ec>
 800247c:	f3af 8000 	nop.w
 8002480:	54400000 	.word	0x54400000
 8002484:	3ff921fb 	.word	0x3ff921fb
 8002488:	1a626331 	.word	0x1a626331
 800248c:	3dd0b461 	.word	0x3dd0b461
 8002490:	1a600000 	.word	0x1a600000
 8002494:	3dd0b461 	.word	0x3dd0b461
 8002498:	2e037073 	.word	0x2e037073
 800249c:	3ba3198a 	.word	0x3ba3198a
 80024a0:	6dc9c883 	.word	0x6dc9c883
 80024a4:	3fe45f30 	.word	0x3fe45f30
 80024a8:	2e000000 	.word	0x2e000000
 80024ac:	3ba3198a 	.word	0x3ba3198a
 80024b0:	252049c1 	.word	0x252049c1
 80024b4:	397b839a 	.word	0x397b839a
 80024b8:	3fe921fb 	.word	0x3fe921fb
 80024bc:	4002d97b 	.word	0x4002d97b
 80024c0:	3ff921fb 	.word	0x3ff921fb
 80024c4:	413921fb 	.word	0x413921fb
 80024c8:	3fe00000 	.word	0x3fe00000
 80024cc:	080031c0 	.word	0x080031c0
 80024d0:	7fefffff 	.word	0x7fefffff
 80024d4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80024d8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80024dc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80024e0:	4620      	mov	r0, r4
 80024e2:	460d      	mov	r5, r1
 80024e4:	f7fe fac2 	bl	8000a6c <__aeabi_d2iz>
 80024e8:	f7fd ffc0 	bl	800046c <__aeabi_i2d>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4620      	mov	r0, r4
 80024f2:	4629      	mov	r1, r5
 80024f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80024f8:	f7fd fe6a 	bl	80001d0 <__aeabi_dsub>
 80024fc:	2200      	movs	r2, #0
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <__ieee754_rem_pio2+0x3f4>)
 8002500:	f7fe f81a 	bl	8000538 <__aeabi_dmul>
 8002504:	460d      	mov	r5, r1
 8002506:	4604      	mov	r4, r0
 8002508:	f7fe fab0 	bl	8000a6c <__aeabi_d2iz>
 800250c:	f7fd ffae 	bl	800046c <__aeabi_i2d>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4620      	mov	r0, r4
 8002516:	4629      	mov	r1, r5
 8002518:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800251c:	f7fd fe58 	bl	80001d0 <__aeabi_dsub>
 8002520:	2200      	movs	r2, #0
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <__ieee754_rem_pio2+0x3f4>)
 8002524:	f7fe f808 	bl	8000538 <__aeabi_dmul>
 8002528:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800252c:	ad0c      	add	r5, sp, #48	; 0x30
 800252e:	2403      	movs	r4, #3
 8002530:	2200      	movs	r2, #0
 8002532:	2300      	movs	r3, #0
 8002534:	e975 0102 	ldrd	r0, r1, [r5, #-8]!
 8002538:	1e67      	subs	r7, r4, #1
 800253a:	f7fe fa65 	bl	8000a08 <__aeabi_dcmpeq>
 800253e:	b108      	cbz	r0, 8002544 <__ieee754_rem_pio2+0x3b4>
 8002540:	463c      	mov	r4, r7
 8002542:	e7f5      	b.n	8002530 <__ieee754_rem_pio2+0x3a0>
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <__ieee754_rem_pio2+0x3f8>)
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	2302      	movs	r3, #2
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	4632      	mov	r2, r6
 800254e:	4623      	mov	r3, r4
 8002550:	4651      	mov	r1, sl
 8002552:	a806      	add	r0, sp, #24
 8002554:	f000 f904 	bl	8002760 <__kernel_rem_pio2>
 8002558:	f1bb 0f00 	cmp.w	fp, #0
 800255c:	da0e      	bge.n	800257c <__ieee754_rem_pio2+0x3ec>
 800255e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002562:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002566:	f8ca 3004 	str.w	r3, [sl, #4]
 800256a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800256e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002572:	f8ca 300c 	str.w	r3, [sl, #12]
 8002576:	4240      	negs	r0, r0
 8002578:	e000      	b.n	800257c <__ieee754_rem_pio2+0x3ec>
 800257a:	4648      	mov	r0, r9
 800257c:	b00d      	add	sp, #52	; 0x34
 800257e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002582:	bf00      	nop
 8002584:	41700000 	.word	0x41700000
 8002588:	08003240 	.word	0x08003240
 800258c:	00000000 	.word	0x00000000

08002590 <__kernel_cos>:
 8002590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002594:	ec59 8b10 	vmov	r8, r9, d0
 8002598:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 800259c:	b085      	sub	sp, #20
 800259e:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80025a2:	ed8d 1b00 	vstr	d1, [sp]
 80025a6:	da07      	bge.n	80025b8 <__kernel_cos+0x28>
 80025a8:	ee10 0a10 	vmov	r0, s0
 80025ac:	4649      	mov	r1, r9
 80025ae:	f7fe fa5d 	bl	8000a6c <__aeabi_d2iz>
 80025b2:	2800      	cmp	r0, #0
 80025b4:	f000 80a6 	beq.w	8002704 <__kernel_cos+0x174>
 80025b8:	4642      	mov	r2, r8
 80025ba:	464b      	mov	r3, r9
 80025bc:	4640      	mov	r0, r8
 80025be:	4649      	mov	r1, r9
 80025c0:	f7fd ffba 	bl	8000538 <__aeabi_dmul>
 80025c4:	a359      	add	r3, pc, #356	; (adr r3, 800272c <__kernel_cos+0x19c>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	4604      	mov	r4, r0
 80025cc:	460d      	mov	r5, r1
 80025ce:	f7fd ffb3 	bl	8000538 <__aeabi_dmul>
 80025d2:	a358      	add	r3, pc, #352	; (adr r3, 8002734 <__kernel_cos+0x1a4>)
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	f7fd fdfc 	bl	80001d4 <__adddf3>
 80025dc:	4622      	mov	r2, r4
 80025de:	462b      	mov	r3, r5
 80025e0:	f7fd ffaa 	bl	8000538 <__aeabi_dmul>
 80025e4:	a355      	add	r3, pc, #340	; (adr r3, 800273c <__kernel_cos+0x1ac>)
 80025e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ea:	f7fd fdf1 	bl	80001d0 <__aeabi_dsub>
 80025ee:	4622      	mov	r2, r4
 80025f0:	462b      	mov	r3, r5
 80025f2:	f7fd ffa1 	bl	8000538 <__aeabi_dmul>
 80025f6:	a353      	add	r3, pc, #332	; (adr r3, 8002744 <__kernel_cos+0x1b4>)
 80025f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fc:	f7fd fdea 	bl	80001d4 <__adddf3>
 8002600:	4622      	mov	r2, r4
 8002602:	462b      	mov	r3, r5
 8002604:	f7fd ff98 	bl	8000538 <__aeabi_dmul>
 8002608:	a350      	add	r3, pc, #320	; (adr r3, 800274c <__kernel_cos+0x1bc>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f7fd fddf 	bl	80001d0 <__aeabi_dsub>
 8002612:	4622      	mov	r2, r4
 8002614:	462b      	mov	r3, r5
 8002616:	f7fd ff8f 	bl	8000538 <__aeabi_dmul>
 800261a:	a34e      	add	r3, pc, #312	; (adr r3, 8002754 <__kernel_cos+0x1c4>)
 800261c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002620:	f7fd fdd8 	bl	80001d4 <__adddf3>
 8002624:	462b      	mov	r3, r5
 8002626:	4622      	mov	r2, r4
 8002628:	f7fd ff86 	bl	8000538 <__aeabi_dmul>
 800262c:	4b3a      	ldr	r3, [pc, #232]	; (8002718 <__kernel_cos+0x188>)
 800262e:	429f      	cmp	r7, r3
 8002630:	4682      	mov	sl, r0
 8002632:	468b      	mov	fp, r1
 8002634:	dc26      	bgt.n	8002684 <__kernel_cos+0xf4>
 8002636:	2200      	movs	r2, #0
 8002638:	4b38      	ldr	r3, [pc, #224]	; (800271c <__kernel_cos+0x18c>)
 800263a:	4620      	mov	r0, r4
 800263c:	4629      	mov	r1, r5
 800263e:	f7fd ff7b 	bl	8000538 <__aeabi_dmul>
 8002642:	4652      	mov	r2, sl
 8002644:	4606      	mov	r6, r0
 8002646:	460f      	mov	r7, r1
 8002648:	465b      	mov	r3, fp
 800264a:	4620      	mov	r0, r4
 800264c:	4629      	mov	r1, r5
 800264e:	f7fd ff73 	bl	8000538 <__aeabi_dmul>
 8002652:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002656:	4604      	mov	r4, r0
 8002658:	460d      	mov	r5, r1
 800265a:	4640      	mov	r0, r8
 800265c:	4649      	mov	r1, r9
 800265e:	f7fd ff6b 	bl	8000538 <__aeabi_dmul>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4620      	mov	r0, r4
 8002668:	4629      	mov	r1, r5
 800266a:	f7fd fdb1 	bl	80001d0 <__aeabi_dsub>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4630      	mov	r0, r6
 8002674:	4639      	mov	r1, r7
 8002676:	f7fd fdab 	bl	80001d0 <__aeabi_dsub>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	2000      	movs	r0, #0
 8002680:	4927      	ldr	r1, [pc, #156]	; (8002720 <__kernel_cos+0x190>)
 8002682:	e03c      	b.n	80026fe <__kernel_cos+0x16e>
 8002684:	4b27      	ldr	r3, [pc, #156]	; (8002724 <__kernel_cos+0x194>)
 8002686:	4926      	ldr	r1, [pc, #152]	; (8002720 <__kernel_cos+0x190>)
 8002688:	429f      	cmp	r7, r3
 800268a:	bfd7      	itett	le
 800268c:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8002690:	4f25      	ldrgt	r7, [pc, #148]	; (8002728 <__kernel_cos+0x198>)
 8002692:	2200      	movle	r2, #0
 8002694:	4616      	movle	r6, r2
 8002696:	bfd4      	ite	le
 8002698:	461f      	movle	r7, r3
 800269a:	2600      	movgt	r6, #0
 800269c:	4632      	mov	r2, r6
 800269e:	463b      	mov	r3, r7
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7fd fd95 	bl	80001d0 <__aeabi_dsub>
 80026a6:	2200      	movs	r2, #0
 80026a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <__kernel_cos+0x18c>)
 80026ae:	4620      	mov	r0, r4
 80026b0:	4629      	mov	r1, r5
 80026b2:	f7fd ff41 	bl	8000538 <__aeabi_dmul>
 80026b6:	4632      	mov	r2, r6
 80026b8:	463b      	mov	r3, r7
 80026ba:	f7fd fd89 	bl	80001d0 <__aeabi_dsub>
 80026be:	4652      	mov	r2, sl
 80026c0:	4606      	mov	r6, r0
 80026c2:	460f      	mov	r7, r1
 80026c4:	465b      	mov	r3, fp
 80026c6:	4620      	mov	r0, r4
 80026c8:	4629      	mov	r1, r5
 80026ca:	f7fd ff35 	bl	8000538 <__aeabi_dmul>
 80026ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80026d2:	4604      	mov	r4, r0
 80026d4:	460d      	mov	r5, r1
 80026d6:	4640      	mov	r0, r8
 80026d8:	4649      	mov	r1, r9
 80026da:	f7fd ff2d 	bl	8000538 <__aeabi_dmul>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4620      	mov	r0, r4
 80026e4:	4629      	mov	r1, r5
 80026e6:	f7fd fd73 	bl	80001d0 <__aeabi_dsub>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4630      	mov	r0, r6
 80026f0:	4639      	mov	r1, r7
 80026f2:	f7fd fd6d 	bl	80001d0 <__aeabi_dsub>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80026fe:	f7fd fd67 	bl	80001d0 <__aeabi_dsub>
 8002702:	e001      	b.n	8002708 <__kernel_cos+0x178>
 8002704:	4906      	ldr	r1, [pc, #24]	; (8002720 <__kernel_cos+0x190>)
 8002706:	2000      	movs	r0, #0
 8002708:	ec41 0b10 	vmov	d0, r0, r1
 800270c:	b005      	add	sp, #20
 800270e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002712:	bf00      	nop
 8002714:	f3af 8000 	nop.w
 8002718:	3fd33332 	.word	0x3fd33332
 800271c:	3fe00000 	.word	0x3fe00000
 8002720:	3ff00000 	.word	0x3ff00000
 8002724:	3fe90000 	.word	0x3fe90000
 8002728:	3fd20000 	.word	0x3fd20000
 800272c:	be8838d4 	.word	0xbe8838d4
 8002730:	bda8fae9 	.word	0xbda8fae9
 8002734:	bdb4b1c4 	.word	0xbdb4b1c4
 8002738:	3e21ee9e 	.word	0x3e21ee9e
 800273c:	809c52ad 	.word	0x809c52ad
 8002740:	3e927e4f 	.word	0x3e927e4f
 8002744:	19cb1590 	.word	0x19cb1590
 8002748:	3efa01a0 	.word	0x3efa01a0
 800274c:	16c15177 	.word	0x16c15177
 8002750:	3f56c16c 	.word	0x3f56c16c
 8002754:	5555554c 	.word	0x5555554c
 8002758:	3fa55555 	.word	0x3fa55555
 800275c:	00000000 	.word	0x00000000

08002760 <__kernel_rem_pio2>:
 8002760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002764:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8002768:	2418      	movs	r4, #24
 800276a:	9306      	str	r3, [sp, #24]
 800276c:	9101      	str	r1, [sp, #4]
 800276e:	4bba      	ldr	r3, [pc, #744]	; (8002a58 <__kernel_rem_pio2+0x2f8>)
 8002770:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8002772:	9009      	str	r0, [sp, #36]	; 0x24
 8002774:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002778:	9302      	str	r3, [sp, #8]
 800277a:	9b06      	ldr	r3, [sp, #24]
 800277c:	3b01      	subs	r3, #1
 800277e:	9305      	str	r3, [sp, #20]
 8002780:	1ed3      	subs	r3, r2, #3
 8002782:	fb93 f4f4 	sdiv	r4, r3, r4
 8002786:	f06f 0317 	mvn.w	r3, #23
 800278a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800278e:	fb04 3303 	mla	r3, r4, r3, r3
 8002792:	eb03 0802 	add.w	r8, r3, r2
 8002796:	9b02      	ldr	r3, [sp, #8]
 8002798:	9a05      	ldr	r2, [sp, #20]
 800279a:	eb03 0a02 	add.w	sl, r3, r2
 800279e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80027a0:	1aa7      	subs	r7, r4, r2
 80027a2:	ae20      	add	r6, sp, #128	; 0x80
 80027a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80027a8:	2500      	movs	r5, #0
 80027aa:	4555      	cmp	r5, sl
 80027ac:	dc0c      	bgt.n	80027c8 <__kernel_rem_pio2+0x68>
 80027ae:	42ef      	cmn	r7, r5
 80027b0:	d404      	bmi.n	80027bc <__kernel_rem_pio2+0x5c>
 80027b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80027b6:	f7fd fe59 	bl	800046c <__aeabi_i2d>
 80027ba:	e001      	b.n	80027c0 <__kernel_rem_pio2+0x60>
 80027bc:	2000      	movs	r0, #0
 80027be:	2100      	movs	r1, #0
 80027c0:	e8e6 0102 	strd	r0, r1, [r6], #8
 80027c4:	3501      	adds	r5, #1
 80027c6:	e7f0      	b.n	80027aa <__kernel_rem_pio2+0x4a>
 80027c8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80027cc:	2600      	movs	r6, #0
 80027ce:	9b02      	ldr	r3, [sp, #8]
 80027d0:	429e      	cmp	r6, r3
 80027d2:	dc27      	bgt.n	8002824 <__kernel_rem_pio2+0xc4>
 80027d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027d6:	9304      	str	r3, [sp, #16]
 80027d8:	9b06      	ldr	r3, [sp, #24]
 80027da:	199d      	adds	r5, r3, r6
 80027dc:	ab20      	add	r3, sp, #128	; 0x80
 80027de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80027e2:	9308      	str	r3, [sp, #32]
 80027e4:	f04f 0900 	mov.w	r9, #0
 80027e8:	f04f 0a00 	mov.w	sl, #0
 80027ec:	2700      	movs	r7, #0
 80027ee:	9b05      	ldr	r3, [sp, #20]
 80027f0:	429f      	cmp	r7, r3
 80027f2:	dc13      	bgt.n	800281c <__kernel_rem_pio2+0xbc>
 80027f4:	9908      	ldr	r1, [sp, #32]
 80027f6:	9d04      	ldr	r5, [sp, #16]
 80027f8:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80027fc:	9108      	str	r1, [sp, #32]
 80027fe:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8002802:	9504      	str	r5, [sp, #16]
 8002804:	f7fd fe98 	bl	8000538 <__aeabi_dmul>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4648      	mov	r0, r9
 800280e:	4651      	mov	r1, sl
 8002810:	f7fd fce0 	bl	80001d4 <__adddf3>
 8002814:	3701      	adds	r7, #1
 8002816:	4681      	mov	r9, r0
 8002818:	468a      	mov	sl, r1
 800281a:	e7e8      	b.n	80027ee <__kernel_rem_pio2+0x8e>
 800281c:	e8ab 0600 	stmia.w	fp!, {r9, sl}
 8002820:	3601      	adds	r6, #1
 8002822:	e7d4      	b.n	80027ce <__kernel_rem_pio2+0x6e>
 8002824:	9b02      	ldr	r3, [sp, #8]
 8002826:	f8dd b008 	ldr.w	fp, [sp, #8]
 800282a:	aa0c      	add	r2, sp, #48	; 0x30
 800282c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002830:	930a      	str	r3, [sp, #40]	; 0x28
 8002832:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8002834:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002838:	930b      	str	r3, [sp, #44]	; 0x2c
 800283a:	ab98      	add	r3, sp, #608	; 0x260
 800283c:	f10b 5a00 	add.w	sl, fp, #536870912	; 0x20000000
 8002840:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002844:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002848:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800284c:	aa98      	add	r2, sp, #608	; 0x260
 800284e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8002852:	eb02 0903 	add.w	r9, r2, r3
 8002856:	9308      	str	r3, [sp, #32]
 8002858:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 800285c:	f04f 0a00 	mov.w	sl, #0
 8002860:	ebca 030b 	rsb	r3, sl, fp
 8002864:	2b00      	cmp	r3, #0
 8002866:	dd25      	ble.n	80028b4 <__kernel_rem_pio2+0x154>
 8002868:	2200      	movs	r2, #0
 800286a:	4b7c      	ldr	r3, [pc, #496]	; (8002a5c <__kernel_rem_pio2+0x2fc>)
 800286c:	4630      	mov	r0, r6
 800286e:	4639      	mov	r1, r7
 8002870:	f7fd fe62 	bl	8000538 <__aeabi_dmul>
 8002874:	f7fe f8fa 	bl	8000a6c <__aeabi_d2iz>
 8002878:	f7fd fdf8 	bl	800046c <__aeabi_i2d>
 800287c:	2200      	movs	r2, #0
 800287e:	4b78      	ldr	r3, [pc, #480]	; (8002a60 <__kernel_rem_pio2+0x300>)
 8002880:	4604      	mov	r4, r0
 8002882:	460d      	mov	r5, r1
 8002884:	f7fd fe58 	bl	8000538 <__aeabi_dmul>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4630      	mov	r0, r6
 800288e:	4639      	mov	r1, r7
 8002890:	f7fd fc9e 	bl	80001d0 <__aeabi_dsub>
 8002894:	f7fe f8ea 	bl	8000a6c <__aeabi_d2iz>
 8002898:	ab0c      	add	r3, sp, #48	; 0x30
 800289a:	4629      	mov	r1, r5
 800289c:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 80028a0:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 80028a4:	4620      	mov	r0, r4
 80028a6:	f7fd fc95 	bl	80001d4 <__adddf3>
 80028aa:	f10a 0a01 	add.w	sl, sl, #1
 80028ae:	4606      	mov	r6, r0
 80028b0:	460f      	mov	r7, r1
 80028b2:	e7d5      	b.n	8002860 <__kernel_rem_pio2+0x100>
 80028b4:	ec47 6b10 	vmov	d0, r6, r7
 80028b8:	4640      	mov	r0, r8
 80028ba:	f000 fbe9 	bl	8003090 <scalbn>
 80028be:	ec55 4b10 	vmov	r4, r5, d0
 80028c2:	2200      	movs	r2, #0
 80028c4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80028c8:	ee10 0a10 	vmov	r0, s0
 80028cc:	4629      	mov	r1, r5
 80028ce:	f7fd fe33 	bl	8000538 <__aeabi_dmul>
 80028d2:	ec41 0b10 	vmov	d0, r0, r1
 80028d6:	f000 fb57 	bl	8002f88 <floor>
 80028da:	2200      	movs	r2, #0
 80028dc:	ec51 0b10 	vmov	r0, r1, d0
 80028e0:	4b60      	ldr	r3, [pc, #384]	; (8002a64 <__kernel_rem_pio2+0x304>)
 80028e2:	f7fd fe29 	bl	8000538 <__aeabi_dmul>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4620      	mov	r0, r4
 80028ec:	4629      	mov	r1, r5
 80028ee:	f7fd fc6f 	bl	80001d0 <__aeabi_dsub>
 80028f2:	460d      	mov	r5, r1
 80028f4:	4604      	mov	r4, r0
 80028f6:	f7fe f8b9 	bl	8000a6c <__aeabi_d2iz>
 80028fa:	9004      	str	r0, [sp, #16]
 80028fc:	f7fd fdb6 	bl	800046c <__aeabi_i2d>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4620      	mov	r0, r4
 8002906:	4629      	mov	r1, r5
 8002908:	f7fd fc62 	bl	80001d0 <__aeabi_dsub>
 800290c:	f1b8 0f00 	cmp.w	r8, #0
 8002910:	4606      	mov	r6, r0
 8002912:	460f      	mov	r7, r1
 8002914:	dd15      	ble.n	8002942 <__kernel_rem_pio2+0x1e2>
 8002916:	f10b 31ff 	add.w	r1, fp, #4294967295
 800291a:	ab0c      	add	r3, sp, #48	; 0x30
 800291c:	f1c8 0018 	rsb	r0, r8, #24
 8002920:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8002924:	9c04      	ldr	r4, [sp, #16]
 8002926:	fa42 f300 	asr.w	r3, r2, r0
 800292a:	441c      	add	r4, r3
 800292c:	4083      	lsls	r3, r0
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	aa0c      	add	r2, sp, #48	; 0x30
 8002932:	f1c8 0017 	rsb	r0, r8, #23
 8002936:	9404      	str	r4, [sp, #16]
 8002938:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800293c:	fa43 fa00 	asr.w	sl, r3, r0
 8002940:	e00f      	b.n	8002962 <__kernel_rem_pio2+0x202>
 8002942:	d107      	bne.n	8002954 <__kernel_rem_pio2+0x1f4>
 8002944:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002948:	aa0c      	add	r2, sp, #48	; 0x30
 800294a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800294e:	ea4f 5ae0 	mov.w	sl, r0, asr #23
 8002952:	e006      	b.n	8002962 <__kernel_rem_pio2+0x202>
 8002954:	2200      	movs	r2, #0
 8002956:	4b44      	ldr	r3, [pc, #272]	; (8002a68 <__kernel_rem_pio2+0x308>)
 8002958:	f7fe f874 	bl	8000a44 <__aeabi_dcmpge>
 800295c:	b928      	cbnz	r0, 800296a <__kernel_rem_pio2+0x20a>
 800295e:	4682      	mov	sl, r0
 8002960:	e052      	b.n	8002a08 <__kernel_rem_pio2+0x2a8>
 8002962:	f1ba 0f00 	cmp.w	sl, #0
 8002966:	dc02      	bgt.n	800296e <__kernel_rem_pio2+0x20e>
 8002968:	e04e      	b.n	8002a08 <__kernel_rem_pio2+0x2a8>
 800296a:	f04f 0a02 	mov.w	sl, #2
 800296e:	9b04      	ldr	r3, [sp, #16]
 8002970:	2200      	movs	r2, #0
 8002972:	3301      	adds	r3, #1
 8002974:	9304      	str	r3, [sp, #16]
 8002976:	4614      	mov	r4, r2
 8002978:	4593      	cmp	fp, r2
 800297a:	dd11      	ble.n	80029a0 <__kernel_rem_pio2+0x240>
 800297c:	ab0c      	add	r3, sp, #48	; 0x30
 800297e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002982:	b91c      	cbnz	r4, 800298c <__kernel_rem_pio2+0x22c>
 8002984:	b153      	cbz	r3, 800299c <__kernel_rem_pio2+0x23c>
 8002986:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800298a:	e003      	b.n	8002994 <__kernel_rem_pio2+0x234>
 800298c:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 8002990:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002994:	a90c      	add	r1, sp, #48	; 0x30
 8002996:	2401      	movs	r4, #1
 8002998:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800299c:	3201      	adds	r2, #1
 800299e:	e7eb      	b.n	8002978 <__kernel_rem_pio2+0x218>
 80029a0:	f1b8 0f00 	cmp.w	r8, #0
 80029a4:	dd17      	ble.n	80029d6 <__kernel_rem_pio2+0x276>
 80029a6:	f1b8 0f01 	cmp.w	r8, #1
 80029aa:	d00a      	beq.n	80029c2 <__kernel_rem_pio2+0x262>
 80029ac:	f1b8 0f02 	cmp.w	r8, #2
 80029b0:	d111      	bne.n	80029d6 <__kernel_rem_pio2+0x276>
 80029b2:	f10b 32ff 	add.w	r2, fp, #4294967295
 80029b6:	ab0c      	add	r3, sp, #48	; 0x30
 80029b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80029c0:	e006      	b.n	80029d0 <__kernel_rem_pio2+0x270>
 80029c2:	f10b 32ff 	add.w	r2, fp, #4294967295
 80029c6:	ab0c      	add	r3, sp, #48	; 0x30
 80029c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80029d0:	a90c      	add	r1, sp, #48	; 0x30
 80029d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80029d6:	f1ba 0f02 	cmp.w	sl, #2
 80029da:	d115      	bne.n	8002a08 <__kernel_rem_pio2+0x2a8>
 80029dc:	4632      	mov	r2, r6
 80029de:	463b      	mov	r3, r7
 80029e0:	2000      	movs	r0, #0
 80029e2:	4922      	ldr	r1, [pc, #136]	; (8002a6c <__kernel_rem_pio2+0x30c>)
 80029e4:	f7fd fbf4 	bl	80001d0 <__aeabi_dsub>
 80029e8:	4606      	mov	r6, r0
 80029ea:	460f      	mov	r7, r1
 80029ec:	b164      	cbz	r4, 8002a08 <__kernel_rem_pio2+0x2a8>
 80029ee:	4640      	mov	r0, r8
 80029f0:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002a50 <__kernel_rem_pio2+0x2f0>
 80029f4:	f000 fb4c 	bl	8003090 <scalbn>
 80029f8:	4630      	mov	r0, r6
 80029fa:	4639      	mov	r1, r7
 80029fc:	ec53 2b10 	vmov	r2, r3, d0
 8002a00:	f7fd fbe6 	bl	80001d0 <__aeabi_dsub>
 8002a04:	4606      	mov	r6, r0
 8002a06:	460f      	mov	r7, r1
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	4630      	mov	r0, r6
 8002a0e:	4639      	mov	r1, r7
 8002a10:	f7fd fffa 	bl	8000a08 <__aeabi_dcmpeq>
 8002a14:	2800      	cmp	r0, #0
 8002a16:	d074      	beq.n	8002b02 <__kernel_rem_pio2+0x3a2>
 8002a18:	f10b 31ff 	add.w	r1, fp, #4294967295
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	2200      	movs	r2, #0
 8002a20:	9802      	ldr	r0, [sp, #8]
 8002a22:	4283      	cmp	r3, r0
 8002a24:	db05      	blt.n	8002a32 <__kernel_rem_pio2+0x2d2>
 8002a26:	a80c      	add	r0, sp, #48	; 0x30
 8002a28:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	e7f6      	b.n	8002a20 <__kernel_rem_pio2+0x2c0>
 8002a32:	2a00      	cmp	r2, #0
 8002a34:	d158      	bne.n	8002ae8 <__kernel_rem_pio2+0x388>
 8002a36:	2301      	movs	r3, #1
 8002a38:	f06f 0103 	mvn.w	r1, #3
 8002a3c:	fb01 f203 	mul.w	r2, r1, r3
 8002a40:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002a42:	5882      	ldr	r2, [r0, r2]
 8002a44:	b9a2      	cbnz	r2, 8002a70 <__kernel_rem_pio2+0x310>
 8002a46:	3301      	adds	r3, #1
 8002a48:	e7f8      	b.n	8002a3c <__kernel_rem_pio2+0x2dc>
 8002a4a:	bf00      	nop
 8002a4c:	f3af 8000 	nop.w
 8002a50:	00000000 	.word	0x00000000
 8002a54:	3ff00000 	.word	0x3ff00000
 8002a58:	08003348 	.word	0x08003348
 8002a5c:	3e700000 	.word	0x3e700000
 8002a60:	41700000 	.word	0x41700000
 8002a64:	40200000 	.word	0x40200000
 8002a68:	3fe00000 	.word	0x3fe00000
 8002a6c:	3ff00000 	.word	0x3ff00000
 8002a70:	9a08      	ldr	r2, [sp, #32]
 8002a72:	a998      	add	r1, sp, #608	; 0x260
 8002a74:	440a      	add	r2, r1
 8002a76:	3a98      	subs	r2, #152	; 0x98
 8002a78:	9204      	str	r2, [sp, #16]
 8002a7a:	9a06      	ldr	r2, [sp, #24]
 8002a7c:	445b      	add	r3, fp
 8002a7e:	eb02 050b 	add.w	r5, r2, fp
 8002a82:	aa20      	add	r2, sp, #128	; 0x80
 8002a84:	f10b 0601 	add.w	r6, fp, #1
 8002a88:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8002a8c:	9308      	str	r3, [sp, #32]
 8002a8e:	9b08      	ldr	r3, [sp, #32]
 8002a90:	429e      	cmp	r6, r3
 8002a92:	dc27      	bgt.n	8002ae4 <__kernel_rem_pio2+0x384>
 8002a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a96:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8002a9a:	f7fd fce7 	bl	800046c <__aeabi_i2d>
 8002a9e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8002aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aa4:	46a9      	mov	r9, r5
 8002aa6:	461c      	mov	r4, r3
 8002aa8:	2700      	movs	r7, #0
 8002aaa:	f04f 0a00 	mov.w	sl, #0
 8002aae:	f04f 0b00 	mov.w	fp, #0
 8002ab2:	9b05      	ldr	r3, [sp, #20]
 8002ab4:	429f      	cmp	r7, r3
 8002ab6:	dc0f      	bgt.n	8002ad8 <__kernel_rem_pio2+0x378>
 8002ab8:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 8002abc:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8002ac0:	f7fd fd3a 	bl	8000538 <__aeabi_dmul>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4650      	mov	r0, sl
 8002aca:	4659      	mov	r1, fp
 8002acc:	f7fd fb82 	bl	80001d4 <__adddf3>
 8002ad0:	3701      	adds	r7, #1
 8002ad2:	4682      	mov	sl, r0
 8002ad4:	468b      	mov	fp, r1
 8002ad6:	e7ec      	b.n	8002ab2 <__kernel_rem_pio2+0x352>
 8002ad8:	9b04      	ldr	r3, [sp, #16]
 8002ada:	e9e3 ab02 	strd	sl, fp, [r3, #8]!
 8002ade:	3601      	adds	r6, #1
 8002ae0:	9304      	str	r3, [sp, #16]
 8002ae2:	e7d4      	b.n	8002a8e <__kernel_rem_pio2+0x32e>
 8002ae4:	469b      	mov	fp, r3
 8002ae6:	e6a8      	b.n	800283a <__kernel_rem_pio2+0xda>
 8002ae8:	f1a8 0818 	sub.w	r8, r8, #24
 8002aec:	468b      	mov	fp, r1
 8002aee:	ab0c      	add	r3, sp, #48	; 0x30
 8002af0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d13c      	bne.n	8002b72 <__kernel_rem_pio2+0x412>
 8002af8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002afc:	f1a8 0818 	sub.w	r8, r8, #24
 8002b00:	e7f5      	b.n	8002aee <__kernel_rem_pio2+0x38e>
 8002b02:	f1c8 0000 	rsb	r0, r8, #0
 8002b06:	ec47 6b10 	vmov	d0, r6, r7
 8002b0a:	f000 fac1 	bl	8003090 <scalbn>
 8002b0e:	ec55 4b10 	vmov	r4, r5, d0
 8002b12:	2200      	movs	r2, #0
 8002b14:	4bb6      	ldr	r3, [pc, #728]	; (8002df0 <__kernel_rem_pio2+0x690>)
 8002b16:	ee10 0a10 	vmov	r0, s0
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	f7fd ff92 	bl	8000a44 <__aeabi_dcmpge>
 8002b20:	b300      	cbz	r0, 8002b64 <__kernel_rem_pio2+0x404>
 8002b22:	2200      	movs	r2, #0
 8002b24:	4bb3      	ldr	r3, [pc, #716]	; (8002df4 <__kernel_rem_pio2+0x694>)
 8002b26:	4620      	mov	r0, r4
 8002b28:	4629      	mov	r1, r5
 8002b2a:	f7fd fd05 	bl	8000538 <__aeabi_dmul>
 8002b2e:	f7fd ff9d 	bl	8000a6c <__aeabi_d2iz>
 8002b32:	4606      	mov	r6, r0
 8002b34:	f7fd fc9a 	bl	800046c <__aeabi_i2d>
 8002b38:	2200      	movs	r2, #0
 8002b3a:	4bad      	ldr	r3, [pc, #692]	; (8002df0 <__kernel_rem_pio2+0x690>)
 8002b3c:	f7fd fcfc 	bl	8000538 <__aeabi_dmul>
 8002b40:	460b      	mov	r3, r1
 8002b42:	4602      	mov	r2, r0
 8002b44:	4629      	mov	r1, r5
 8002b46:	4620      	mov	r0, r4
 8002b48:	f7fd fb42 	bl	80001d0 <__aeabi_dsub>
 8002b4c:	f7fd ff8e 	bl	8000a6c <__aeabi_d2iz>
 8002b50:	ab0c      	add	r3, sp, #48	; 0x30
 8002b52:	f108 0818 	add.w	r8, r8, #24
 8002b56:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8002b5a:	f10b 0b01 	add.w	fp, fp, #1
 8002b5e:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8002b62:	e006      	b.n	8002b72 <__kernel_rem_pio2+0x412>
 8002b64:	4620      	mov	r0, r4
 8002b66:	4629      	mov	r1, r5
 8002b68:	f7fd ff80 	bl	8000a6c <__aeabi_d2iz>
 8002b6c:	ab0c      	add	r3, sp, #48	; 0x30
 8002b6e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8002b72:	4640      	mov	r0, r8
 8002b74:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 8002de0 <__kernel_rem_pio2+0x680>
 8002b78:	f000 fa8a 	bl	8003090 <scalbn>
 8002b7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b80:	9305      	str	r3, [sp, #20]
 8002b82:	9a05      	ldr	r2, [sp, #20]
 8002b84:	ab98      	add	r3, sp, #608	; 0x260
 8002b86:	189f      	adds	r7, r3, r2
 8002b88:	ec55 4b10 	vmov	r4, r5, d0
 8002b8c:	3f98      	subs	r7, #152	; 0x98
 8002b8e:	465e      	mov	r6, fp
 8002b90:	2e00      	cmp	r6, #0
 8002b92:	db14      	blt.n	8002bbe <__kernel_rem_pio2+0x45e>
 8002b94:	ab0c      	add	r3, sp, #48	; 0x30
 8002b96:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8002b9a:	f7fd fc67 	bl	800046c <__aeabi_i2d>
 8002b9e:	4622      	mov	r2, r4
 8002ba0:	462b      	mov	r3, r5
 8002ba2:	f7fd fcc9 	bl	8000538 <__aeabi_dmul>
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8002bac:	4b91      	ldr	r3, [pc, #580]	; (8002df4 <__kernel_rem_pio2+0x694>)
 8002bae:	4620      	mov	r0, r4
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	f7fd fcc1 	bl	8000538 <__aeabi_dmul>
 8002bb6:	3e01      	subs	r6, #1
 8002bb8:	4604      	mov	r4, r0
 8002bba:	460d      	mov	r5, r1
 8002bbc:	e7e8      	b.n	8002b90 <__kernel_rem_pio2+0x430>
 8002bbe:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 8002bc2:	2400      	movs	r4, #0
 8002bc4:	4645      	mov	r5, r8
 8002bc6:	ebbb 0704 	subs.w	r7, fp, r4
 8002bca:	d424      	bmi.n	8002c16 <__kernel_rem_pio2+0x4b6>
 8002bcc:	ed9f 7b86 	vldr	d7, [pc, #536]	; 8002de8 <__kernel_rem_pio2+0x688>
 8002bd0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002bd4:	ab70      	add	r3, sp, #448	; 0x1c0
 8002bd6:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8002df8 <__kernel_rem_pio2+0x698>
 8002bda:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8002bde:	2600      	movs	r6, #0
 8002be0:	9b02      	ldr	r3, [sp, #8]
 8002be2:	429e      	cmp	r6, r3
 8002be4:	dc11      	bgt.n	8002c0a <__kernel_rem_pio2+0x4aa>
 8002be6:	42a6      	cmp	r6, r4
 8002be8:	dc0f      	bgt.n	8002c0a <__kernel_rem_pio2+0x4aa>
 8002bea:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 8002bee:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8002bf2:	f7fd fca1 	bl	8000538 <__aeabi_dmul>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002bfe:	f7fd fae9 	bl	80001d4 <__adddf3>
 8002c02:	3601      	adds	r6, #1
 8002c04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002c08:	e7ea      	b.n	8002be0 <__kernel_rem_pio2+0x480>
 8002c0a:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002c0e:	3401      	adds	r4, #1
 8002c10:	eca8 7b02 	vstmia	r8!, {d7}
 8002c14:	e7d7      	b.n	8002bc6 <__kernel_rem_pio2+0x466>
 8002c16:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	f200 80d8 	bhi.w	8002dce <__kernel_rem_pio2+0x66e>
 8002c1e:	e8df f003 	tbb	[pc, r3]
 8002c22:	0810      	.short	0x0810
 8002c24:	0208      	.short	0x0208
 8002c26:	9a05      	ldr	r2, [sp, #20]
 8002c28:	ab48      	add	r3, sp, #288	; 0x120
 8002c2a:	189c      	adds	r4, r3, r2
 8002c2c:	46a0      	mov	r8, r4
 8002c2e:	46d9      	mov	r9, fp
 8002c30:	e056      	b.n	8002ce0 <__kernel_rem_pio2+0x580>
 8002c32:	9c05      	ldr	r4, [sp, #20]
 8002c34:	ab48      	add	r3, sp, #288	; 0x120
 8002c36:	3408      	adds	r4, #8
 8002c38:	441c      	add	r4, r3
 8002c3a:	465d      	mov	r5, fp
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	2100      	movs	r1, #0
 8002c40:	e01d      	b.n	8002c7e <__kernel_rem_pio2+0x51e>
 8002c42:	9b05      	ldr	r3, [sp, #20]
 8002c44:	aa98      	add	r2, sp, #608	; 0x260
 8002c46:	4413      	add	r3, r2
 8002c48:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	2100      	movs	r1, #0
 8002c50:	f1bb 0f00 	cmp.w	fp, #0
 8002c54:	db06      	blt.n	8002c64 <__kernel_rem_pio2+0x504>
 8002c56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8002c5a:	f7fd fabb 	bl	80001d4 <__adddf3>
 8002c5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002c62:	e7f5      	b.n	8002c50 <__kernel_rem_pio2+0x4f0>
 8002c64:	f1ba 0f00 	cmp.w	sl, #0
 8002c68:	d003      	beq.n	8002c72 <__kernel_rem_pio2+0x512>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002c70:	e001      	b.n	8002c76 <__kernel_rem_pio2+0x516>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	9901      	ldr	r1, [sp, #4]
 8002c78:	e9c1 2300 	strd	r2, r3, [r1]
 8002c7c:	e0a7      	b.n	8002dce <__kernel_rem_pio2+0x66e>
 8002c7e:	2d00      	cmp	r5, #0
 8002c80:	db05      	blt.n	8002c8e <__kernel_rem_pio2+0x52e>
 8002c82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8002c86:	f7fd faa5 	bl	80001d4 <__adddf3>
 8002c8a:	3d01      	subs	r5, #1
 8002c8c:	e7f7      	b.n	8002c7e <__kernel_rem_pio2+0x51e>
 8002c8e:	f1ba 0f00 	cmp.w	sl, #0
 8002c92:	d003      	beq.n	8002c9c <__kernel_rem_pio2+0x53c>
 8002c94:	4602      	mov	r2, r0
 8002c96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002c9a:	e001      	b.n	8002ca0 <__kernel_rem_pio2+0x540>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	9c01      	ldr	r4, [sp, #4]
 8002ca2:	e9c4 2300 	strd	r2, r3, [r4]
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8002cae:	f7fd fa8f 	bl	80001d0 <__aeabi_dsub>
 8002cb2:	ad4a      	add	r5, sp, #296	; 0x128
 8002cb4:	2401      	movs	r4, #1
 8002cb6:	45a3      	cmp	fp, r4
 8002cb8:	db05      	blt.n	8002cc6 <__kernel_rem_pio2+0x566>
 8002cba:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8002cbe:	f7fd fa89 	bl	80001d4 <__adddf3>
 8002cc2:	3401      	adds	r4, #1
 8002cc4:	e7f7      	b.n	8002cb6 <__kernel_rem_pio2+0x556>
 8002cc6:	f1ba 0f00 	cmp.w	sl, #0
 8002cca:	d003      	beq.n	8002cd4 <__kernel_rem_pio2+0x574>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002cd2:	e001      	b.n	8002cd8 <__kernel_rem_pio2+0x578>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	9901      	ldr	r1, [sp, #4]
 8002cda:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002cde:	e076      	b.n	8002dce <__kernel_rem_pio2+0x66e>
 8002ce0:	f1b9 0f00 	cmp.w	r9, #0
 8002ce4:	dd20      	ble.n	8002d28 <__kernel_rem_pio2+0x5c8>
 8002ce6:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
 8002cea:	ed98 7b02 	vldr	d7, [r8, #8]
 8002cee:	4630      	mov	r0, r6
 8002cf0:	ec53 2b17 	vmov	r2, r3, d7
 8002cf4:	4639      	mov	r1, r7
 8002cf6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002cfa:	f7fd fa6b 	bl	80001d4 <__adddf3>
 8002cfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4630      	mov	r0, r6
 8002d08:	4639      	mov	r1, r7
 8002d0a:	f7fd fa61 	bl	80001d0 <__aeabi_dsub>
 8002d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002d12:	f7fd fa5f 	bl	80001d4 <__adddf3>
 8002d16:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002d1a:	f109 39ff 	add.w	r9, r9, #4294967295
 8002d1e:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8002d22:	ed88 7b00 	vstr	d7, [r8]
 8002d26:	e7db      	b.n	8002ce0 <__kernel_rem_pio2+0x580>
 8002d28:	465e      	mov	r6, fp
 8002d2a:	2e01      	cmp	r6, #1
 8002d2c:	dd1f      	ble.n	8002d6e <__kernel_rem_pio2+0x60e>
 8002d2e:	e974 8902 	ldrd	r8, r9, [r4, #-8]!
 8002d32:	ed94 7b02 	vldr	d7, [r4, #8]
 8002d36:	4640      	mov	r0, r8
 8002d38:	ec53 2b17 	vmov	r2, r3, d7
 8002d3c:	4649      	mov	r1, r9
 8002d3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002d42:	f7fd fa47 	bl	80001d4 <__adddf3>
 8002d46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4640      	mov	r0, r8
 8002d50:	4649      	mov	r1, r9
 8002d52:	f7fd fa3d 	bl	80001d0 <__aeabi_dsub>
 8002d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002d5a:	f7fd fa3b 	bl	80001d4 <__adddf3>
 8002d5e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002d62:	3e01      	subs	r6, #1
 8002d64:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002d68:	ed84 7b00 	vstr	d7, [r4]
 8002d6c:	e7dd      	b.n	8002d2a <__kernel_rem_pio2+0x5ca>
 8002d6e:	9c05      	ldr	r4, [sp, #20]
 8002d70:	ab48      	add	r3, sp, #288	; 0x120
 8002d72:	3408      	adds	r4, #8
 8002d74:	441c      	add	r4, r3
 8002d76:	2000      	movs	r0, #0
 8002d78:	2100      	movs	r1, #0
 8002d7a:	f1bb 0f01 	cmp.w	fp, #1
 8002d7e:	dd06      	ble.n	8002d8e <__kernel_rem_pio2+0x62e>
 8002d80:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8002d84:	f7fd fa26 	bl	80001d4 <__adddf3>
 8002d88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002d8c:	e7f5      	b.n	8002d7a <__kernel_rem_pio2+0x61a>
 8002d8e:	f1ba 0f00 	cmp.w	sl, #0
 8002d92:	d10b      	bne.n	8002dac <__kernel_rem_pio2+0x64c>
 8002d94:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8002d98:	9c01      	ldr	r4, [sp, #4]
 8002d9a:	e9c4 2300 	strd	r2, r3, [r4]
 8002d9e:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8002da2:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8002da6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8002daa:	e010      	b.n	8002dce <__kernel_rem_pio2+0x66e>
 8002dac:	9a01      	ldr	r2, [sp, #4]
 8002dae:	682b      	ldr	r3, [r5, #0]
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	686b      	ldr	r3, [r5, #4]
 8002db4:	6110      	str	r0, [r2, #16]
 8002db6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002dba:	6053      	str	r3, [r2, #4]
 8002dbc:	68ab      	ldr	r3, [r5, #8]
 8002dbe:	6093      	str	r3, [r2, #8]
 8002dc0:	68eb      	ldr	r3, [r5, #12]
 8002dc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002dc6:	60d3      	str	r3, [r2, #12]
 8002dc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002dcc:	6153      	str	r3, [r2, #20]
 8002dce:	9b04      	ldr	r3, [sp, #16]
 8002dd0:	f003 0007 	and.w	r0, r3, #7
 8002dd4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8002dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ddc:	f3af 8000 	nop.w
 8002de0:	00000000 	.word	0x00000000
 8002de4:	3ff00000 	.word	0x3ff00000
	...
 8002df0:	41700000 	.word	0x41700000
 8002df4:	3e700000 	.word	0x3e700000
 8002df8:	08003358 	.word	0x08003358
 8002dfc:	00000000 	.word	0x00000000

08002e00 <__kernel_sin>:
 8002e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e04:	ec55 4b10 	vmov	r4, r5, d0
 8002e08:	b085      	sub	sp, #20
 8002e0a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8002e0e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8002e12:	ed8d 1b00 	vstr	d1, [sp]
 8002e16:	9002      	str	r0, [sp, #8]
 8002e18:	da07      	bge.n	8002e2a <__kernel_sin+0x2a>
 8002e1a:	ee10 0a10 	vmov	r0, s0
 8002e1e:	4629      	mov	r1, r5
 8002e20:	f7fd fe24 	bl	8000a6c <__aeabi_d2iz>
 8002e24:	2800      	cmp	r0, #0
 8002e26:	f000 8081 	beq.w	8002f2c <__kernel_sin+0x12c>
 8002e2a:	4622      	mov	r2, r4
 8002e2c:	462b      	mov	r3, r5
 8002e2e:	4620      	mov	r0, r4
 8002e30:	4629      	mov	r1, r5
 8002e32:	f7fd fb81 	bl	8000538 <__aeabi_dmul>
 8002e36:	4682      	mov	sl, r0
 8002e38:	468b      	mov	fp, r1
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4620      	mov	r0, r4
 8002e40:	4629      	mov	r1, r5
 8002e42:	f7fd fb79 	bl	8000538 <__aeabi_dmul>
 8002e46:	a341      	add	r3, pc, #260	; (adr r3, 8002f4c <__kernel_sin+0x14c>)
 8002e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4c:	4680      	mov	r8, r0
 8002e4e:	4689      	mov	r9, r1
 8002e50:	4650      	mov	r0, sl
 8002e52:	4659      	mov	r1, fp
 8002e54:	f7fd fb70 	bl	8000538 <__aeabi_dmul>
 8002e58:	a33e      	add	r3, pc, #248	; (adr r3, 8002f54 <__kernel_sin+0x154>)
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	f7fd f9b7 	bl	80001d0 <__aeabi_dsub>
 8002e62:	4652      	mov	r2, sl
 8002e64:	465b      	mov	r3, fp
 8002e66:	f7fd fb67 	bl	8000538 <__aeabi_dmul>
 8002e6a:	a33c      	add	r3, pc, #240	; (adr r3, 8002f5c <__kernel_sin+0x15c>)
 8002e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e70:	f7fd f9b0 	bl	80001d4 <__adddf3>
 8002e74:	4652      	mov	r2, sl
 8002e76:	465b      	mov	r3, fp
 8002e78:	f7fd fb5e 	bl	8000538 <__aeabi_dmul>
 8002e7c:	a339      	add	r3, pc, #228	; (adr r3, 8002f64 <__kernel_sin+0x164>)
 8002e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e82:	f7fd f9a5 	bl	80001d0 <__aeabi_dsub>
 8002e86:	4652      	mov	r2, sl
 8002e88:	465b      	mov	r3, fp
 8002e8a:	f7fd fb55 	bl	8000538 <__aeabi_dmul>
 8002e8e:	a337      	add	r3, pc, #220	; (adr r3, 8002f6c <__kernel_sin+0x16c>)
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f7fd f99e 	bl	80001d4 <__adddf3>
 8002e98:	9b02      	ldr	r3, [sp, #8]
 8002e9a:	4606      	mov	r6, r0
 8002e9c:	460f      	mov	r7, r1
 8002e9e:	b99b      	cbnz	r3, 8002ec8 <__kernel_sin+0xc8>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4650      	mov	r0, sl
 8002ea6:	4659      	mov	r1, fp
 8002ea8:	f7fd fb46 	bl	8000538 <__aeabi_dmul>
 8002eac:	a324      	add	r3, pc, #144	; (adr r3, 8002f40 <__kernel_sin+0x140>)
 8002eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb2:	f7fd f98d 	bl	80001d0 <__aeabi_dsub>
 8002eb6:	4642      	mov	r2, r8
 8002eb8:	464b      	mov	r3, r9
 8002eba:	f7fd fb3d 	bl	8000538 <__aeabi_dmul>
 8002ebe:	4622      	mov	r2, r4
 8002ec0:	462b      	mov	r3, r5
 8002ec2:	f7fd f987 	bl	80001d4 <__adddf3>
 8002ec6:	e033      	b.n	8002f30 <__kernel_sin+0x130>
 8002ec8:	2200      	movs	r2, #0
 8002eca:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <__kernel_sin+0x148>)
 8002ecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002ed0:	f7fd fb32 	bl	8000538 <__aeabi_dmul>
 8002ed4:	4632      	mov	r2, r6
 8002ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002eda:	463b      	mov	r3, r7
 8002edc:	4640      	mov	r0, r8
 8002ede:	4649      	mov	r1, r9
 8002ee0:	f7fd fb2a 	bl	8000538 <__aeabi_dmul>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002eec:	f7fd f970 	bl	80001d0 <__aeabi_dsub>
 8002ef0:	4652      	mov	r2, sl
 8002ef2:	465b      	mov	r3, fp
 8002ef4:	f7fd fb20 	bl	8000538 <__aeabi_dmul>
 8002ef8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002efc:	f7fd f968 	bl	80001d0 <__aeabi_dsub>
 8002f00:	a30f      	add	r3, pc, #60	; (adr r3, 8002f40 <__kernel_sin+0x140>)
 8002f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f06:	4606      	mov	r6, r0
 8002f08:	460f      	mov	r7, r1
 8002f0a:	4640      	mov	r0, r8
 8002f0c:	4649      	mov	r1, r9
 8002f0e:	f7fd fb13 	bl	8000538 <__aeabi_dmul>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4630      	mov	r0, r6
 8002f18:	4639      	mov	r1, r7
 8002f1a:	f7fd f95b 	bl	80001d4 <__adddf3>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4620      	mov	r0, r4
 8002f24:	4629      	mov	r1, r5
 8002f26:	f7fd f953 	bl	80001d0 <__aeabi_dsub>
 8002f2a:	e001      	b.n	8002f30 <__kernel_sin+0x130>
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	4629      	mov	r1, r5
 8002f30:	ec41 0b10 	vmov	d0, r0, r1
 8002f34:	b005      	add	sp, #20
 8002f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f3a:	bf00      	nop
 8002f3c:	f3af 8000 	nop.w
 8002f40:	55555549 	.word	0x55555549
 8002f44:	3fc55555 	.word	0x3fc55555
 8002f48:	3fe00000 	.word	0x3fe00000
 8002f4c:	5acfd57c 	.word	0x5acfd57c
 8002f50:	3de5d93a 	.word	0x3de5d93a
 8002f54:	8a2b9ceb 	.word	0x8a2b9ceb
 8002f58:	3e5ae5e6 	.word	0x3e5ae5e6
 8002f5c:	57b1fe7d 	.word	0x57b1fe7d
 8002f60:	3ec71de3 	.word	0x3ec71de3
 8002f64:	19c161d5 	.word	0x19c161d5
 8002f68:	3f2a01a0 	.word	0x3f2a01a0
 8002f6c:	1110f8a6 	.word	0x1110f8a6
 8002f70:	3f811111 	.word	0x3f811111

08002f74 <fabs>:
 8002f74:	ec53 2b10 	vmov	r2, r3, d0
 8002f78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f7c:	ec43 2b10 	vmov	d0, r2, r3
 8002f80:	4770      	bx	lr
 8002f82:	0000      	movs	r0, r0
 8002f84:	0000      	movs	r0, r0
	...

08002f88 <floor>:
 8002f88:	ec51 0b10 	vmov	r0, r1, d0
 8002f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f90:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8002f94:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8002f98:	2e13      	cmp	r6, #19
 8002f9a:	ee10 8a10 	vmov	r8, s0
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	ee10 5a10 	vmov	r5, s0
 8002fa4:	dc33      	bgt.n	800300e <floor+0x86>
 8002fa6:	2e00      	cmp	r6, #0
 8002fa8:	da16      	bge.n	8002fd8 <floor+0x50>
 8002faa:	a335      	add	r3, pc, #212	; (adr r3, 8003080 <floor+0xf8>)
 8002fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb0:	f7fd f910 	bl	80001d4 <__adddf3>
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f7fd fd4e 	bl	8000a58 <__aeabi_dcmpgt>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d057      	beq.n	8003070 <floor+0xe8>
 8002fc0:	2c00      	cmp	r4, #0
 8002fc2:	da53      	bge.n	800306c <floor+0xe4>
 8002fc4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8002fc8:	ea53 0308 	orrs.w	r3, r3, r8
 8002fcc:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <floor+0x100>)
 8002fce:	f04f 0500 	mov.w	r5, #0
 8002fd2:	bf18      	it	ne
 8002fd4:	461c      	movne	r4, r3
 8002fd6:	e04b      	b.n	8003070 <floor+0xe8>
 8002fd8:	4f2c      	ldr	r7, [pc, #176]	; (800308c <floor+0x104>)
 8002fda:	4137      	asrs	r7, r6
 8002fdc:	ea01 0307 	and.w	r3, r1, r7
 8002fe0:	4303      	orrs	r3, r0
 8002fe2:	d047      	beq.n	8003074 <floor+0xec>
 8002fe4:	a326      	add	r3, pc, #152	; (adr r3, 8003080 <floor+0xf8>)
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	f7fd f8f3 	bl	80001d4 <__adddf3>
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f7fd fd31 	bl	8000a58 <__aeabi_dcmpgt>
 8002ff6:	b3d8      	cbz	r0, 8003070 <floor+0xe8>
 8002ff8:	2c00      	cmp	r4, #0
 8002ffa:	bfbe      	ittt	lt
 8002ffc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003000:	fa43 f606 	asrlt.w	r6, r3, r6
 8003004:	19a4      	addlt	r4, r4, r6
 8003006:	ea24 0407 	bic.w	r4, r4, r7
 800300a:	2500      	movs	r5, #0
 800300c:	e030      	b.n	8003070 <floor+0xe8>
 800300e:	2e33      	cmp	r6, #51	; 0x33
 8003010:	dd08      	ble.n	8003024 <floor+0x9c>
 8003012:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003016:	d12d      	bne.n	8003074 <floor+0xec>
 8003018:	ee10 2a10 	vmov	r2, s0
 800301c:	460b      	mov	r3, r1
 800301e:	f7fd f8d9 	bl	80001d4 <__adddf3>
 8003022:	e027      	b.n	8003074 <floor+0xec>
 8003024:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8003028:	f04f 33ff 	mov.w	r3, #4294967295
 800302c:	fa23 f707 	lsr.w	r7, r3, r7
 8003030:	4238      	tst	r0, r7
 8003032:	d01f      	beq.n	8003074 <floor+0xec>
 8003034:	a312      	add	r3, pc, #72	; (adr r3, 8003080 <floor+0xf8>)
 8003036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303a:	f7fd f8cb 	bl	80001d4 <__adddf3>
 800303e:	2200      	movs	r2, #0
 8003040:	2300      	movs	r3, #0
 8003042:	f7fd fd09 	bl	8000a58 <__aeabi_dcmpgt>
 8003046:	b198      	cbz	r0, 8003070 <floor+0xe8>
 8003048:	2c00      	cmp	r4, #0
 800304a:	da0c      	bge.n	8003066 <floor+0xde>
 800304c:	2e14      	cmp	r6, #20
 800304e:	d101      	bne.n	8003054 <floor+0xcc>
 8003050:	3401      	adds	r4, #1
 8003052:	e008      	b.n	8003066 <floor+0xde>
 8003054:	2301      	movs	r3, #1
 8003056:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800305a:	fa03 f606 	lsl.w	r6, r3, r6
 800305e:	4435      	add	r5, r6
 8003060:	45a8      	cmp	r8, r5
 8003062:	bf88      	it	hi
 8003064:	18e4      	addhi	r4, r4, r3
 8003066:	ea25 0507 	bic.w	r5, r5, r7
 800306a:	e001      	b.n	8003070 <floor+0xe8>
 800306c:	2500      	movs	r5, #0
 800306e:	462c      	mov	r4, r5
 8003070:	4621      	mov	r1, r4
 8003072:	4628      	mov	r0, r5
 8003074:	ec41 0b10 	vmov	d0, r0, r1
 8003078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800307c:	f3af 8000 	nop.w
 8003080:	8800759c 	.word	0x8800759c
 8003084:	7e37e43c 	.word	0x7e37e43c
 8003088:	bff00000 	.word	0xbff00000
 800308c:	000fffff 	.word	0x000fffff

08003090 <scalbn>:
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	ec55 4b10 	vmov	r4, r5, d0
 8003096:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800309a:	4606      	mov	r6, r0
 800309c:	462b      	mov	r3, r5
 800309e:	b9a2      	cbnz	r2, 80030ca <scalbn+0x3a>
 80030a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80030a4:	4323      	orrs	r3, r4
 80030a6:	d059      	beq.n	800315c <scalbn+0xcc>
 80030a8:	2200      	movs	r2, #0
 80030aa:	4b33      	ldr	r3, [pc, #204]	; (8003178 <scalbn+0xe8>)
 80030ac:	4629      	mov	r1, r5
 80030ae:	ee10 0a10 	vmov	r0, s0
 80030b2:	f7fd fa41 	bl	8000538 <__aeabi_dmul>
 80030b6:	4a31      	ldr	r2, [pc, #196]	; (800317c <scalbn+0xec>)
 80030b8:	4296      	cmp	r6, r2
 80030ba:	4604      	mov	r4, r0
 80030bc:	460d      	mov	r5, r1
 80030be:	460b      	mov	r3, r1
 80030c0:	da0f      	bge.n	80030e2 <scalbn+0x52>
 80030c2:	a329      	add	r3, pc, #164	; (adr r3, 8003168 <scalbn+0xd8>)
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	e045      	b.n	8003156 <scalbn+0xc6>
 80030ca:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d10a      	bne.n	80030e8 <scalbn+0x58>
 80030d2:	ee10 2a10 	vmov	r2, s0
 80030d6:	462b      	mov	r3, r5
 80030d8:	4620      	mov	r0, r4
 80030da:	4629      	mov	r1, r5
 80030dc:	f7fd f87a 	bl	80001d4 <__adddf3>
 80030e0:	e03e      	b.n	8003160 <scalbn+0xd0>
 80030e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80030e6:	3a36      	subs	r2, #54	; 0x36
 80030e8:	4432      	add	r2, r6
 80030ea:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80030ee:	428a      	cmp	r2, r1
 80030f0:	dd02      	ble.n	80030f8 <scalbn+0x68>
 80030f2:	ec45 4b11 	vmov	d1, r4, r5
 80030f6:	e011      	b.n	800311c <scalbn+0x8c>
 80030f8:	2a00      	cmp	r2, #0
 80030fa:	dd06      	ble.n	800310a <scalbn+0x7a>
 80030fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003100:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003104:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003108:	e028      	b.n	800315c <scalbn+0xcc>
 800310a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800310e:	da17      	bge.n	8003140 <scalbn+0xb0>
 8003110:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003114:	429e      	cmp	r6, r3
 8003116:	ec45 4b11 	vmov	d1, r4, r5
 800311a:	dd07      	ble.n	800312c <scalbn+0x9c>
 800311c:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8003170 <scalbn+0xe0>
 8003120:	f000 f830 	bl	8003184 <copysign>
 8003124:	a312      	add	r3, pc, #72	; (adr r3, 8003170 <scalbn+0xe0>)
 8003126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312a:	e006      	b.n	800313a <scalbn+0xaa>
 800312c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003168 <scalbn+0xd8>
 8003130:	f000 f828 	bl	8003184 <copysign>
 8003134:	a30c      	add	r3, pc, #48	; (adr r3, 8003168 <scalbn+0xd8>)
 8003136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313a:	ec51 0b10 	vmov	r0, r1, d0
 800313e:	e00a      	b.n	8003156 <scalbn+0xc6>
 8003140:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003144:	3236      	adds	r2, #54	; 0x36
 8003146:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800314a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800314e:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <scalbn+0xf0>)
 8003150:	4620      	mov	r0, r4
 8003152:	4629      	mov	r1, r5
 8003154:	2200      	movs	r2, #0
 8003156:	f7fd f9ef 	bl	8000538 <__aeabi_dmul>
 800315a:	e001      	b.n	8003160 <scalbn+0xd0>
 800315c:	4620      	mov	r0, r4
 800315e:	4629      	mov	r1, r5
 8003160:	ec41 0b10 	vmov	d0, r0, r1
 8003164:	bd70      	pop	{r4, r5, r6, pc}
 8003166:	bf00      	nop
 8003168:	c2f8f359 	.word	0xc2f8f359
 800316c:	01a56e1f 	.word	0x01a56e1f
 8003170:	8800759c 	.word	0x8800759c
 8003174:	7e37e43c 	.word	0x7e37e43c
 8003178:	43500000 	.word	0x43500000
 800317c:	ffff3cb0 	.word	0xffff3cb0
 8003180:	3c900000 	.word	0x3c900000

08003184 <copysign>:
 8003184:	ec53 2b10 	vmov	r2, r3, d0
 8003188:	ee11 0a90 	vmov	r0, s3
 800318c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003190:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003194:	ea41 0300 	orr.w	r3, r1, r0
 8003198:	ec43 2b10 	vmov	d0, r2, r3
 800319c:	4770      	bx	lr
	...

080031a0 <_init>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	bf00      	nop
 80031a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a6:	bc08      	pop	{r3}
 80031a8:	469e      	mov	lr, r3
 80031aa:	4770      	bx	lr

080031ac <_fini>:
 80031ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ae:	bf00      	nop
 80031b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b2:	bc08      	pop	{r3}
 80031b4:	469e      	mov	lr, r3
 80031b6:	4770      	bx	lr
